<?xml version="1.0" encoding="utf-8"?>
<!-- ===================================================================== -->
<!--
 * This file is part of CARDAMOM (R) which is jointly developed by THALES 
 * and SELEX-SI. 
 * 
 * It is derivative work based on PERCO Copyright (C) THALES 2000-2003. 
 * All rights reserved.
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it under 
 * the terms of the GNU Library General Public License as published by the
 * Free Software Foundation; either version 2 of the License, or (at your 
 * option) any later version. 
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public 
 * License for more details. 
 * 
 * You should have received a copy of the GNU Library General 
 * Public License along with CARDAMOM; see the file COPYING. If not, write to 
 * the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-->
<!-- ===================================================================== -->


<!DOCTYPE project [
    <!ENTITY common_config_targets SYSTEM "file:data/CommonConfigTargets.xml">
]>


<!--
    NOTE: properties having "config." as prefix are meant to be saved into a
    properties file.
-->

<project name="MasterBuild" default="usage" basedir=".">


    <description>
        This master build file defines only the main targets.
    </description>


    <!-- Include XML fragments -->
    &common_config_targets;


    <!-- =======================================================================
        The "usage" target displays the usage on the screen.

        It depends on the following targets:
            + "-set-aliases"
    -->
    <target name="usage" description="display the usage">
        <property name="cmd" value="ant -f MasterBuild.xml -projecthelp"/>
        <echo>Run '${cmd}' to list the targets.</echo>
    </target>


    <!-- =======================================================================
        The "help" target defines an alias to the "usage" target.

        It depends on the following targets:
            + "-usage"
    -->
    <target name="help" depends="usage" description="display the usage"/>


    <!-- =======================================================================
        The "-initialize" target defines the global properties.

        It depends on the following targets:
            + "-print-init-message"
            + "-set-aliases"
            + "-set-canonical-system-name"
            + "compile-cdmw-ant-tasks"
            + "-define-global-macros"
            + "-load-global-properties"
            + "-load-release-properties"
            + "-check-csci-version"
    -->
    <target name="-initialize"
            depends="-print-init-message, -set-aliases,
                     -set-canonical-system-name, compile-cdmw-ant-tasks,
                     -define-global-macros, -load-global-properties,
                     -load-release-properties, -check-csci-version">

        <!-- save the location of this CSCI -->
        <property name="config.Build.location" location="${basedir}"/>

        <!-- clean the temporary directory -->
        <!--
        <delete>
            <fileset dir="${TMP}" includes="${tmpfile.prefix}*"/>
        </delete>
        -->
    </target>


    <!-- =======================================================================
        The "-print-init-message" target informs the user that the build is
        initializing.
    -->
    <target name="-print-init-message">
        <echo>Initializing...</echo>
    </target>


    <!-- =======================================================================
        The "-set-canonical-system-name" target defines the canonical system
        name string.

        It depends on the following targets:
            + "-set-linux-os-arch"
    -->
    <target name="-set-canonical-system-name" depends="-set-linux-os-arch">
        <if>
            <isset property="linux.os.arch"/>
            <then>
                <property name="config.site.csn"
                          value="${my.os.name}-${linux.os.arch}-${os.version}"/>
            </then>
        </if>

        <property name="config.site.csn"
                  value="${my.os.name}-${os.arch}-${os.version}"/>
    </target>


    <!-- =======================================================================
        The "-set-linux-os-arch" target defines the Linux OS architecture
        string. This target is necessary as ${os.arch} always return i386 on an
        Intel compatible system.
    -->
    <target name="-set-linux-os-arch" if="is.linux">
        <exec executable="uname" os="Linux" outputproperty="linux.os.arch">
            <arg value="-m"/>
        </exec>
    </target>


    <!-- ======================================================================
        The "compile-cdmw-ant-tasks" target compiles the CDMW ANT tasks and
        defines new ANT tasks.

        It depends on the following tasks:
            + "-set-aliases"
    -->
    <target name="compile-cdmw-ant-tasks" 
            description="compile the CDMW ANT tasks"
            depends="-set-aliases">
            
        <!--
            when this target is run, the global properties are not loaded yet,
            the name of the delivery directory is still unknown and therefore
            we need to define it here as well as some other directory names
            for the compilation of the CDMW tasks to succeed.
        -->
        <property name="mb.delivery.dir"     value="delivery"/>
        <property name="mb.delivery.lib.dir" value="lib"/>
        <property name="mb.build.dir"        value="prod"/>
        <property name="mb.csc.src.dir"      value="src"/>
        <property name="mb.cdmwtasks.jar"    value="libcdmwtasks.jar"/>
        <property name="mb.csci.delivery.lib.dir"
                  location="${mb.delivery.dir}${FS}${mb.delivery.lib.dir}"/>

        <!-- compile the CDMW tasks -->
        <ant dir="customtasks${FS}java" antfile="BuildCustomTasks.xml">
            <property name="delivery.dir"     value="${mb.delivery.dir}"/>
            <property name="delivery.lib.dir" value="${mb.delivery.lib.dir}"/>
            <property name="build.dir"        value="${mb.build.dir}"/>
            <property name="csc.src.dir"      value="${mb.csc.src.dir}"/>
            <property name="delivery.file"    value="${mb.cdmwtasks.jar}"/>
            <property name="csci.delivery.lib.dir"
                      value="${mb.csci.delivery.lib.dir}"/>
        </ant>

        <property name="cdmwtasks.jar.location"
            location="${mb.csci.delivery.lib.dir}${FS}${mb.cdmwtasks.jar}"/>

        <!-- make the CDMW tasks available -->
        <typedef resource="cdmwtasks.properties"
                 classpath="${cdmwtasks.jar.location}"/>
    </target>


    <!-- =======================================================================
        The "-load-global-properties" target loads the global properties file.

        It depends on the following targets:
            + "-check-global-properties-file"
    -->
    <target name="-load-global-properties"
            depends="-check-global-properties-file">

        <xmlproperty file="${mb.global.properties}" collapseAttributes="true"/>
    </target>


    <!-- =======================================================================
        The "-check-global-properties-file" target checks if the global
        properties file exists and validates it against its XML schema.
    -->
    <target name="-check-global-properties-file">
        <property name="mb.data.dir" value="data"/>

        <!-- check if the file exists -->
        <property name="mb.global.properties"
                  location="data${FS}GlobalProperties.xml"/>

        <available file="${mb.global.properties}" type="file"
                   property="mb.global.properties.present"/>

        <fail unless="mb.global.properties.present"
              message="${mb.global.properties} does not exist."/>

        <!-- validate it -->
        <property name="mb.global.properties.xsd"
                  location="data${FS}GlobalProperties.xsd"/>

        <xsdvalidate file="${mb.global.properties}"
                     xsd="${mb.global.properties.xsd}" warn="true"/>
    </target>


    <!-- =======================================================================
        The "-load-release-properties" target loads the release properties file.

        It depends on the following targets:
            + "-check-release-properties-file"
    -->
    <target name="-load-release-properties"
            depends="-check-release-properties-file">

        <loadreleaseproperties file="${mb.release.properties}"/>
    </target>


    <!-- =======================================================================
        The "-check-release-properties-file" target checks if the release
        properties file exists and validates it against its XML schema.
    -->
    <target name="-check-release-properties-file">
        <property name="mb.xml.dir" location="${config.csci.data.dir}"/>
        <property name="mb.xsd.dir" location="${config.csci.data.dir}"/>

        <!-- set the file name -->
        <property name="mb.release.properties"
                  location="${mb.xml.dir}${FS}ReleaseProperties.xml"/>

        <!-- check -->
        <checkxmlpropertiesfile
            my.properties.file="${mb.release.properties}"
            my.xsd.dir="${mb.xsd.dir}"/>
    </target>


    <!-- ======================================================================
        The "-check-csci-version" target checks if the version of this CSCI
        matches the version required for this product release.

        It depends on the following targets:
            + "-load-csci-properties"
    -->
    <target name="-check-csci-version" depends="-load-csci-properties">
        <checkcsciattributes
            my.csci.name="${mb.csci.name}"
            my.req.csci.name="Build"
            my.csci.version="${mb.csci.version}"
            my.req.csci.ver="${require.Build.version}"
            my.csci.properties="${mb.csci.properties}"
            require.csci.version.checking="${require.csci.version.checking}"/>
    </target>


    <!-- =======================================================================
        The "-load-csci-properties" target loads the CSCI properties file.

        It depends on the following targets:
            + "-check-csci-properties-file"
    -->
    <target name="-load-csci-properties" depends="-check-csci-properties-file">
        <xmlproperty file="${mb.csci.properties}" keepRoot="false"
                     collapseAttributes="true" prefix="mb"/>
    </target>


    <!-- =======================================================================
        The "-check-csci-properties-file" target checks if the CSCI properties
        file exists and validates it against its XML schema.
    -->
    <target name="-check-csci-properties-file">
        <!-- set the file name -->
        <property name="mb.csci.properties"
                  location="${mb.data.dir}${FS}${config.csci.properties.file}"/>

        <!-- check -->
        <checkxmlpropertiesfile
            my.properties.file="${mb.csci.properties}"
            my.xsd.dir="${mb.xsd.dir}"
            require.validation="${config.csci.properties.validate}"/>
    </target>


    <!-- =======================================================================
        The "configure" target runs the interactive configurator.

        It depends on the following targets:
            + "-initialize"
            + "-set-configure-target-flag"
            + "-load-site-properties-as-previous"
            + "-construct-tokens-properties-file-paths"
    -->
    <target name="configure" description="run the interactive configurator"
            depends="-initialize, -set-configure-target-flag,
                     -load-site-properties-as-previous,
                     -construct-tokens-properties-file-paths">

        <propertyselector property="mb.save.props" delimiter=","
                          match="^config\.(.*)" select="\1"
                          casesensitive="true"/>

        <!-- save some properties temporarily -->
        <for list="${mb.save.props}" param="mb.prop.name">
            <sequential>
                <propertycopy override="true" property="mb.prop"
                              from="config.@{mb.prop.name}"/>

                <propertyfile file="${tmpconfig.cache}">
                    <entry key="config.@{mb.prop.name}" value="${mb.prop}"/>
                </propertyfile>

                <!-- unset properties -->
                <xvar name="mb.prop" unset="true"/>
            </sequential>
        </for>

        <!-- unset properties -->
        <xvar name="mb.save.props" unset="true"/>

        <!-- run the configurator -->
        <ant dir="configuration" antfile="ConfigureBuild.xml"
             target="-configure">

            <property name="xml.dir" value="${mb.xml.dir}"/>
            <property name="xsd.dir" value="${mb.xsd.dir}"/>
        </ant>
    </target>


    <!-- =======================================================================
        The "-set-configure-target-flag" target sets a flag to indicate that
        we are creating a new configuration for the build.
    -->
    <target name="-set-configure-target-flag">
        <property name="is.new.config" value="true"/>
    </target>


    <!-- =======================================================================
        The "reconfigure" target reconfigures the build environment with the
        settings from the site configuration file. This is a convenient way to
        re-dispatch the build files into the CSCs.

        It depends on the following targets:
            + "-initialize"
            + "-load-site-properties"
            + "-construct-tokens-properties-file-paths"
    -->
    <target name="reconfigure" description="run quick configuration"
            depends="-initialize, -load-site-properties,
                     -construct-tokens-properties-file-paths">

        <safeant dir="configuration"
                 antfile="ConfigureBuild.xml"
                 target="-reconfigure">

            <properties>
                <property name="xml.dir" value="${mb.xml.dir}"/>
                <property name="xsd.dir" value="${mb.xsd.dir}"/>
            </properties>
        </safeant>
    </target>


    <!-- =======================================================================
        The "-load-site-properties" target loads the site properties file.

        It depends on the following targets:
            + "-check-site-properties"
            + "-construct-cscis-list-file"
    -->
    <target name="-load-site-properties" if="mb.site.properties.present"
            depends="-check-site-properties, -construct-cscis-list-file">

        <property file="${mb.site.properties}"/>
    </target>


    <!-- =======================================================================
        The "-load-site-properties-as-previous" target loads the site
        properties file and prefixes all the properties with "prev" so that
        they do not interfere with the properties to be created subsequently.

        It depends on the following targets:
            + "-check-site-properties"
            + "-construct-cscis-list-file"
    -->
    <target name="-load-site-properties-as-previous"
            depends="-check-site-properties, -construct-cscis-list-file">

        <property name="mb.prev" value="prev"/>

        <property name="tmpconfig.cache"
                  location="${mb.site.properties.dir}${FS}.cache"/>

        <if>
            <available file="${tmpconfig.cache}"/>
            <then>
                <property file="${tmpconfig.cache}" prefix="${mb.prev}"/>
            </then>
        </if>

        <if>
            <isset property="mb.site.properties.present"/>
            <then>
                <property file="${mb.site.properties}" prefix="${mb.prev}"/>
            </then>
        </if>
    </target>


    <!-- =======================================================================
        The "-check-site-properties" target checks if the site properties file
        is present.

        It depends on the following targets:
            + "-check-site-properties"
    -->
    <target name="-check-site-properties" depends="-make-site-properties-dir">
        <!-- look for the site properties file -->

        <cleanupincompletecfgfiles configfiles.dir="${mb.site.properties.dir}"/>

        <!--
            by the default select the lastest site properties file
            created by the configurator.
        -->
        <findconfigfile dir="${mb.site.properties.dir}"
                        property="mb.latest.site.properties"/>

        <!--
            if the user has already specified a configuration number then
            try to locate the corresponding config file.
        -->
        <if>
            <isset property="mb.config.number"/>
            <then>
                <findfile dir="${mb.site.properties.dir}"
                          file="Site-*#${mb.config.number}.properties"
                          findFirst="true" property="mb.site.properties"/>
            </then>
        </if>

        <!--
            if the user has already specified a site properties file then
            use it instead of the one we have found.
        -->
        <if>
            <and>
                <not>
                    <isset property="mb.site.properties"/>
                </not>
                <isset property="mb.latest.site.properties"/>
            </and>
            <then>
                <!--
                    the user did not specify any valid configuration,
                    fallback to the latest configuration that we have
                    detected previously.
                -->
                <propertycopy property="mb.site.properties"
                              from="mb.latest.site.properties"/>
            </then>
        </if>

        <!-- check -->
        <available file="${mb.site.properties}" type="file"
                   property="mb.site.properties.present"/>

        <if>
            <isset property="is.new.config"/>
            <then>
                <!-- define the site properties file for the new config -->
                <if>
                    <isset property="mb.site.properties.present"/>
                    <then>
                        <if>
                            <istrue value="${override.oldconfig}"/>
                            <then>
                                <getcounter file="${mb.site.properties}"
                                            property="site.id"/>

                                <if>
                                    <and>
                                        <isset property="mb.config.number"/>
                                        <not>
                                            <equals arg1="${site.id}"
                                                    arg2="${mb.config.number}"/>
                                        </not>
                                    </and>
                                    <then>
                                        <xvar name="site.id" unset="true"/>

                                        <getnextcounter
                                            file="${mb.latest.site.properties}"
                                            property="site.id"/>
                                    </then>
                                </if>
                            </then>
                            <else>
                                <!--
                                    increment the site properties file
                                    counter
                                -->
                                <getnextcounter
                                    file="${mb.latest.site.properties}"
                                    property="site.id"/>
                            </else>
                        </if>

                        <var name="f"
                        value="Site-${config.site.csn}#${site.id}.properties"/>

                        <property name="mb.new.site.props"
                            location="${mb.site.properties.dir}${FS}${f}"/>
                    </then>
                    <else>
                        <xvar name="mb.site.properties" unset="true"/>

                        <if>
                            <isset property="mb.latest.site.properties"/>
                            <then>
                                <!--
                                    increment the site properties file counter
                                -->
                                <getnextcounter
                                    file="${mb.latest.site.properties}"
                                    property="site.id"/>
                            </then>
                            <else>
                                <property name="site.id" value="1"/>
                            </else>
                        </if>

                        <var name="f"
                        value="Site-${config.site.csn}#${site.id}.properties"/>

                        <property name="mb.new.site.props"
                            location="${mb.site.properties.dir}${FS}${f}"/>

                        <propertycopy property="mb.site.properties"
                                      from="mb.new.site.props"/>
                    </else>
                </if>
            </then>
            <else>
                <if>
                    <isset property="mb.site.properties.present"/>
                    <then>
                        <getcounter file="${mb.site.properties}"
                                    property="site.id"/>
                    </then>
                </if>
            </else>
        </if>

        <!-- unset properties -->
        <xvar name="mb.latest.site.properties" unset="true"/>
    </target>


    <!-- =======================================================================
        The "-make-site-properties-dir" target creates the directory to store
        the site properties file.

        It depends on the following targets:
            + "-construct-site-properties-dir"
    -->
    <target name="-make-site-properties-dir" if="mb.site.properties.dir"
            depends="-construct-site-properties-dir">

        <mkdir dir="${mb.site.properties.dir}"/>
    </target>


    <!-- =======================================================================
        The "-construct-site-properties-dir" target constructs the path to the
        directory into which the site properties file will be stored.
    -->
    <target name="-construct-site-properties-dir">
        <property name="mb.site.properties.dir"
                  location="${user.home}${FS}.${config.product.name}"/>
    </target>


    <!-- =======================================================================
        The "-construct-cscis-list-file" target constructs the path to the file
        which stores the location of all the available CSCIs.

        It depends on the following targets:
            + "-construct-site-properties-dir"
    -->
    <target name="-construct-cscis-list-file" if="mb.site.properties.dir"
            depends="-construct-site-properties-dir">

        <property name="mb.cscis.list.file"
                  location="${mb.site.properties.dir}${FS}CsciLocations"/>
    </target>


    <!-- =======================================================================
        The "-construct-tokens-properties-file-paths" target constructs the
        paths to the tokens properties files.
    -->
    <target name="-construct-tokens-properties-file-paths">
        <!--
            define the path to the tokens properties file to use for the
            development environment.
        -->
        <var name="f"
             value="Dev-Tokens-${config.site.csn}#${site.id}.properties"/>

        <property name="mb.dev.tokens.properties"
                  location="${mb.site.properties.dir}${FS}${f}"/>

        <!--
            define the path to the tokens properties file to use for the
            installation environment.
        -->
        <var name="f"
            value="Install-Tokens-${config.site.csn}#${site.id}.properties"/>

        <property name="mb.install.tokens.properties"
                  location="${mb.site.properties.dir}${FS}${f}"/>
    </target>


    <!-- =======================================================================
        The "compile" target compiles the source files in all the target CSCs.

        It depends on the following targets:
            + "-initialize"
            + "-load-site-properties"
            + "-construct-tokens-properties-file-paths"
    -->
    <target name="compile" description="compile all the target CSCs"
            depends="-initialize, -load-site-properties,
                     -construct-tokens-properties-file-paths">

        <safeant dir="configuration"
                 antfile="ConfigureBuild.xml"
                 target="-make-all-deliveries">

            <properties>
                <property name="xml.dir" value="${mb.xml.dir}"/>
                <property name="xsd.dir" value="${mb.xsd.dir}"/>
            </properties>
        </safeant>
    </target>


    <!-- =======================================================================
        The "runtest" target runs the unit tests.

        It depends on the following targets:
            + "-initialize"
            + "-load-site-properties"
            + "-construct-tokens-properties-file-paths"
    -->
    <target name="runtest" description="run unit tests"
            depends="-initialize, -load-site-properties,
                     -construct-tokens-properties-file-paths">

        <safeant dir="configuration"
                 antfile="RunTest.xml"
                 target="-runtest">

            <properties>
                <property name="dev.tokens.file"
                          value="${mb.dev.tokens.properties}"/>
                <property name="xml.dir" value="${mb.xml.dir}"/>
                <property name="xsd.dir" value="${mb.xsd.dir}"/>
            </properties>
        </safeant>
    </target>


    <!-- =======================================================================
        The "compile-and-install" target compiles the source files and copies
        the deliveries of all the CSCIs into the installation directory.

        It depends on the following targets:
            + "compile"
    -->
    <target name="compile-and-install" depends="compile"
            description="compile and install the product">

        <safeant dir="configuration"
                 antfile="Install.xml"
                 target="-install">

            <properties>
                <property name="install.tokens.file" 
                          value="${mb.install.tokens.properties}"/>
                <property name="build.site.properties" 
                          value="${mb.site.properties}"/>
                <property name="xml.dir" value="${mb.xml.dir}"/>
                <property name="xsd.dir" value="${mb.xsd.dir}"/>
            </properties>
        </safeant>
    </target>


    <!-- =======================================================================
        The "install-binary" create an archive of the product with all 
        needed tools

        It depends on the following targets:
            + "-initialize"
            + "-load-site-properties"
            + "-construct-tokens-properties-file-paths"
    -->
    <target name="install-binary" description="install tools"
            depends="-initialize, -load-site-properties,
                     -construct-tokens-properties-file-paths">        

        <safeant dir="configuration"
                 antfile="Install.xml"
                 target="-install-binary">

            <properties>
                <property name="install.tokens.file" 
                          value="${mb.install.tokens.properties}"/>                    
                <property name="build.site.properties" 
                          value="${mb.site.properties}"/>
                <property name="xml.dir" value="${mb.xml.dir}"/>
                <property name="xsd.dir" value="${mb.xsd.dir}"/>
            </properties>
        </safeant>
    </target>


    <!-- =======================================================================
        The "install-valid" target installs the product into the installation
        directory as well as the validation files.

        It depends on the following targets:
            + "-initialize"
            + "-load-site-properties"
            + "-construct-tokens-properties-file-paths"
    -->
    <target name="install-valid" description="install validation tests"
            depends="-initialize, -load-site-properties, 
                     -construct-tokens-properties-file-paths">

        <safeant dir="configuration"
                 antfile="Install.xml"
                 target="-install-valid">

            <properties>
                <property name="install.tokens.file" 
                          value="${mb.install.tokens.properties}"/>                    
                <property name="build.site.properties" 
                          value="${mb.site.properties}"/>
                <property name="xml.dir" value="${mb.xml.dir}"/>
                <property name="xsd.dir" value="${mb.xsd.dir}"/>
            </properties>
        </safeant>
    </target>


    <!-- =======================================================================
        The "install-qualif" target installs the product into the installation
        directory as well as the qualification files.

        It depends on the following targets:
            + "-initialize"
            + "-load-site-properties"
            + "-construct-tokens-properties-file-paths"
    -->
    <target name="install-qualif" description="install qualification tests"
            depends="-initialize, -load-site-properties, 
                     -construct-tokens-properties-file-paths">

        <if>
            <not><isset property="without.binary.version"/></not>
            <then>
                <safeant dir="configuration"
                         antfile="Install.xml"
                         target="-install-binary">
                    
                    <properties>
                        <property name="install.tokens.file" 
                                  value="${mb.install.tokens.properties}"/>                    
                        <property name="build.site.properties" 
                                  value="${mb.site.properties}"/>
                        <property name="xml.dir" value="${mb.xml.dir}"/>
                        <property name="xsd.dir" value="${mb.xsd.dir}"/>
                    </properties>
                </safeant>
            </then>
        </if>

        <safeant dir="configuration"
                 antfile="Install.xml"
                 target="-install-qualif">

            <properties>
                <property name="install.tokens.file" 
                          value="${mb.install.tokens.properties}"/>                    
                <property name="build.site.properties" 
                          value="${mb.site.properties}"/>
                <property name="xml.dir" value="${mb.xml.dir}"/>
                <property name="xsd.dir" value="${mb.xsd.dir}"/>
            </properties>
        </safeant>
    </target>


    <!-- =======================================================================
        The "install-integ" target install the product in the install directory
        and the integrations files

        It depends on the following targets:
            + "-initialize"
            + "-load-site-properties"
            + "-construct-tokens-properties-file-paths"
    -->
    <target name="install-integ" description="install integrations test" 
            depends="-initialize, -load-site-properties, 
                     -construct-tokens-properties-file-paths">
        
        <safeant dir="configuration"
                 antfile="Install.xml"
                 target="-install-integ">

            <properties>
                <property name="install.tokens.file" 
                          value="${mb.install.tokens.properties}"/>                    
                <property name="build.site.properties" 
                          value="${mb.site.properties}"/>
                <property name="xml.dir" value="${mb.xml.dir}"/>
                <property name="xsd.dir" value="${mb.xsd.dir}"/>
            </properties>
        </safeant>
    </target>



    <!-- =======================================================================
        The "install" target copies the deliveries of all the CSCIs into the
        installation directory. This target does not (re)compile any CSCIs.

        It depends on the following targets:
            + "-initialize"
            + "-load-site-properties"
            + "-construct-tokens-properties-file-paths"
    -->
    <target name="install" description="install the product"
            depends="-initialize, -load-site-properties,
                     -construct-tokens-properties-file-paths">
        
        <safeant dir="configuration"
                 antfile="Install.xml"
                 target="-install">

            <properties>
                <property name="install.tokens.file"
                          value="${mb.install.tokens.properties}"/>
                <property name="build.site.properties"
                          value="${mb.site.properties}"/>
                <property name="xml.dir" value="${mb.xml.dir}"/>
                <property name="xsd.dir" value="${mb.xsd.dir}"/>
            </properties>
        </safeant>
    </target>


    <!-- =======================================================================
        The "distclean" target cleans all the CSCIs from directories or files
        created during the configuration or the build.

        It depends on the following targets:
            + "-print-init-message"
            + "-set-aliases"
            + "-set-canonical-system-name"
            + "compile-cdmw-ant-tasks"
            + "-define-global-macros"
            + "-load-global-properties"
            + "-load-release-properties"
            + "-construct-cscis-list-file"
    -->
    <target name="distclean" description="thoroughly clean all the CSCIs"
            depends="-print-init-message, -set-aliases,
                     -set-canonical-system-name, compile-cdmw-ant-tasks,
                     -define-global-macros, -load-global-properties,
                     -load-release-properties, -construct-cscis-list-file">

        <if>
            <available file="${mb.cscis.list.file}" type="file"/>
            <then>
                <property file="${mb.cscis.list.file}"/>

                <propertyselector property="mb.csci.list" delimiter=","
                                  match="config\.([^\.]*)\.location"
                                  select="\1" casesensitive="true"/>

                <property name="clean.all" value="true"/>

                <foreach list="${mb.csci.list}" target="-clean-csci"
                         param="mb.csci" inheritall="true"/>
            </then>
        </if>
    </target>


    <!-- =======================================================================
        The "-clean-csci" target removes the directories and/or the build files
        created by the build.
    -->
    <target name="-clean-csci">
        <propertycopy name="mb.csci.location" silent="true"
                      from="config.${mb.csci}.location"/>

        <if>
            <and>
                <isset property="mb.csci.location"/>
                <not><equals arg1="${mb.csci}" arg2="Build"/></not>
            </and>
            <then>
                <echo>Cleaning: ${mb.csci.location}</echo>

                <dirset id="dirs.to.delete" dir="${mb.csci.location}">
                    <include name="**/${config.delivery.dir}"/>
                    <include name="**/${config.csc.build.dir}"/>
                    <include name="**/${config.csc.generated.dir}"/>
                    <include name="**/${config.csc.runtest.dir}"/>
                </dirset>

                <if>
                    <istrue value="${clean.all}"/>
                    <then>
                        <xdelete quiet="true" verbose="true">
                            <fileset dir="${mb.csci.location}">
                                <include name="**/Build*.xml"/>
                                <include name="**/.cache*"/>
                            </fileset>
                            <dirset refid="dirs.to.delete"/>
                        </xdelete>
                    </then>
                    <else>
                        <xdelete quiet="true" verbose="true">
                            <dirset refid="dirs.to.delete"/>
                        </xdelete>
                    </else>
                </if>
            </then>
        </if>
    </target>


    <!-- =======================================================================
        The "clean" target cleans all the CSCIs from directories or files
        created during the configuration or the build at the exception of the
        build files.

        It depends on the following targets:
            + "-print-init-message"
            + "-set-aliases"
            + "-set-canonical-system-name"
            + "compile-cdmw-ant-tasks"
            + "-define-global-macros"
            + "-load-global-properties"
            + "-load-release-properties"
            + "-construct-cscis-list-file"
    -->
    <target name="clean" description="clean all the CSCIs"
            depends="-print-init-message, -set-aliases,
                     -set-canonical-system-name, compile-cdmw-ant-tasks,
                     -define-global-macros, -load-global-properties,
                     -load-release-properties, -construct-cscis-list-file">

        <if>
            <available file="${mb.cscis.list.file}" type="file"/>
            <then>
                <property file="${mb.cscis.list.file}"/>

                <propertyselector property="mb.csci.list" delimiter=","
                                  match="config\.([^\.]*)\.location"
                                  select="\1" casesensitive="true"/>

                <property name="clean.all" value="false"/>

                <foreach list="${mb.csci.list}" target="-clean-csci"
                         param="mb.csci" inheritall="true"/>
            </then>
        </if>
    </target>


    <!-- =======================================================================
        The "needed-tools" target prints the list of tools needed by the build.

        It depends on the following targets:
            + "-initialize"
    -->
    <target name="needed-tools" description="print the list of needed tools"
            depends="-initialize, -construct-site-properties-dir">

        <property name="tmpconfig.cache"
                  location="${mb.site.properties.dir}${FS}.cache"/>

        <ant dir="configuration" antfile="ConfigureBuild.xml"
             target="-needed-tools">

            <property name="xml.dir"             value="${mb.xml.dir}"/>
            <property name="xsd.dir"             value="${mb.xsd.dir}"/>
            <property name="no.site.props"       value="true"/>
            <property name="config.product.name" value="CARDAMOM"/>
            <property name="is.needed.tools"       value="true"/>
        </ant>
    </target>


    <!-- =======================================================================
        The "genpublicdoc" target generates the API documentation.

        It depends on the following targets:
            + "-initialize"
            + "-load-site-properties-as-previous"
    -->
    <target name="genpublicdoc" description="generate the API documentation"
            depends="-initialize, -load-site-properties-as-previous">

        <safeant dir="configuration"
                 antfile="GenDoc.xml"
                 target="-genpublicdoc"
        />
    </target>


    <!-- =======================================================================
        The "genfulldoc" target generates the full API documentation.

        It depends on the following targets:
            + "-initialize"
            + "-load-site-properties-as-previous"
    -->
    <target name="genfulldoc" description="generate the full API documentation"
            depends="-initialize, -load-site-properties-as-previous">

        <safeant dir="configuration"
                 antfile="GenDoc.xml"
                 target="-genfulldoc"
        />
    </target>


    <!-- =======================================================================
        The "addcsc" target creates a new CSC into an existing CSCI.

        It depends on the following targets:
            + "-initialize"
            + "-load-site-properties"
    -->
    <target name="addcsc" description="create a CSC into a CSCI"
            depends="-initialize, -load-site-properties">

        <safeant dir="configuration"
                 antfile="ConfigureBuild.xml"
                 target="-create-new-csc">

            <properties>
                <property name="xml.dir" value="${mb.xml.dir}"/>
                <property name="xsd.dir" value="${mb.xsd.dir}"/>
            </properties>
        </safeant>
    </target>


    <!-- =======================================================================
        The "configsum" target prints a short summary of the different
        configuration files.

        It depends on the following targets:
            + "-initialize"
            + "-construct-site-properties-dir"
    -->
    <target name="configsum" description="print a summary of the config files"
            depends="-initialize, -construct-site-properties-dir">

        <if>
            <available file="${mb.site.properties.dir}" type="dir"/>
            <then>
                <for param="file">
                    <path>
                        <fileset dir="${mb.site.properties.dir}"
                                 includes="Site-*.properties"/>
                    </path>

                    <sequential>
                        <basename file="@{file}" property="file.name"/>
                        <property file="@{file}" prefix="sum"/>

                        <getcounter file="@{file}" property="thecounter"/>

                        <stringmanip action="uppercase"
                                     string="${sum.config.sel.interfaces}"
                                     property="sum.sel.interfaces"/>

                        <echo>
[configuration #${thecounter}]
    date       = ${sum.config.tstamp}
    host       = ${sum.HOSTNAME} / ${sum.config.site.csn}
    packages   = ${sum.config.sel.packages}
    interfaces = ${sum.sel.interfaces}
    compilers  = ${sum.config.sel.min.compilers}
    orbs       = ${sum.config.sel.min.orbs}
                        </echo>

                        <!-- unset properties -->
                        <propertyselector property="sum.props"
                                          match="^sum\.(.*)" select="\1"/>

                        <for list="${sum.props}" param="p">
                            <sequential>
                                <xvar name="sum.@{p}" unset="true"/>
                            </sequential>
                        </for>

                        <xvar name="sum.props"  unset="true"/>
                        <xvar name="file.name"  unset="true"/>
                        <xvar name="thecounter" unset="true"/>
                    </sequential>
                </for>
            </then>
        </if>
    </target>


    <!-- =======================================================================
        The "inspect-valid" target installs the files to inspect for the
        validation process.

        It depends on the following targets:
            + "-initialize"
            + "-load-site-properties"
    -->
    <target name="inspect-valid"
            description="install files to inspect for the validation process"
            depends="-initialize, -load-site-properties">

        <safeant dir="configuration"
                 antfile="Inspect.xml"
                 target="-inspect-valid">

            <properties>
                <property name="site.properties"
                          value="${mb.site.properties}"/>
            </properties>
        </safeant>
    </target>


    <!-- =======================================================================
        The "inspect-qualif" target installs the files to inspect for the
        qualification process.

        It depends on the following targets:
            + "-initialize"
            + "-load-site-properties"
    -->
    <target name="inspect-qualif"
            description="install files to inspect for the qualification process"
            depends="-initialize, -load-site-properties">

        <safeant dir="configuration"
                 antfile="Inspect.xml"
                 target="-inspect-qualif">

            <properties>
                <property name="site.properties"
                          value="${mb.site.properties}"/>
            </properties>
        </safeant>
    </target>


    <!-- =======================================================================
        The "staticdeps" target creates a file which describes the compilation
        sequence of all the CSCs of each CARDAMOM package.

        It depends on the following targets:
            + "-initialize"
    -->
    <target name="staticdeps" description="compute the static dependencies"
            depends="-initialize">

        <property name="mb.config.data" location="configuration${FS}data"/>

        <property name="mb.pkg.desc"
                  location="${mb.config.data}${FS}PkgDesc.xml"/>

        <property name="mb.csc.deps"
                  location="${mb.config.data}${FS}DepsInfo.properties"/>

        <pathconvert pathSep=" " property="mb.all.cscproperties.files">
            <path>
                <fileset dir="..">
                    <include name="**/CSCProperties.xml"/>
                    <exclude name="**/Build/**"/>
                </fileset>
            </path>
        </pathconvert>

        <findstaticdeps
            pkgdesc="${mb.pkg.desc}"
            paths="${mb.all.cscproperties.files}"
            file="${mb.csc.deps}"
        />
    </target>


</project>

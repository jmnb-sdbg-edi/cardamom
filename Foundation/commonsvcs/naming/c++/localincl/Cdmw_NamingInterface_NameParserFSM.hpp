/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI. It is derivative work based on PERCO Copyright (C) THALES
 * 2000-2003. All rights reserved.
 * 
 * Copyright (C) THALES 2004-2005. All rights reserved
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Library General Public License as published
 * by the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General Public
 * License along with CARDAMOM; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */


//File automatically generated by smc compiler on Tue Nov 14 16:19:12 2000
//DO NOT EDIT!
#ifndef _HPP_Cdmw_NamingInterface_NameParserFSM
#define _HPP_Cdmw_NamingInterface_NameParserFSM
#include "naming/Cdmw_NamingInterface_NameParserContext.hpp"

class Cdmw_NamingInterface_NameParserFSM;

class Cdmw_NamingInterface_NameParserFSMState
{

    public:

        virtual const char* StateName() const = 0;
        virtual void other(Cdmw_NamingInterface_NameParserFSM& s);
        virtual void eos(Cdmw_NamingInterface_NameParserFSM& s);
        virtual void back_slash(Cdmw_NamingInterface_NameParserFSM& s);
        virtual void slash(Cdmw_NamingInterface_NameParserFSM& s);
        virtual void dot(Cdmw_NamingInterface_NameParserFSM& s);
};

class Cdmw_NamingInterface_NameParserFSMEscExtensionState : public Cdmw_NamingInterface_NameParserFSMState
{

    public:
        virtual const char* StateName() const
        {
            return ("EscExtension");
        };

        virtual void eos(Cdmw_NamingInterface_NameParserFSM&);
        virtual void back_slash(Cdmw_NamingInterface_NameParserFSM&);
        virtual void slash(Cdmw_NamingInterface_NameParserFSM&);
        virtual void dot(Cdmw_NamingInterface_NameParserFSM&);
};

class Cdmw_NamingInterface_NameParserFSMEscBasenameState : public Cdmw_NamingInterface_NameParserFSMState
{

    public:
        virtual const char* StateName() const
        {
            return ("EscBasename");
        };

        virtual void eos(Cdmw_NamingInterface_NameParserFSM&);
        virtual void back_slash(Cdmw_NamingInterface_NameParserFSM&);
        virtual void slash(Cdmw_NamingInterface_NameParserFSM&);
        virtual void dot(Cdmw_NamingInterface_NameParserFSM&);
};

class Cdmw_NamingInterface_NameParserFSMExtensionState : public Cdmw_NamingInterface_NameParserFSMState
{

    public:
        virtual const char* StateName() const
        {
            return ("Extension");
        };

        virtual void other(Cdmw_NamingInterface_NameParserFSM&);
        virtual void eos(Cdmw_NamingInterface_NameParserFSM&);
        virtual void back_slash(Cdmw_NamingInterface_NameParserFSM&);
        virtual void slash(Cdmw_NamingInterface_NameParserFSM&);
};

class Cdmw_NamingInterface_NameParserFSMBasenameState : public Cdmw_NamingInterface_NameParserFSMState
{

    public:
        virtual const char* StateName() const
        {
            return ("Basename");
        };

        virtual void other(Cdmw_NamingInterface_NameParserFSM&);
        virtual void eos(Cdmw_NamingInterface_NameParserFSM&);
        virtual void back_slash(Cdmw_NamingInterface_NameParserFSM&);
        virtual void slash(Cdmw_NamingInterface_NameParserFSM&);
        virtual void dot(Cdmw_NamingInterface_NameParserFSM&);
};

class Cdmw_NamingInterface_NameParserFSM : public Cdmw_NamingInterface_NameParserContext
{

    public:
        static Cdmw_NamingInterface_NameParserFSMEscExtensionState EscExtensionState;
        static Cdmw_NamingInterface_NameParserFSMEscBasenameState EscBasenameState;
        static Cdmw_NamingInterface_NameParserFSMExtensionState ExtensionState;
        static Cdmw_NamingInterface_NameParserFSMBasenameState BasenameState;
        Cdmw_NamingInterface_NameParserFSM(); // default constructor
        void other()
        {
            itsState->other(*this);
        }

        void eos()
        {
            itsState->eos(*this);
        }

        void back_slash()
        {
            itsState->back_slash(*this);
        }

        void slash()
        {
            itsState->slash(*this);
        }

        void dot()
        {
            itsState->dot(*this);
        }

        void SetState(Cdmw_NamingInterface_NameParserFSMState& theState)
        {
            itsState = &theState;
        }

        Cdmw_NamingInterface_NameParserFSMState& GetState() const
        {
            return *itsState;
        };

    private:
        Cdmw_NamingInterface_NameParserFSMState* itsState;
};

#endif


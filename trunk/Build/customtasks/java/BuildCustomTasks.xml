<?xml version="1.0" encoding="utf-8"?>
<!-- ===================================================================== -->
<!--
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI. It is derivative work based on PERCO Copyright (C) THALES
 * 2000-2003. All rights reserved.
 * 
 * Copyright (C) THALES 2004-2005. All rights reserved
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Library General Public License as published
 * by the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General Public
 * License along with CARDAMOM; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-->
<!-- ===================================================================== -->


<!DOCTYPE project [
    <!ENTITY common_config_targets
             SYSTEM "file:../../data/CommonConfigTargets.xml">
]>


<project name="BuildCdmwTasks" default="make-deliveries" basedir=".">


    <description>
        This build file compiles the CDMW ANT tasks and stores the new tasks
        into a JAVA archive file.
    </description>


    <!-- Include XML fragments -->
    &common_config_targets;


    <!-- =======================================================================
        The "make-deliveries" target compiles the CDMW ANT tasks and stores
        the new tasks into a JAVA archive file.

        It depends on the following targets:
            + "-initialize"
            + "-compile-cdmw-ant-tasks"
            + "-export-delivery-file"
    -->
    <target name="make-deliveries"
            description="compile and package the CDMW ANT tasks"
            depends="-initialize, -compile-cdmw-ant-tasks,
                     -export-delivery-file">
    </target>


    <!-- =======================================================================
        The "-initialize" target creates the build environment.

        It depends on the following targets:
            + "-define-ant-contrib-tasks"
            + "-set-local-aliases"
            + "-make-directories"
    -->
    <target name="-initialize"
            depends="-define-ant-contrib-tasks, -set-local-aliases,
                     -make-directories">
    </target>


    <!-- =======================================================================
        The "-define-ant-contrib-tasks" target checks if the Ant Contrib tasks
        are already available. If not, the target will define them.
    -->
    <target name="-define-ant-contrib-tasks" unless="global.aliases.loaded">
        <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
    </target>


    <!-- =======================================================================
        The "-set-local-aliases" target defines the directory names and some
        other aliases.
    -->
    <target name="-set-local-aliases">
        <!--
            those properties may be overridden by the master build, however
            they are defined here to allow a standalone run.
        -->
        <property name="delivery.dir"     value="delivery"/>
        <property name="delivery.lib.dir" value="lib"/>
        <property name="build.dir"        value="prod"/>
        <property name="csc.src.dir"      value="src"/>
        <property name="delivery.file"    value="libcdmwtasks.jar"/>
        <property name="FS"               value="${file.separator}"/>
    </target>


    <!-- =======================================================================
        The "-make-directories" target creates the build and delivery
        directories.
    -->
    <target name="-make-directories">
        <!-- create the build directory -->
        <property name="csc.build.dir"
                  location="${build.dir}${FS}${delivery.file}"/>

        <mkdir dir="${csc.build.dir}"/>

        <!-- create the CSC delivery dir -->
        <property name="csc.delivery.lib.dir"
                  location="${delivery.dir}${FS}${delivery.lib.dir}"/>

        <mkdir dir="${csc.delivery.lib.dir}"/>

        <!-- create the CSCI delivery dir -->
        <if>
            <isset property="csci.delivery.lib.dir"/>
            <then>
                <mkdir dir="${csci.delivery.lib.dir}"/>
            </then>
        </if>
    </target>


    <!-- =======================================================================
        The "-compile-cdmw-ant-tasks" target compiles the CDMW ANT tasks
        source files and creates the JAR archive file.
    -->
    <target name="-compile-cdmw-ant-tasks">
        <property name="csc.delivery.file"
                  location="${csc.delivery.lib.dir}${FS}${delivery.file}"/>

        <if>
            <available file="${csc.src.dir}" type="dir"/>
            <then>
                <!--
                    NOTE: we will not use symbolic links here even if it is
                    possible to do so because the global properties are not
                    loaded yet and therefore we have no way to read the user
                    settings.
                -->
                <javac srcdir="${csc.src.dir}" destdir="${csc.build.dir}"
                       listfiles="no"/>

                <!-- define task names -->
                <property name="ct.tasks.cp"
                          value="com.thalesgroup.tools.ant.taskdefs"/>

                <propertyfile
                    file="${csc.build.dir}${FS}cdmwtasks.properties"
                    comment="CARDAMOM ANT Tasks">

                    <entry key="xsdvalidate"
                           value="${ct.tasks.cp}.XSDValidateTask"/>
                    <entry key="xdelete"
                           value="${ct.tasks.cp}.Delete"/>
                    <entry key="dependencytopath"
                           value="${ct.tasks.cp}.DependencyToPath"/>
                    <entry key="xexec"
                           value="${ct.tasks.cp}.ExecTask"/>
                    <entry key="findcscs"
                           value="${ct.tasks.cp}.FindCscs"/>
                    <entry key="findfile"
                           value="${ct.tasks.cp}.FindFile"/>
                    <entry key="xinput"
                           value="${ct.tasks.cp}.Input"/>
                    <entry key="listtofileset"
                           value="${ct.tasks.cp}.ListToFileSet"/>
                    <entry key="listtopath"
                           value="${ct.tasks.cp}.ListToPath"/>
                    <entry key="mkidlinclude"
                           value="${ct.tasks.cp}.MakeIdlInclude"/>
                    <entry key="pathtolist"
                           value="${ct.tasks.cp}.PathToList"/>
                    <entry key="stringmanip"
                           value="${ct.tasks.cp}.StringManipulation"/>
                    <entry key="toollist"
                           value="${ct.tasks.cp}.ToolList"/>
                    <entry key="selectcscis"
                           value="${ct.tasks.cp}.SelectCscis"/>
                    <entry key="selectpackages"
                           value="${ct.tasks.cp}.SelectPackages"/>
                    <entry key="loadcompilerproperties"
                           value="${ct.tasks.cp}.LoadCompilerProperties"/>
                    <entry key="loadorbproperties"
                           value="${ct.tasks.cp}.LoadOrbProperties"/>
                    <entry key="loadreleaseproperties"
                           value="${ct.tasks.cp}.LoadReleaseProperties"/>
                    <entry key="loadcscproperties"
                           value="${ct.tasks.cp}.LoadCscProperties"/>
                    <entry key="selecttoken"
                           value="${ct.tasks.cp}.SelectToken"/>
                    <entry key="stripfileext"
                           value="${ct.tasks.cp}.StripFileExt"/>
                    <entry key="printtoolsinfo"
                           value="${ct.tasks.cp}.PrintToolsInfo"/>
                    <entry key="loadcodegenconf"
                           value="${ct.tasks.cp}.LoadCodeGenConf"/>
                    <entry key="updatedependencies"
                           value="${ct.tasks.cp}.UpdateDependencies"/>
                    <entry key="xloadproperties"
                           value="${ct.tasks.cp}.LoadProperties"/>
                    <entry key="isbinary"
                           value="${ct.tasks.cp}.IsBinary"/>
                    <entry key="issuperior"
                           value="${ct.tasks.cp}.NumberComparaison"/>
                    <entry key="xbasename"
                           value="${ct.tasks.cp}.Basename"/>
                    <entry key="xdirname"
                           value="${ct.tasks.cp}.Dirname"/>
                    <entry key="xvar"
                           value="${ct.tasks.cp}.Variable"/>
                    <entry key="findconfigfile"
                           value="${ct.tasks.cp}.FindConfigFile"/>
                    <entry key="callgc"
                           value="${ct.tasks.cp}.CallGC"/>
                    <entry key="findstaticdeps"
                           value="${ct.tasks.cp}.FindStaticDeps"/>
                    <entry key="createbuildfile"
                           value="${ct.tasks.cp}.CreateBuildFile"/>
                    <entry key="isemptyfile"
                           value="${ct.tasks.cp}.IsEmptyFile"/>
                    <entry key="data4inspection"
                           value="${ct.tasks.cp}.Data4Inspection"/>
                </propertyfile>

                <!-- create the archive file into the CSC delivery dir -->
                <jar destfile="${csc.delivery.file}" basedir="${csc.build.dir}"
                     index="true"/>
            </then>
        </if>
    </target>


    <!-- =======================================================================
        The "-export-delivery-file" target exports the delivery file into the
        CSCI delivery directory.
    -->
    <target name="-export-delivery-file">
        <!--
            NOTE: we will not use symbolic links here, see above for a detailed
            explanation.
        -->

        <!-- set the target file name -->
        <property name="csci.delivery.file"
                  location="${csci.delivery.lib.dir}${FS}${delivery.file}"/>

        <!-- export to the CSCI delivery dir -->
        <if>
            <and>
                <isset property="csci.delivery.lib.dir"/>
                <or>
                    <not><available file="${csci.delivery.file}"/></not>
                    <uptodate srcfile="${csci.delivery.file}"
                              targetfile="${csc.delivery.file}"/>
                </or>
            </and>
            <then>
                <copy file="${csc.delivery.file}"
                      todir="${csci.delivery.lib.dir}"/>
            </then>
        </if>
    </target>
    

</project>


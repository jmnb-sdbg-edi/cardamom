<?xml version="1.0" encoding="utf-8"?>
<!-- ===================================================================== -->
<!--
 * This file is part of CARDAMOM (R) which is jointly developed by THALES 
 * and SELEX-SI. 
 * 
 * It is derivative work based on PERCO Copyright (C) THALES 2000-2003. 
 * All rights reserved.
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it under 
 * the terms of the GNU Library General Public License as published by the
 * Free Software Foundation; either version 2 of the License, or (at your 
 * option) any later version. 
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public 
 * License for more details. 
 * 
 * You should have received a copy of the GNU Library General 
 * Public License along with CARDAMOM; see the file COPYING. If not, write to 
 * the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-->
<!-- ===================================================================== -->


<!DOCTYPE project [
    <!ENTITY common_targets SYSTEM "file:../../data/CommonConfigTargets.xml">
]>


<project name="ConfigureZip" default="-check-Zip" basedir=".">


    <description>
        This build file locates and checks Zip process.
    </description>


    <!-- Include XML fragments -->
    &common_targets;


    <!-- =======================================================================
        The "-check-Zip" target checks if Zip is suitable
        for the build.

        It depends on the following targets:
            + "-initialize"
            + "-check-Zip-linux"
            + "-check-Zip-sunos"
            + "-check-Zip-windows"
            + "-check-Zip-aix"
            + "-set-Zip-properties"
    -->
    <target name="-check-Zip"
            depends="-initialize, -check-Zip-linux,
                     -check-Zip-sunos, -check-Zip-windows,
                     -check-Zip-aix, -set-Zip-properties">

        <!-- save Zip properties -->
        <echoproperties destfile="${cb.tools.conf}" prefix="config."/>
    </target>


    <!-- =======================================================================
        The "-check-Zip-linux" target checks if Zip is suitable for the build 
        on a Linux platform.
    -->
    <target name="-check-Zip-linux" if="is.linux">
        <antcallback target="-test1-linux" return="zip.bin.dir"/>
    </target>


    <!-- =======================================================================
        The "-check-Zip-sunos" target checks if Zip is suitable for the build 
        on a SUN Solaris platform.
    -->
    <target name="-check-Zip-sunos" if="is.sunos">
        <antcallback target="-test1-sunos" return="zip.bin.dir"/>
    </target>


    <!-- =======================================================================
        The "-check-Zip-aix" target checks if Zip is suitable for the build on 
        an IBM AIX platform.
    -->
    <target name="-check-Zip-aix" if="is.aix">
    </target>


    <!-- =======================================================================
        The "-check-Zip-windows" target checks if Zip is suitable for the build
         on a Windows platform.
    -->
    <target name="-check-Zip-windows" if="is.windows">
        <!-- TODO -->
    </target>


    <!-- ======================================================================
        The "-locate-Zip" target determines the installation directory of
        Zip.

        It depends on the following targets:
            + "-initialize"
    -->
    <target name="-locate-Zip" depends="-initialize">
        <!-- determine the Zip installation directory -->
        <var name="my.var"
             value="Enter the ${tool.fullname} installation directory"/>

        <propertycopy property="zip.default.install.dir" silent="true"
                      from="${mb.prev}.config.${tool.name}.install.dir"/>

        <if>
            <isset property="zip.default.install.dir"/>
            <then>
                <if>
                    <isfalse value="${passive.mode}"/>
                    <then>
                        <xinput message="${my.var}" dirPathOnly="true"
                                addproperty="config.${tool.name}.install.dir"
                                default="${zip.default.install.dir}"/>
                    </then>
                    <else>
                        <propertycopy property="config.${tool.name}.install.dir"
                                      from="zip.default.install.dir"/>
                    </else>
                </if>
            </then>
            <else>
                <xinput message="${my.var}" dirPathOnly="true"
                        addproperty="config.${tool.name}.install.dir"/>
            </else>
        </if>

        <propertycopy property="zip.install.dir"
                      from="config.${tool.name}.install.dir"/>

        <!-- save some properties temporarily -->
        <propertyfile file="${tmpconfig.cache}">
            <entry key="config.${tool.name}.install.dir"
                   value="${zip.install.dir}"/>
        </propertyfile>

        <!-- determine the bin directory -->
        <propertycopy property="zip.default.bin.dir" silent="true"
                      from="${mb.prev}.config.${tool.name}.bin.dir"/>

        <if>
            <not>
                <isset property="zip.default.bin.dir"/>
            </not>
            <then>
                <!-- try to guess the bin directory -->
                <findfile file="zip" dir="${zip.install.dir}"
                          findFirst="true" recursive="true"
                          property="zip.default.bin.file"/>            

                <dirname property="zip.default.bin.dir"
                         file="${zip.default.bin.file}"/>
            </then>
        </if>

        <if>
            <isfalse value="${passive.mode}"/>
            <then>
                <xinput message="Enter the ${tool.fullname} bin directory"
                        addproperty="config.${tool.name}.bin.dir"
                        default="${zip.default.bin.dir}" dirPathOnly="true"/>
            </then>
            <else>
                <propertycopy property="config.${tool.name}.bin.dir"
                              from="zip.default.bin.dir"/>
            </else>
        </if>

        <propertycopy property="zip.bin.dir"
                      from="config.${tool.name}.bin.dir"/>

        <!-- save some properties temporarily -->
        <propertyfile file="${tmpconfig.cache}">
            <entry key="config.${tool.name}.bin.dir"
                   value="${zip.bin.dir}"/>
        </propertyfile>

        <!-- save the properties -->
        <echoproperties destfile="${cb.tools.conf}" prefix="config."/>
    </target>


    <!-- ======================================================================
        The "-initialize" target defines some properties for the build.

        It depends on the following targets:
            + "-check-global-aliases"
    -->
    <target name="-initialize" depends="-check-global-aliases">
        <!-- the required version for Xerces C++ -->
        <propertycopy property="zip.required.version"
                      from="require.${my.os.name}.${tool.name}.version"/>


        <!--
            load properties from the temporary file so that next time the
            "echoproperties" task overwrites this file, the properties are not
            lost.
        -->
        <property file="${cb.tools.conf}"/>

        <property name="tool.fullname" value="Zip"/>
    </target>


    <!-- ======================================================================
        The "-test1-linux" target checks whether the Zip binary files can be
        found.
    -->
    <target name="-test1-linux">
        <echo message="Checking the ${tool.fullname} bin directory"/>

        <!-- make g++ print its version -->
        <propertycopy property="zip.bin.dir" 
                      from="config.${tool.name}.bin.dir"/>

        <exec executable="${zip.bin.dir}${FS}zip"
              outputproperty="zip.test.cmdline.output"
              resultproperty="zip.test.return.code"
              vmlauncher="false">

            <arg value="-h"/>
        </exec>

        <if>
            <not>
                <equals arg1="${zip.test.return.code}" arg2="0"/>
            </not>
            <then>
                <!-- should never happen -->
                <fail>could not obtain ${tool.fullname} version</fail>
            </then>
        </if>

        <!--
            the test is successful if the return code equals 0 and the versions
            are equal (unless version checking is disabled)
        -->
        <selecttoken string="${zip.test.cmdline.output}" tokenNumber="1"
                     delimiter="Zip " property="zip.current.ver"/>
        <selecttoken string="${zip.current.ver}" tokenNumber="0"
                     delimiter=" " property="zip.current.ver" override="true"/>

        <var name="s" value="warning: your version is ${zip.current.ver},"/>
        <var name="s" value="${s} expected version is ${zip.required.version}"/>

        <var name="s2" value="The required version for ${tool.fullname}"/>
        <var name="s2" value="${s2} is ${zip.required.version}, your"/>
        <var name="s2" value="${s2} version is ${zip.current.ver}."/>

        <if>
            <istrue value="${require.tool.version.checking}"/>
            <then>
                <if>
                    <not>
                        <equals arg1="${zip.current.ver}"
                                arg2="${zip.required.version}" trim="true"/>
                    </not>
                    <then>
                        <if>
                            <equals arg1="${require.tool.check.mode}"
                                    arg2="loose" trim="true"/>
                            <then>
                                <!-- issue a warning message -->
                                <echo>${s}</echo>
                            </then>
                            <else>
                                <!-- stop -->
                                <fail>${s2}</fail>
                            </else>
                        </if>
                    </then>
                </if>
            </then>
        </if>
    </target>


    <!-- =======================================================================
        The "-test1-sunos" target checks whether the Zip binary files can be
        found.
    -->
    <target name="-test1-sunos" depends="-test1-linux"/>


    <!-- =======================================================================
        The "-test1-aix" target checks whether the Zip binary files can be
        found.
    -->
    <target name="-test1-aix" depends="-test1-linux"/>


    <!-- =======================================================================
        The "-set-Zip-properties" target defines properties that will be
        saved into the site configuration file.
    -->
    <target name="-set-Zip-properties">
        <!-- bin dir -->
        <property name="config.${tool.name}.bin.dir" value="${zip.bin.dir}"/>
    </target>


</project>


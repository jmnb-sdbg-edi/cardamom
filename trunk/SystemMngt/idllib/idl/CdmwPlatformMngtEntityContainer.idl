/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES 
 * and SELEX-SI. 
 * 
 * It is derivative work based on PERCO Copyright (C) THALES 2000-2003. 
 * All rights reserved.
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it under 
 * the terms of the GNU Library General Public License as published by the
 * Free Software Foundation; either version 2 of the License, or (at your 
 * option) any later version. 
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public 
 * License for more details. 
 * 
 * You should have received a copy of the GNU Library General 
 * Public License along with CARDAMOM; see the file COPYING. If not, write to 
 * the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */


#ifndef CDMW_PLATFORM_MNGT_ENTITY_CONTAINER_IDL_
#define CDMW_PLATFORM_MNGT_ENTITY_CONTAINER_IDL_


#include <CdmwPlatformMngtEntity.idl>

#pragma prefix "thalesgroup.com"

module CdmwPlatformMngtEntity
{

    /**
    * The iterator for EntityNames.
    */
    interface EntityNamesIterator
    {
        void reset();

        boolean next_one(out EntityName entity_name);

        boolean next_n(in unsigned long how_many,
           out EntityNames entity_names);

        void destroy();
    };


    /**
    * The iterator for Entities.
    */
    interface EntitiesIterator
    {
        void reset();

        boolean next_one(out Entity an_entity);

        boolean next_n(in unsigned long how_many,
           out Entities n_entities);

        void destroy();
    };


    /**
    * The container of entities.
    * Similar as PropertyContainer.
    */
    interface EntityContainer
    {

        unsigned long get_number_of_entities();

        void get_all_entity_names(in unsigned long how_many,
            out EntityNames entity_names,
            out EntityNamesIterator rest);

        EntityStatus get_entity_status(in EntityName entity_name,
            out string entity_info)
            raises(EntityNotFound);

        boolean get_entities(in EntityNames entity_names,
            out Entities nentities);

        void get_all_entities(in unsigned long how_many,
            out Entities nentities,
            out EntitiesIterator rest);

    }; // End interface EntityContainer


    /**
     * The writable EntityContainer.
     */
    interface RWEntityContainer : EntityContainer
    {

        /**
        * Adds an entity.
        *
        * @param entity_name the name identifying the entity to add.
        *
        * @exception EntityAlreadyExists if entity name already exists.
        */
        void add_entity(in EntityName entity_name)
            raises(EntityAlreadyExists);

        /**
        * Removes an entity.
        *
        * @param entity_name the name identifying the entity to remove.
        * @exception EntityNotFound if entity name doesn't denote
        * an existing entity.
        */
        void remove_entity(in EntityName entity_name)
            raises(EntityNotFound);

    }; // End interface RWEntityContainer


}; // End Module CdmwPlatformMngtEntity

#endif // CDMW_PLATFORM_MNGT_ENTITY_CONTAINER_IDL_


/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI. It is derivative work based on PERCO Copyright (C) THALES
 * 2000-2003. All rights reserved.
 * 
 * Copyright (C) THALES 2004-2005. All rights reserved
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Library General Public License as published
 * by the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General Public
 * License along with CARDAMOM; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */


#ifndef CDMW_PLATFORM_MNGT_DAEMON_IDL_
#define CDMW_PLATFORM_MNGT_DAEMON_IDL_


#include <CdmwPlatformMngtCommonBase.idl>
#include <CdmwPlatformMngtApplicationBase.idl>
#include <CdmwPlatformMngtMonitoring.idl>

#pragma prefix "thalesgroup.com"

module CdmwPlatformMngt
{
    
    interface Application;
    interface ApplicationAgent;
    interface ApplicationControl;
       


    /**
    * The Daemon interface provides access to any host in the system
    * from anywhere. A Daemon can be contacted using the corbaloc scheme.
    */
    interface Daemon : PullMonitorable
    {
        /**
        * Resolves the specified corbaloc.
        * 
        * @param corbaloc the corbaloc to resolve
        * @return the resolved corbaloc.
        * @exception InvalidCorbaloc if corbaloc doesn't denote a valid corbaloc.
        */
        Object resolve_corbaloc (in string corbaloc) 
                raises (InvalidCorbaloc);


        /**
        * Returns the specified remote daemon.
        * 
        * @param host_name the host of the remote daemon.
        *
        * @exception HostNotFound if the host cannot be found.
        * @exception HostNotReachable if the host doesn't respond.
        */
        Daemon get_remote_daemon (in ElementName host_name)
            raises (HostNotFound, HostNotReachable);
            
        /**
        * Creates an unmanaged process running on the host of this daemon.
        *
        * @param process_name the name identifying the process.
        * @param process_info the information needed for creating the process.
        *
        * @exception ProcessAlreadyExists if process_name is already used
        * for an existing process.
        * @exception InvalidInfo if process_info contains invalid information.
        */
        void create_process (in string process_name,
            in ProcessInfo process_info) 
            raises (ProcessAlreadyExists, InvalidInfo);
            
        /**
        * Kills a process created by this daemon.
        *
        * @param process_name the name identifying the process.
        *
        * @exception ProcessNotFound if process_name doesn't denote an
        * existing process.
        */
        void kill_process (in string process_name) 
                raises (ProcessNotFound);
                
                

        /**
        * Creates the platform application on the host for the specified application.
        *
        * @param application_info the information needed for creating the
        * platform application.
        * @param creation_timeout the timeout allowed for the creation.
        * @param application_control the control of the created application.
        *
        * @exception CreationError if the platform application returned a fatal error
        * and aborts its creation.
        * @exception ApplicationAlreadyExists if the platform application
        * already exists.
        * @exception InvalidInfo if application_info contains invalid information.
        * @exception CreationTimeout if the application has not acknowledged its
        * creation during the allowed timeout.
        */
        Application create_application(in ApplicationInfo application_info,
            in Timeout creation_timeout,
            out ApplicationControl application_control) 
            raises (CreationError, ApplicationAlreadyExists,
                InvalidInfo, CreationTimeout);

        /**
        * Kills the process of the specified application.
        *
        * @param application_name the name of the application.
        * @param creation_timeout the timeout allowed for the creation.
        *
        * @exception ApplicationNotFound if the application is not found.
        */
        void kill_application(in ElementName application_name)
            raises (ApplicationNotFound);

        /**
        * Creates the application agent on the host for the specified application.
        *
        * @param agent_data the information needed for creating the application
        * agent.
        *
        * @exception CreationError if the application agent returned a fatal error
        * and aborts its creation.
        * @exception ApplicationAgentAlreadyExists if the application agent
        * already exists.
        * @exception InvalidInfo if agent_info contains invalid information.
        */
        ApplicationAgent create_application_agent (
            in ApplicationAgentInfo agent_info) 
            raises (CreationError, ApplicationAgentAlreadyExists,
                InvalidInfo);

        /**
        * Returns the agent of the specified application if any.
        *
        * @param application_name the name of the application.
        * @return the application agent or a NIL reference if
        * there is no agent for the specified application.
        */
        ApplicationAgent search_application_agent(in ElementName application_name);


        /**
        * Kills the agent of the specified application.
        *
        * @param application_name the name of the application.
        *
        * @exception ApplicationAgentNotFound if there is no agent for the
        * specified application.
        */
        void kill_application_agent(in ElementName application_name)
            raises (ApplicationAgentNotFound);
            
        /**
        * Register a local service.
        *
        * @param service_name the name of the local service to add.
        * @param service_ref the reference of the object implementing the local service
        *
        * @return the previously registered service, if any
        *
        * @exception CORBA::BAD_PARAM if the service name is empty or service reference
        * is nil
        *
        */
        Object register_local_service (in string service_name, in Object service_ref);

        /**
        * Unregister a local service.
        *
        * @param service_name the name of the local service to unregister.
        *
        * @return the previously registered service, if any (return nil if service not found)
        *
        * @exception CORBA::BAD_PARAM if the service name is empty
        */
        Object unregister_local_service (in string service_name);
            
        /**
        * Resolve a local service.
        *
        * @param service_name the name of the local service to resolve.
        *
        * @return the registered service, if any (return nil if service not found)
        *
        * @exception CORBA::BAD_PARAM if the service name is empty
        */
        Object resolve_local_service (in string service_name);
            
        
        /**
        * Discover a global service.
        *
        * @param service_name the name of the global service to discover.
        *
        * @return the global service, if any (return nil if service not discovered)
        *
        * @exception CORBA::BAD_PARAM if the service name is empty
        */
        Object discover_global_service (in string service_name);


        /**
        * Shutdowns the host.
        */
        void shutdown ();


        /**
        * Cold Reboots the host.
        */
        void cold_reboot ();


        /**
        * Hot Reboots the host.
        */
        void hot_reboot ();
        
        
    }; // End interface Daemon


    /**
    * The callback used by an application to notify its creation
    * or a fatal error during its creation to the daemon.
    */
    interface ApplicationCallback
    {
        /**
        * Notifies application process creation is starting to the daemon.
        *
        * @param the_application the application notifying its creation.
        * @param the_application_control the control of the application.
        * @return the starting data from the daemon containing information
        * needed by the application.
        */
        ApplicationStartingData get_starting_info (in Application the_application,
            in ApplicationControl the_application_control);
            
        /**
        * Notifies application process creation is done to the daemon.
        *
        */
        void set_creation_done ();
        
        /**
        * Notifies a fatal error during the creation.
        *
        * @param error_info the information about the error.
        */
        void notify_error (in string error_info);

    }; // End interface ApplicationCallback


    

}; // End Module CdmwPlatformMngt

#endif // CDMW_PLATFORM_MNGT_DAEMON_IDL_


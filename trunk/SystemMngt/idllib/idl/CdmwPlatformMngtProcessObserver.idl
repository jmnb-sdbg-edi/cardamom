/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI. It is derivative work based on PERCO Copyright (C) THALES
 * 2000-2003. All rights reserved.
 * 
 * Copyright (C) THALES 2004-2005. All rights reserved
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Library General Public License as published
 * by the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General Public
 * License along with CARDAMOM; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */


#ifndef CDMW_PLATFORM_MNGT_PROCESS_OBSERVER_IDL_
#define CDMW_PLATFORM_MNGT_PROCESS_OBSERVER_IDL_


#include <CdmwPlatformMngtCommon.idl>
#include <CdmwPlatformMngtManagedElement.idl>

#pragma prefix "thalesgroup.com"

module CdmwPlatformMngt
{
    interface ProcessDelegateWrapper;
    
    /**
    * The interface used by an application agent to notify :
    * - messages from an application process
    * - status changes from an application process
    */
    interface ProcessObserver
    {

        /**
        * Notifies a message.
        *
        * @param application_name the name of the application.
        * @param process_name the name of the process.
        * @param host_name the name of the host.
        * @param header the header of the message.
        * @param issuer the issuer of the message.
        * @param message the message to notify.
        *
        * @exception ProcessNotFound if process_name doesn't denote
        * an existing process.
        */
        void notify_message(
            in ElementName application_name,
            in ElementName process_name,
            in ElementName host_name,
            in CdmwPlatformMngtBase::EventHeader header,
            in CdmwPlatformMngtBase::EventIssuer issuer,
            in string message)
            raises(ProcessNotFound);

        /**
        * Notifies a fatal error.
        *
        * @param application_name the name of the application.
        * @param process_name the name of the process.
        * @param host_name the name of the host.
        * @param time_stamp the time stamp of the error.
        * @param issuer the issuer of the error.
        * @param error_info the information about the error.
        *
        * @exception ProcessNotFound if process_name doesn't denote
        * an existing process.
        */
        void notify_error(
            in ElementName application_name,
            in ElementName process_name,
            in ElementName host_name,
            in CdmwPlatformMngtBase::TimeStamp time_stamp,
            in CdmwPlatformMngtBase::EventIssuer issuer,
            in string error_info)
            raises(ProcessNotFound);
        
        
        /**
        * Notifies the starting of the process.
        *
        * @param application_name the name of the application.
        * @param process_name the name of the process.
        * @param host_name the name of the host.
        * @param pid the pid of the started process
        * @param time_stamp the time stamp of the starting.
        * @param restart_attempt the current nbr of restart attempt
        *
        * @exception ProcessNotFound if process_name doesn't denote
        * an existing process.
        */
        void notify_starting(
            in ElementName application_name,
            in ElementName process_name,
            in ElementName host_name,
            in ProcessPID pid,
            in CdmwPlatformMngtBase::TimeStamp time_stamp,
            in long restart_attempt)
            raises(ProcessNotFound);
            
            
        /**
        * Notifies the ending of the process.
        *
        * @param application_name the name of the application.
        * @param process_name the name of the process.
        * @param host_name the name of the host.
        * @param time_stamp the time stamp of the ending.
        * @param exit_status the exit value for process.
        *
        * @exception ProcessNotFound if process_name doesn't denote
        * an existing process.
        */
        void notify_ending(
            in ElementName application_name,
            in ElementName process_name,
            in ElementName host_name,
            in CdmwPlatformMngtBase::TimeStamp time_stamp,
            in long exit_status)
            raises(ProcessNotFound);

        /**
        * Notifies the monitoring failure of the process.
        *
        * @param application_name the name of the application.
        * @param process_name the name of the process.
        * @param host_name the name of the host.
        * @param time_stamp the time stamp of the monitoring failure.
        *
        * @exception ProcessNotFound if process_name doesn't denote
        * an existing process.
        */
        void notify_monitoring_failure(
            in ElementName application_name,
            in ElementName process_name,
            in ElementName host_name,
            in CdmwPlatformMngtBase::TimeStamp time_stamp)
            raises(ProcessNotFound);

        /**
        * Notifies a user event.
        *
        * @param application_name the name of the application.
        * @param process_name the name of the process.
        * @param host_name the name of the host.
        * @param issuer the issuer of the event.
        * @param data the data of the event.
        */
        void notify_user_event(
            in ElementName application_name,
            in ElementName process_name,
            in ElementName host_name,
            in CdmwPlatformMngtBase::EventIssuer issuer,
            in any data)
            raises(ProcessNotFound);
          
            
        /**
        * Returns the element object reference defined by its absolute path
        * @exception ElementPathInvalid if element path is invalid
        * @exception ManagedElementNotFound if element not found
        */
        ManagedElement get_managed_element (in ElementPath element_path)
            raises (ElementPathInvalid,
                    ManagedElementNotFound);
        
                    
        /**
        * Get the status of an entity of the system.
        *
        * @param entity_name the name identifying the entity
        * @param entity_info the additional status information
        * @return the status of the entity
        * @exception EntityNotFound if entity has not been found
        */
        EntityStatus get_system_entity_status(in ElementName entity_name,
                                              out string entity_info)
            raises(EntityNotFound);
        
        
        /**
        * Get the status of an entity of the host.
        *
        * @param host_name the name of the host.
        * @param entity_name the name identifying the entity
        * @param entity_info the additional status information
        * @return the status of the entity
        * @exception HostNotFound if host has not been found
        * @exception EntityNotFound if entity has not been found
        */
        EntityStatus get_host_entity_status(in ElementName host_name,
                                            in ElementName entity_name,
                                            out string entity_info)
            raises(HostNotFound,
                   EntityNotFound);
                   
                   
        /**
        * Get the status of an entity of the application.
        *
        * @param application_name the name of the application.
        * @param entity_name the name identifying the entity
        * @param entity_info the additional status information
        * @return the status of the entity
        * @exception ApplicationNotFound if application has not been found
        * @exception EntityNotFound if entity has not been found
        */
        EntityStatus get_application_entity_status(in ElementName application_name,
                                                   in ElementName entity_name,
                                                   out string entity_info)
            raises(ApplicationNotFound,
                   EntityNotFound); 
               
        /**
        * Get the status of an entity of the process.
        *
        * @param application_name the name of the application.
        * @param process_name the name of the process.
        * @param host_name the name of the host.
        * @param entity_name the name identifying the entity
        * @param entity_info the additional status information
        * @return the status of the entity
        * @exception ProcessNotFound if process has not been found
        * @exception EntityNotFound if entity has not been found        
        */
        EntityStatus get_process_entity_status(in ElementName application_name,
                                               in ElementName process_name,
                                               in ElementName host_name,
                                               in ElementName entity_name,
                                               out string entity_info)
            raises(ProcessNotFound,
                   EntityNotFound);
                    
        /**
        * Changes the status of an entity of the system.
        *
        * @param entity_name the name identifying the entity
        * @param entity_status the new status of the entity
        * @param entity_info the additional information about the status change
        * @exception EntityNotFound if entity has not been found
        */
        void set_system_entity_status(in ElementName entity_name,
            in EntityStatus entity_status, in string entity_info)
            raises(EntityNotFound);
        
        /**
        * Changes the status of an entity of the host.
        *
        * @param host_name the name of the host.
        * @param entity_name the name identifying the entity
        * @param entity_status the new status of the entity
        * @param entity_info the additional information about the status change
        * @exception HostNotFound if host has not been found
        * @exception EntityNotFound if entity has not been found
        */
        void set_host_entity_status(in ElementName host_name,
                                    in ElementName entity_name,
                                    in EntityStatus entity_status, 
                                    in string entity_info)
            raises(HostNotFound,
                   EntityNotFound);
                       
        /**
        * Changes the status of an entity of the application.
        *
        * @param application_name the name of the application.
        * @param entity_name the name identifying the entity
        * @param entity_status the new status of the entity
        * @param entity_info the additional information about the status change
        * @exception ApplicationNotFound if application has not been found
        * @exception EntityNotFound if entity has not been found
        */
        void set_application_entity_status(in ElementName application_name,
                                           in ElementName entity_name,
                                           in EntityStatus entity_status, 
                                           in string entity_info)
            raises(ApplicationNotFound,
                   EntityNotFound);
            
        /**
        * Changes the status of an entity of the process.
        *
        * @param application_name the name of the application.
        * @param process_name the name of the process.
        * @param host_name the name of the host.
        * @param entity_name the name identifying the entity
        * @param entity_status the new status of the entity
        * @param entity_info the additional information about the status change
        * @exception ProcessNotFound if process has not been found
        * @exception EntityNotFound if entity has not been found        
        */
        void set_process_entity_status(in ElementName application_name,
                                       in ElementName process_name,
                                       in ElementName host_name,
                                       in ElementName entity_name,
            in EntityStatus entity_status, in string entity_info)
            raises(ProcessNotFound,
                   EntityNotFound);
            
            
        /**
        * Set the process creation command result.
        *
        * @param application_name the name of the application.
        * @param process_name the name of the process.
        * @param host_name the name of the host.
        * @param result the result of the command.
        * @param error_info the error info about the command result
        * @param error_issuer the error issuer about the command result
        * @param proc_delegate_wrap the process delegate wrapper.
        */    
        void set_create_process_result (
                                in ElementName application_name,
                                in ElementName process_name,
                                in ElementName host_name,
                                in ProcessCommandResult result,
                                in string error_info,
                                in string error_issuer,  
                                in ProcessDelegateWrapper process_delegate_wrap)
            raises(ProcessNotFound);
                                
        /**
        * Set the process initialisation command result.
        *
        * @param application_name the name of the application.
        * @param process_name the name of the process.
        * @param host_name the name of the host.
        * @param result the result of the command.
        */    
        void set_initialisation_result (
                                in ElementName application_name,
                                in ElementName process_name,
                                in ElementName host_name,
                                in ProcessCommandResult result)
            raises(ProcessNotFound);
                                
        /**
        * Set the process next step command result.
        *
        * @param application_name the name of the application.
        * @param process_name the name of the process.
        * @param host_name the name of the host.
        * @param result the result of the command.
        * @param step_nbr the step nbr realised
        */    
        void set_next_step_result (
                                in ElementName application_name,
                                in ElementName process_name,
                                in ElementName host_name,
                                in ProcessCommandResult result,
                                in unsigned long step_nbr)
            raises(ProcessNotFound);
                                
        /**
        * Set the process run command result.
        *
        * @param application_name the name of the application.
        * @param process_name the name of the process.
        * @param host_name the name of the host.
        * @param result the result of the command.
        */    
        void set_run_result (in ElementName application_name,
                             in ElementName process_name,
                             in ElementName host_name,
                             in ProcessCommandResult result)
             raises(ProcessNotFound);
                                
                                
        /**
        * Set the process stop command result.
        *
        * @param application_name the name of the application.
        * @param process_name the name of the process.
        * @param host_name the name of the host.
        * @param result the result of the command.
        */    
        void set_stop_result (in ElementName application_name,
                              in ElementName process_name,
                              in ElementName host_name,
                              in ProcessCommandResult result)
             raises(ProcessNotFound);

    }; // End interface ProcessObserver


}; // End Module CdmwPlatformMngt

#endif // CDMW_PLATFORM_MNGT_PROCESS_OBSERVER_IDL_


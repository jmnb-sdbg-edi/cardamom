/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI. It is derivative work based on PERCO Copyright (C) THALES
 * 2000-2003. All rights reserved.
 * 
 * Copyright (C) THALES 2004-2005. All rights reserved
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Library General Public License as published
 * by the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General Public
 * License along with CARDAMOM; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */


#ifndef CDMW_PLATFORM_MNGT_APPLICATION_BASE_IDL_
#define CDMW_PLATFORM_MNGT_APPLICATION_BASE_IDL_


#include <CdmwPlatformMngtCommonBase.idl>


#pragma prefix "thalesgroup.com"

/////////////////////////
// forward declarations
/////////////////////////
module CdmwPlatformMngtService
{
    interface ServiceDefContainer;
    interface ServiceBroker;
    interface ServiceBinding;
};



/**
 * Module defining the CDMW Platform Management service.
 */
module CdmwPlatformMngt
{
    /////////////////////////
    // forward declarations
    /////////////////////////
    
    interface HostContainer;
    interface SupervisionObserver;
    interface ApplicationObserver;
    interface MonitorableProcessObserver;
    interface ProcessObserver;

   
    ////////////////
    // Application
    ////////////////
    
    /**
    * Information needed by the application process during its starting.
    */
    struct ApplicationStartingData
    {

        /**
        * The name of the system owning the application.
        */
        ElementName system_name;

        /**
        * The port of the system owning the application.
        */
        Port system_port;

        /**
        * The name of the application.
        */
        ElementName application_name;

        /**
        * The hosts known by the system.
        */
        HostContainer host_container;

        /**
        * The observer of supervision events generated by the application.
        */
        SupervisionObserver supervision_observer;

        /**
        * The observer of applications.
        */
        ApplicationObserver application_observer;

        /**
        * The service binding.
        */
        CdmwPlatformMngtService::ServiceBinding service_binding;

        /**
        * The container for system service definitions.
        */
        CdmwPlatformMngtService::ServiceDefContainer system_service_def_container;
        
        /**
        * The observer used by the application agent to notify
        * important status changes of processes.
        */
        ProcessObserver process_observer;
                
        /**
        * The service broker used by the application agent to
        * manage service.
        */
        CdmwPlatformMngtService::ServiceBroker service_broker;
    };


     /**
    * The information needed by a daemon for creating a platform application
    * and for setting up the embedded application.
    */
    struct ApplicationInfo {

        /**
        * The information about the application.
        * Transmitted to the application for creation starting.
        */
        ApplicationStartingData starting_data;

        /**
        * The full path to the platform application executable.
        */
        string application_exe;

        /**
        * The main port that will be used by the platform application.
        */
        Port application_port;

        /**
        * The working directory of the platform application.
        */
        string application_working_directory;

        /**
        * Argument to be transmitted to the platform application on the
        * command line.
        */
        string application_args;

        /**
        * The monitoring info for the platform application.
        */
        MonitoringInfo application_monitoring_info;

        /**
        * The observer of the platform application.
        */
        MonitorableProcessObserver application_observer;
        
    };
    
    //////////////////////
    // Application Agent
    //////////////////////
    
   /**
    * Information needed by the application agent process during its creation.
    */
    struct ApplicationAgentInfo
    {

        /**
        * The name of the application
        */
        ElementName application_name;

        /**
        * The observer used by the application agent to notify
        * important status changes of processes.
        */
        ProcessObserver process_observer;
        
        /**
        * The service broker used by the application agent to
        * manage service.
        */
        CdmwPlatformMngtService::ServiceBroker service_broker;

#ifdef CDMW_USE_FAULTTOLERANCE
        /**
		 * The Replication Manager IOGR
		 */
	    string replication_manager_iogr;
#endif

    };


}; // End Module CdmwPlatformMngt

#endif // CDMW_PLATFORM_MNGT_APPLICATION_BASE_IDL_


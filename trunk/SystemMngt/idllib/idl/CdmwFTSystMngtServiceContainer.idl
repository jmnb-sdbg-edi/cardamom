/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI. It is derivative work based on PERCO Copyright (C) THALES
 * 2000-2003. All rights reserved.
 * 
 * Copyright (C) THALES 2004-2005. All rights reserved
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Library General Public License as published
 * by the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General Public
 * License along with CARDAMOM; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */


#ifndef CDMW_FTSYST_MNGT_SERVICE_CONTAINER_IDL_
#define CDMW_FTSYST_MNGT_SERVICE_CONTAINER_IDL_

#include <CdmwPlatformMngtCommon.idl>
#include <CdmwPlatformMngtService.idl>

#pragma prefix "thalesgroup.com"

module CdmwFTSystMngt
{


    /**
     * The CDMW service container accessor.
     */
    interface ServiceDefContainerAccessor
    {

        /**
        * Returns the specified service definition.
        *
        * @param target_element_path path of target element to access
        * @param service_name the name identifying the service.
        *
        * @exception ManagedElementNotFound if element not found
        * @exception ServiceNotFound if service_name doesn't denote
        * a defined service.
        */
        CdmwPlatformMngtService::ServiceProviderID get_service_def (
                   in CdmwPlatformMngt::ElementPath target_element_path,
                   in CdmwPlatformMngtService::ServiceName service_name)
            raises(CdmwPlatformMngt::ManagedElementNotFound,
                   CdmwPlatformMngtService::ServiceNotFound);                  


    }; // End interface ServiceDefContainerAccessor


    /**
     * The writable ServiceDefContainer.
     * The write access operations operates directly at the level of
     * the RWServiceDefContainer in order to provide service redefinition
     * useful in a service inheritance.
     */
    interface RWServiceDefContainerAccessor : ServiceDefContainerAccessor
    {

        /**
        * Adds a service to this container.
        * The service may already been defined in an higher level container
        * but this definition is shadowed by the new one.
        *
        * @param target_element_path path of target element to access
        * @param service_def the definition of the service to add. The service
        * provider referenced in service_def is not checked.
        *
        * @exception ManagedElementNotFound if element not found
        * @exception ServiceAlreadyExists if the service name is already used
        * within this container.
        */
        void add_service_def (
                   in CdmwPlatformMngt::ElementPath target_element_path,
                   in CdmwPlatformMngtService::ServiceDef service_def)
            raises(CdmwPlatformMngt::ManagedElementNotFound,
                   CdmwPlatformMngtService::ServiceAlreadyExists);

        /**
        * Removes a service from this container.
        * The same service may still be accessible through a higher level
        * container.
        *
        * @param target_element_path path of target element to access
        * @param service_name the name identifying the service to remove.
        *
        * @exception ManagedElementNotFound if element not found
        * @exception ServiceNotFound if service_name doesn't denote
        * an existing service within this container.
        */
        void remove_service_def (
                   in CdmwPlatformMngt::ElementPath target_element_path,
                   in CdmwPlatformMngtService::ServiceName service_name)
            raises(CdmwPlatformMngt::ManagedElementNotFound,
                   CdmwPlatformMngtService::ServiceNotFound);
                   
        /**
        * Removes all services from this container.
        *
        * @param target_element_path path of target element to access
        *
        * @exception ManagedElementNotFound if element not found
        */
        void remove_all_service_defs (
                   in CdmwPlatformMngt::ElementPath target_element_path)
            raises(CdmwPlatformMngt::ManagedElementNotFound);

    }; // End interface RWServiceDefContainerAccessor


}; // End Module CdmwFTSystMngt

#endif // CDMW_FTSYST_MNGT_SERVICE_CONTAINER_IDL_


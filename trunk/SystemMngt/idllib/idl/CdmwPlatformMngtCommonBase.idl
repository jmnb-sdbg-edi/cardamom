/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI. It is derivative work based on PERCO Copyright (C) THALES
 * 2000-2003. All rights reserved.
 * 
 * Copyright (C) THALES 2004-2005. All rights reserved
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Library General Public License as published
 * by the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General Public
 * License along with CARDAMOM; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */


#ifndef CDMW_PLATFORM_MNGT_COMMON_BASE_IDL_
#define CDMW_PLATFORM_MNGT_COMMON_BASE_IDL_

#include <CosPropertyService.idl>

#include <CdmwPlatformMngtBase.idl>


#pragma prefix "thalesgroup.com"


/**
 * Module defining the CDMW Platform Management service.
 */
module CdmwPlatformMngt
{
    /////////////////////////
    // forward declarations
    /////////////////////////
    

    
    ////////////////////
    // managed elements
    ////////////////////
    
    /**
    * The different managed elements.
    */
    enum ElementType
    {
        SYSTEM_TYPE,
        HOST_TYPE,
        APPLICATION_TYPE,
        PROCESS_TYPE,
        ENTITY_TYPE
    };
    
    
    
    /////////////
    // typedefs
    /////////////
    
    /**
    * Definition of a Port.
    * A default port may be specified by a negative value.
    */
    typedef long Port;
    
    
    /**
     * The name identifying a CDMW managed element.
     */
    typedef string ElementName;
    
    typedef sequence<ElementName> ElementNames;
    
    
    /**
     * The path a CDMW managed element.
     * path is defined as following :
     *     <system_name>.sys
     *     <system_name>.sys/<entity_name>.ent
     *     <system_name>.sys/<appli_name>.appl
     *     <system_name>.sys/<appli_name>.appl/<entity_name>.ent
     *     <system_name>.sys/<appli_name>.appl/<host_name>.host/<process_name>.proc
     *     <system_name>.sys/<appli_name>.appl/<host_name>.host/<process_name>.proc/<entity_name>.ent
     *     <system_name>.sys/<host_name>.host
     *     <system_name>.sys/<host_name>.host/<entity_name>.ent
     */
    typedef string ElementPath;
    
    typedef sequence<ElementPath> ElementPaths;
    
    
    /**
     * The status of entity.
     */
    typedef string EntityStatus;
    
    typedef sequence<EntityStatus> EntityStatusValues;

    
    /**
    * Definition of a Process PID.
    */
    typedef long ProcessPID;

    /**
    * The timeout in ms.
    */
    typedef unsigned long Timeout;


    
    
    ///////////////
    // Constants
    ///////////////
    
    /**
    * The default port of a system.
    */
    const Port DEFAULT_SYSTEM_PORT = 21869;
    
    /**
    * The default port of the platform management supervision.
    */
    const Port DEFAULT_SUPERVISION_PORT = 21871;

    /**
    * The name used by the platform management supervision for
    * publishing its corbaloc.
    */
    const string SUPERVISION_NAME = "CdmwPlatformMngtSupervision";

    
    /**
    * The name used by a platform management daemon for publishing its corbaloc.
    */
    const string DAEMON_NAME = "CdmwPlatformMngtDaemon";




     
    ///////////////
    // exceptions
    ///////////////
    
    /**
    * The managed element path is invalid.
    */
    exception ElementPathInvalid {};
    
    /**
    * The managed element has not been found.
    */
    exception ManagedElementNotFound
    {
        ElementName undef_name;
    };
    
    /**
    * The managed element path already exist.
    */
    exception ElementAlreadyExists {};
    
    
    /**
     * Exception raised when an operation invocation
     * is not allowed due to actual type of the callee interface.
     */
    exception IncompatibleType {};

    /**
    * The specified host has not been found.
    */
    exception HostNotFound {};

    
    /**
    * The specified application agent has not been found.
    */
    exception ApplicationAgentNotFound {};
    
    /**
    * The specified application has not been found.
    */
    exception ApplicationNotFound {};

    /**
    * The specified process has not been found.
    */
    exception ProcessNotFound {};
    
    /**
    * The specified observer has not been found.
    */
    exception ObserverNotFound {};
    
    /**
    * The specified application agent already exists.
    */
    exception ApplicationAgentAlreadyExists {};

    /**
    * The specified application already exists.
    */
    exception ApplicationAlreadyExists {};
    
    /**
    * The specified process already exists.
    */
    exception ProcessAlreadyExists {};
    

    /**
    * The allowed timeout for the creation has expired.
    */
    exception CreationTimeout {};

    /**
    * An error has been reported during the creation.
    */
    exception CreationError
    {
        string error_info;
    };

    /**
    * An error has been reported during the creation.
    */
    exception CreationErrorExt
    {
        CdmwPlatformMngtBase::EventIssuer issuer;
        string error_info;
    };
    
    /**
    * The information in invalid.
    */
    exception InvalidInfo {

        string reason;
    };
    
    /**
    * The corbaloc was ill-formed, and has not been resolved to 
    * a CORBA reference.
    */
    exception InvalidCorbaloc {

        string corbaloc;
    };
    
    /**
    * The host is not reachable.
    */
    exception HostNotReachable {
    
        string host;
    };
    
    
    /**
    * The specified entity has not been found.
    */
    exception EntityNotFound {};
        
    /**
    * The specified entity already exists.
    */
    exception EntityAlreadyExists {};
    
    /**
    * The specified entity status is not allowed.
    */
    exception EntityStatusNotAllowed {};

    
    
    ///////////////
    // monitoring
    ///////////////
    
    /**
    * The different models of monitoring.
    */
    enum MonitoringModel
    {
        /**
        * No monitoring at all.
        */
        NO_MONITORING,

        /**
        * Pull monitoring model.
        */
        PULL_MONITORING_MODEL,

        /**
        * Push monitoring model.
        */
        PUSH_MONITORING_MODEL,

        /**
        * Both PULL and PUSH model
        */
        FULL_MONITORING_MODEL
    };

    /**
     * Raised when a process doesn't support the requested monitoring model.
     */
    exception UnsupportedMonitoringModel
    {
        /**
         * The model actually supported.
         */
        MonitoringModel supported_model;
    };


    /**
     * The complete monitoring information.
     */
    struct CompleteMonitoringInfo
    {
        /**
         * The model of monitoring.
         */
        MonitoringModel monitoring_model;

        /**
         * The periodicity in ms for checking the liveliness of the
         * pull monitorable object.
         */
        unsigned long pull_monitoring_interval;

        /**
         * The timeout allowed for the pull monitorable object to reply. 
         */
        Timeout pull_monitoring_timeout;

        /**
         * The periodicity in ms of signals from the push monitorable object.
         */
        unsigned long push_monitoring_interval;

        /**
         * The timeout allowed before or after each theoretical signal that must
         * be sent by the push monitorable object. 
         */
        Timeout push_monitoring_timeout;

    };

    /**
     * The monitoring information.
     */
    struct MonitoringInfo
    {

        /**
         * The monitoring periodicity in ms.
         */
        unsigned long monitoring_interval;

        /**
         * The monitoring timeout.
         */
        Timeout monitoring_timeout;

    };


    typedef sequence<MonitoringInfo> MonitoringInfos;


    ////////////
    // Process
    ////////////
    
    /**
     * The light information for creating an Operating System Process.
     */
    struct ProcessLightInfo
    {

        /**
        * The main port that will be used by the process.
        */
        Port process_port;

        /**
        * The working directory of the process.
        */
        string working_directory;

        /**
        * The arguments to be passed to the process.
        */
        string process_args;

    };


    /**
     * The exit action types.
     */
    enum ExitActionType
    {
        /**
        * No action to do.
        */
        NO_ACTION,
        
        /**
        * Restart the process (hot restart).
        */
        RESTART_PROCESS,
        
        /**
        * Stop the node.
        */
        STOP_NODE,
        
        /**
        * Restart the node.
        */
        RESTART_NODE,
		
        /**
        * Stop the application.
        */
        STOP_APPLICATION,
        
        /**
        * Restart the application.
        */
		RESTART_APPLICATION
    };
    
    /**
     * The definition of the exit action for a process according to its exit code.
     */
    struct ExitAction
    {
        /**
         * exit code return by the system after the exit of process
         */
        long exit_code;
        
        /**
         * The type of action to do when process exited.
         */
        ExitActionType exit_action;
    };
    
    typedef sequence<ExitAction> ExitActions;


    /**
     * The definition of the exit/autorestart info of a process.
     */
    struct ExitAutoRestartInfo
    {
        /**
         * The default type of action to do when process exited.
         */
        ExitActionType default_exit_action;
        
        /**
         * The table action to do when process exited according to its exit code.
         */
        ExitActions exit_actions;
        
        /**
         * The maximum number of restart attempt.
         */
        long max_nbr_of_restart_attempt;        
    };


    /**
    * The configuration data needed by the managed process (via the Process callback).
    */
    struct ProcessConfigurationData
    {
        /**
        * The flag indicate that process is running with root privilege.
        */
        boolean run_as_root;
        
        /**
        * The flag indicate a core must be generated when process detect fault.
        */
        boolean generate_core;
    };
    
    

    /**
     * The information for creating an Operating System Process.
     * Comparing to ProcessLightInfo, contains the additional
     * process_exe member.
     */
    struct ProcessInfo
    {
        /**
        * The full path to the process executable.
        */
        string process_exe;

        /**
        * The main port that will be used by the process.
        */
        Port process_port;

        /**
        * The working directory of the process.
        */
        string working_directory;

        /**
        * The arguments to be passed to the process.
        */
        string process_args;
        
        /**
        * The information about the exit/autorestart of process.
        */
        ExitAutoRestartInfo exit_autorestart_info;
         
        /**
        * The configuration data needed by the managed process (via the Process callback).
        */
        ProcessConfigurationData configuration_data;
    };

    
    
    /////////////
    // Platform
    /////////////
    
    /**
    * The status of the Operation System Process.
    */
    enum OSProcessStatus {

        /**
        * The Process has been started.
        */
        STARTED,

        /**
        * The process has terminated.
        */
        ENDED
    };
    
}; // End Module CdmwPlatformMngt

#endif // CDMW_PLATFORM_MNGT_COMMON_BASE_IDL_


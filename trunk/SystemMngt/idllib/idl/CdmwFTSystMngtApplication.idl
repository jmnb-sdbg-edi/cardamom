/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI. It is derivative work based on PERCO Copyright (C) THALES
 * 2000-2003. All rights reserved.
 * 
 * Copyright (C) THALES 2004-2005. All rights reserved
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Library General Public License as published
 * by the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General Public
 * License along with CARDAMOM; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */


#ifndef CDMW_FTSYST_MNGT_FTAPPLICATION_IDL_
#define CDMW_FTSYST_MNGT_FTAPPLICATION_IDL_


#include <CdmwPlatformMngtCommon.idl>
#include <CdmwPlatformMngtElementBase.idl>

#include <CdmwFTSystMngtManagedElement.idl>
#include <CdmwFTSystMngtEntityContainer.idl>
#include <CdmwFTSystMngtServiceContainer.idl>

#pragma prefix "thalesgroup.com"

module CdmwFTSystMngt
{

    /**
     * The CDMW application accessor.
     */
    interface ApplicationAccessor : ManagedElementAccessor,
        RWEntityContainerAccessor,
        RWServiceDefContainerAccessor
    {
        /**
        * get the type of restart (Cold/Hot) currently applied to the application
        *
        * @param target_element_path path of target element to access
        *
        * @exception ManagedElementNotFound if element not found
        *
        */
        CdmwPlatformMngt::RestartType get_restart_type (in CdmwPlatformMngt::ElementPath target_element_path)
            raises (CdmwPlatformMngt::ManagedElementNotFound);
        
        /**
        * Indicate the current nbr of restart attempt
        *
        * @param target_element_path path of target element to access
        *
        * @exception ManagedElementNotFound if element not found
        *
        */
        long get_restart_attempt (in CdmwPlatformMngt::ElementPath target_element_path)
            raises (CdmwPlatformMngt::ManagedElementNotFound);
        
       /**
        * Added on 2-11-2005
        * It returns the number of processes
        *
        * @return the number of processes
        * @exception ManagedElementNotFound if element not found
        */
        unsigned long get_number_of_processes(in CdmwPlatformMngt::ElementPath target_element_path) 
            raises (CdmwPlatformMngt::ManagedElementNotFound);
        
        /**
        * Indicates whether the application is started manually.
        *
        * @param target_element_path path of target element to access
        *
        *   if flag is set the application (defined in init graph) is not started
        *   during a cold start and is skipped from the starting sequence
        *   defined by init graph.
        *   During an hot restart the application is started following the init
        *   graph if it is running during the stop command
        *
        * @exception ManagedElementNotFound if element not found
        *
        */
        boolean is_manual_starting(in CdmwPlatformMngt::ElementPath target_element_path)
           raises (CdmwPlatformMngt::ManagedElementNotFound);
        
        /**
        * Sets the process to be started manually.
        *
        * @param target_element_path path of target element to access
        * @param manual_starting true if process is started manually
        *
        * @exception ManagedElementNotFound if element not found
        * @exception IncompatibleStatus if the status of the process doesn't
        * allow the operation.
        */
        void set_manual_starting(in CdmwPlatformMngt::ElementPath target_element_path,
                                 in boolean manual_starting)
            raises(CdmwPlatformMngt::ManagedElementNotFound,
                   CdmwPlatformMngt::IncompatibleStatus);
            
        /**
        *
        * @param target_element_path path of target element to access
        *
        * Returns the status of the application with its additional information.
        *
        * @exception ManagedElementNotFound if element not found
        */
        CdmwPlatformMngt::ApplicationStatus get_status(
                                     in CdmwPlatformMngt::ElementPath target_element_path,
                                     out string status_info)
            raises (CdmwPlatformMngt::ManagedElementNotFound);

        /**
        *
        * @param target_element_path path of target element to access
        *
        * Returns the mode of the application with its additional information.
        *
        * @exception ManagedElementNotFound if element not found
        */
        CdmwPlatformMngt::FunctioningMode get_mode(
                                 in CdmwPlatformMngt::ElementPath target_element_path,
                                 out string mode_info)
            raises (CdmwPlatformMngt::ManagedElementNotFound);

        /**
        *
        * @param target_element_path path of target element to access
        *
        * Returns a snapshot of the whole application.
        *
        * @exception ManagedElementNotFound if element not found
        *
        */
        CdmwPlatformMngt::ApplicationSnapshot get_snapshot(
                                 in CdmwPlatformMngt::ElementPath target_element_path)
            raises (CdmwPlatformMngt::ManagedElementNotFound);


        /**
        * Returns the process paths of the application.
        * The first how_many process paths will be returned at most and the
        * rest of the process paths may be retrieved thanks to the iterator.
        *
        * @param target_element_path path of target element to access
        * @param how_many the number of process paths to return
        * @param processes_iterator the iterator to the rest of process paths.
        *
        * @return At most the number of process paths requested
        *
        * @exception ManagedElementNotFound if element not found
        *
        */
        CdmwPlatformMngt::ElementPaths get_processes(
            in CdmwPlatformMngt::ElementPath target_element_path,
            in unsigned long how_many,
            out CdmwPlatformMngt::ElementPathsIterator processes_iterator)
            raises (CdmwPlatformMngt::ManagedElementNotFound);
            
            
        /**
        * Check the specified process exist.
        *
        * @param target_element_path path of target element to access
        * @param process_name the name of the process.
        * @param host_name the name of the host where process is running.
        * @return the process element path
        *
        * @exception ManagedElementNotFound if element not found
        * @exception ProcessNotFound if process_name doesn't denote
        * an existing process.
        */
        CdmwPlatformMngt::ElementPath get_process(
                   in CdmwPlatformMngt::ElementPath target_element_path,
                   in CdmwPlatformMngt::ElementName process_name,
                   in CdmwPlatformMngt::ElementName host_name)
            raises(CdmwPlatformMngt::ManagedElementNotFound,
                   CdmwPlatformMngt::ProcessNotFound);
            
            
        /**
        * Defines the initial configuration of the application.
        *
        * @param target_element_path path of target element to access
        * @param application_def the definition of the application.
        *
        * @exception ManagedElementNotFound if element not found
        * @exception DuplicateEntity if there is a duplicate entity name among
        * the application's entities
        * @exception CosPropertyService::MultipleExceptions if there is a bad property among
        * the application's properties
        * @exception DuplicateService if there is a duplicate service name among
        * the application's service definitions
        * @exception DuplicateProcess if there is a duplicate process name among
        * the application's processes
        * @exception ProcessHostNotFound if an unknown host is used by one of
        * the application's processes
        * @exception DuplicateProcessEntity if there is a duplicate entity name
        * among the entities of one of the application processes
        * @exception ProcessPropertyExceptions if there is a bad property among
        * the properties of one of the application processes
        * @exception DuplicateProcessService if there is a duplicate service
        * name among the services of one of the application processes
        * @exception DuplicateProcessStep if there is a duplicate step label
        * among the steps of one of the application processes
        * @exception DuplicateProcessCommand if there is a duplicate command name
        * among the commands of one of the application processes
        * @exception DuplicateProcessCommandArg if there is a duplicate command arg name
        * among the commands of one of the application processes
        * @exception DuplicateEntityCommand if there is a duplicate command name
        * among the commands of one of the entities of the application processes
        * @exception DuplicateEntityCommandArg if there is a duplicate command arg name
        * among the commands of one of the entities of the application processes
        * @exception AlreadyDone if the initial configuration has already been
        * defined.
        * @exception IncompatibleStatus if the application is not in the INITIAL
        * status.
        */
        void define(in CdmwPlatformMngt::ElementPath target_element_path,
                    in CdmwPlatformMngt::ApplicationDef application_def)
            raises(CdmwPlatformMngt::ManagedElementNotFound,
                   CdmwPlatformMngt::DuplicateEntity,
                   CosPropertyService::MultipleExceptions, 
                   CdmwPlatformMngt::DuplicateService, 
                   CdmwPlatformMngt::DuplicateProcess, 
                   CdmwPlatformMngt::ProcessHostNotFound,
                   CdmwPlatformMngt::DuplicateProcessEntity, 
                   CdmwPlatformMngt::ProcessPropertyExceptions, 
                   CdmwPlatformMngt::DuplicateProcessService, 
                   CdmwPlatformMngt::DuplicateProcessStep,
                   CdmwPlatformMngt::DuplicateProcessCommand, 
                   CdmwPlatformMngt::DuplicateProcessCommandArg,
                   CdmwPlatformMngt::DuplicateEntityCommand, 
                   CdmwPlatformMngt::DuplicateEntityCommandArg,
                   CdmwPlatformMngt::AlreadyDone, 
                   CdmwPlatformMngt::IncompatibleStatus);

        /**
        * Adds a process to the application.
        *
        * @param target_element_path path of target element to access
        * @param process_def the definition of the process to add.
        * @return the process element path
        *
        *
        * @exception ManagedElementNotFound if element not found
        * @exception ProcessAlreadyExists if the process name is already used
        * within the application.
        * @exception HostNotFound if the host where the process will be run is
        * not found.
        * @exception DuplicateEntity if there is a duplicate entity name among
        * the entities of the process
        * @exception CosPropertyService::MultipleExceptions if there is a bad property among
        * the process's properties
        * @exception DuplicateService if there is a duplicate service name among
        * the service definitions of the process
        * @exception DuplicateStep if there is a duplicate step label among
        * the steps of the process
        * @exception DuplicateCommand if there is a duplicate command name
        * among the commands of the process
        * @exception DuplicateCommandArg if there is a duplicate command arg name
        * among the commands of the process
        * @exception DuplicateEntityCommand if there is a duplicate command name
        * among the commands of one of the entities of the process
        * @exception DuplicateEntityCommandArg if there is a duplicate command arg name
        * among the commands of one of the entities of the process
        * @exception IncompatibleStatus if the status of the application doesn't
        * allow the operation.
        */
        CdmwPlatformMngt::ElementPath add_process(in CdmwPlatformMngt::ElementPath target_element_path,
                         in CdmwPlatformMngt::ProcessDef process_def)
            raises(CdmwPlatformMngt::ManagedElementNotFound,
                   CdmwPlatformMngt::ProcessAlreadyExists, 
                   CdmwPlatformMngt::HostNotFound,
                   CdmwPlatformMngt::DuplicateEntity, 
                   CosPropertyService::MultipleExceptions,
                   CdmwPlatformMngt::DuplicateService, 
                   CdmwPlatformMngt::DuplicateStep,
                   CdmwPlatformMngt::DuplicateCommand, 
                   CdmwPlatformMngt::DuplicateCommandArg,
                   CdmwPlatformMngt::DuplicateEntityCommand, 
                   CdmwPlatformMngt::DuplicateEntityCommandArg,
                   CdmwPlatformMngt::IncompatibleStatus);

        /**
        * Removes a process from the application.
        * The process must be inactive.
        *
        * @param target_element_path path of target element to access
        * @param process_name the name of the process.
        * @param host_name the name of the host where process is running.
        *
        * @exception ManagedElementNotFound if element not found
        * @exception ProcessNotFound if the specified process doesn't denote
        * an existing process.
        * @exception ProcessStillActive if the process is still active
        * @exception IncompatibleStatus if the status of the application doesn't
        * allow the operation.
        */
        void remove_process(in CdmwPlatformMngt::ElementPath target_element_path,
                            in CdmwPlatformMngt::ElementName process_name,
                            in CdmwPlatformMngt::ElementName host_name)
            raises(CdmwPlatformMngt::ManagedElementNotFound,
                   CdmwPlatformMngt::ProcessNotFound, 
                   CdmwPlatformMngt::ProcessStillActive, 
                   CdmwPlatformMngt::IncompatibleStatus);

        /**
        * Sets the graph of process initialisation.
        *
        * @param target_element_path path of target element to access
        * @param process_graph the process graph.
        *
        * @exception ManagedElementNotFound if element not found
        * @exception ReferenceNotFound if an element of the graph refers to an
        * unknown process
        * @exception CircularReference if a circular reference has been detected
        * in the graph
        * @exception StepOutOfBound if the step defined in an element graph is
        * out of bound for the corresponding process.
        * @exception StepJump if a jump has been detected between steps of the
        * same process.
        * @exception IncompatibleStatus if the initialisation of the application
        * is in progress.
        */
        void set_init_graph(in CdmwPlatformMngt::ElementPath target_element_path,
                            in CdmwPlatformMngt::GraphElements process_graph)
            raises(CdmwPlatformMngt::ManagedElementNotFound,
                   CdmwPlatformMngt::ReferenceNotFound, 
                   CdmwPlatformMngt::CircularReference,
                   CdmwPlatformMngt::StepOutOfBound, 
                   CdmwPlatformMngt::StepJump, 
                   CdmwPlatformMngt::IncompatibleStatus);

        /**
        * Sets the graph of process stop.
        *
        * @param target_element_path path of target element to access
        * @param process_graph the process graph.
        *
        * @exception ManagedElementNotFound if element not found
        * @exception ReferenceNotFound if an element of the graph refers to an
        * unknown process
        * @exception CircularReference if a circular reference has been detected
        * in the graph
        * @exception IncompatibleStatus if the stop of the application
        * is in progress.
        */
        void set_stop_graph(in CdmwPlatformMngt::ElementPath target_element_path,
                            in CdmwPlatformMngt::GraphElements process_graph)
            raises(CdmwPlatformMngt::ManagedElementNotFound,
                   CdmwPlatformMngt::ReferenceNotFound, 
                   CdmwPlatformMngt::CircularReference, 
                   CdmwPlatformMngt::IncompatibleStatus);
          
            
        /**
        * Returns the information about the autorestart info of the application.
        *
        * @param target_element_path path of target element to access
        *
        * @exception ManagedElementNotFound if element not found
        *
        */
        CdmwPlatformMngt::ApplicationAutoRestartInfo get_autorestart_info(
                            in CdmwPlatformMngt::ElementPath target_element_path)
            raises (CdmwPlatformMngt::ManagedElementNotFound);

        /**
        * Changes the information about the autorestart info of the application.
        *
        * @param target_element_path path of target element to access
        * @param autorestart_info the auto restart info
        *
        * @exception ManagedElementNotFound if element not found
        * @exception IncompatibleStatus if the status of the application doesn't
        * allow the operation.
        */
        void set_autorestart_info(in CdmwPlatformMngt::ElementPath target_element_path,
                                  in CdmwPlatformMngt::ApplicationAutoRestartInfo autorestart_info)
            raises(CdmwPlatformMngt::ManagedElementNotFound,
                   CdmwPlatformMngt::IncompatibleStatus);
            

        /**
        * Starts the initialisation of the application.
        * The initialisation order of the application's processes will follow the
        * graph of process initialisation.
        *
        * @param target_element_path path of target element to access
        * @param startup_kind the startup kind of the whole system.
        *
        * @exception ManagedElementNotFound if element not found
        * @exception IncompatibleStatus if the status of the application doesn't
        * allow the operation.
        */
        void initialise(in CdmwPlatformMngt::ElementPath target_element_path,
                        in CdmwPlatformMngtBase::StartupKind startup_kind)
            raises(CdmwPlatformMngt::ManagedElementNotFound,
                   CdmwPlatformMngt::IncompatibleStatus);

        /**
        * Initialises the application.
        * Unlike the initialise() operation, this operation will not return
        * until the request has been actually performed.
        * (See initialise() for description).
        *
        * @param target_element_path path of target element to access
        * @param startup_kind the startup kind of the whole system.
        *
        * @return the status of this long request.
        *
        * @exception ManagedElementNotFound if element not found
        * @exception IncompatibleStatus if the status of the application doesn't
        * allow the operation.
        */
        CdmwPlatformMngt::LongRequestStatus initialise_and_wait(
            in CdmwPlatformMngt::ElementPath target_element_path,
            in CdmwPlatformMngtBase::StartupKind startup_kind)
            raises(CdmwPlatformMngt::ManagedElementNotFound,
                   CdmwPlatformMngt::IncompatibleStatus);

        /**
        * Resumes the initialisation of the application.
        *
        * @param target_element_path path of target element to access
        *
        * @exception ManagedElementNotFound if element not found
        * @exception IncompatibleStatus if the status of the application doesn't
        * allow the operation.
        */
        void resume(in CdmwPlatformMngt::ElementPath target_element_path)
            raises(CdmwPlatformMngt::ManagedElementNotFound,
                   CdmwPlatformMngt::IncompatibleStatus);

        /**
        * Resumes the initialisation of the application.
        * Unlike the resume() operation, this operation will not return
        * until the request has been actually performed.
        * (See resume() for description).
        *
        * @param target_element_path path of target element to access
        *
        * @return the status of this long request.
        *
        * @exception ManagedElementNotFound if element not found
        * @exception IncompatibleStatus if the status of the application doesn't
        * allow the operation.
        */
        CdmwPlatformMngt::LongRequestStatus resume_and_wait(
            in CdmwPlatformMngt::ElementPath target_element_path)
            raises(CdmwPlatformMngt::ManagedElementNotFound,
                   CdmwPlatformMngt::IncompatibleStatus);
        
        /**
        * Acknowledges the DEGRADED_MODE of the application.
        * The mode of the application is reset to NORMAL_MODE.
        *
        * @param target_element_path path of target element to access
        *
        * @exception ManagedElementNotFound if element not found
        * @exception IncompatibleStatus if the status of the application doesn't
        * allow the operation.
        */
        void acknowledge(in CdmwPlatformMngt::ElementPath target_element_path)
            raises(CdmwPlatformMngt::ManagedElementNotFound,
                   CdmwPlatformMngt::IncompatibleStatus);

        /**
        * Requests the application to run.
        * All managed processes of the application that are initialised
        * will be requested concurrently to run.
        *
        * @param target_element_path path of target element to access
        *
        * @exception ManagedElementNotFound if element not found
        * @exception IncompatibleStatus if the status of the application doesn't
        * allow the operation.
        */
        void run(in CdmwPlatformMngt::ElementPath target_element_path)
            raises(CdmwPlatformMngt::ManagedElementNotFound,
                   CdmwPlatformMngt::IncompatibleStatus);

        /**
        * Requests the application to stop.
        * The stop order of the application's processes will follow the graph
        * of process stop. Active processes that do not belong to this graph
        * will be stopped concurrently.
        *
        * @param target_element_path path of target element to access
        * @param emergency if true, the graph is not used and all the processes
        * of the application will be requested to stop concurrently. This flag
        * is also transmitted to the processes.
        *
        * @exception ManagedElementNotFound if element not found
        */
        void stop(in CdmwPlatformMngt::ElementPath target_element_path,
                  in boolean emergency)
            raises (CdmwPlatformMngt::ManagedElementNotFound);

        /**
        * Stops the application.
        * Unlike the stop() operation, this operation will not return
        * until the request has been actually performed.
        * (See stop() for description).
        *
        * @param target_element_path path of target element to access
        * @param emergency if true, the graph is not used and all the processes
        * of the application will be requested to stop concurrently. This flag
        * is also transmitted to the processes.
        *
        * @return the status of this long request.
        *
        * @exception ManagedElementNotFound if element not found
        */
        CdmwPlatformMngt::LongRequestStatus stop_and_wait(
                  in CdmwPlatformMngt::ElementPath target_element_path,
                  in boolean emergency)
            raises (CdmwPlatformMngt::ManagedElementNotFound);
        
        
        /**
        * Stop and make a Cold Start of the application.
        * The initialisation order of the application's processes will follow the
        * graph of process initialisation.
        * All processes started manually before stop are not restarted
        * All user properties of element retrieve their initial values
        *
        * @param target_element_path path of target element to access
        * @param startup_kind the startup kind of the whole system.
        *
        * @exception ManagedElementNotFound if element not found
        * @exception IncompatibleStatus if the status of the application doesn't
        * allow the operation.
        */
        void cold_restart(in CdmwPlatformMngt::ElementPath target_element_path,
                          in CdmwPlatformMngtBase::StartupKind startup_kind)
            raises(CdmwPlatformMngt::ManagedElementNotFound,
                   CdmwPlatformMngt::IncompatibleStatus);
            
        /**
        * Stop and make a Hot Start of the application.
        * The initialisation order of the application's processes will follow the
        * graph of process initialisation.
        * All processes running before the stop are restarted
        * All user properties of element keep their current values
        *
        * @param target_element_path path of target element to access
        * @param startup_kind the startup kind of the whole system.
        *
        * @exception ManagedElementNotFound if element not found
        * @exception IncompatibleStatus if the status of the application doesn't
        * allow the operation.
        */
        void hot_restart(in CdmwPlatformMngt::ElementPath target_element_path,
                         in CdmwPlatformMngtBase::StartupKind startup_kind)
            raises(CdmwPlatformMngt::ManagedElementNotFound,
                   CdmwPlatformMngt::IncompatibleStatus);

    }; // End interface ApplicationAccessor
    
    
    

}; // End Module CdmwFTSystMngt

#endif // CDMW_FTSYST_MNGT_FTAPPLICATION_IDL_


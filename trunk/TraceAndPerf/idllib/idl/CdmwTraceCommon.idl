/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI. It is derivative work based on PERCO Copyright (C) THALES
 * 2000-2003. All rights reserved.
 * 
 * Copyright (C) THALES 2004-2005. All rights reserved
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Library General Public License as published
 * by the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General Public
 * License along with CARDAMOM; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */


#ifndef CDMW_TRACE_COMMON_IDL_
#define CDMW_TRACE_COMMON_IDL_


#pragma prefix "thalesgroup.com"

/**
* This module describes interfaces and data types of the CDMW
* Trace service.
*/
module CdmwTrace
{

    // ------------------------------------------------------------------
    // Definitions of the Trace Level
    // ------------------------------------------------------------------

    /** 
    * Definition of Trace Level Value
    */
    typedef short  Value;


    /** 
    * Definition of Trace Domain
    */
    typedef string Domain;


    /**
     * Data type of a component name.
     */
    // ECR-0123
    typedef string ComponentName;


    /**
     * Constant that stands for all the component names.
     */
    // ECR-0123
    const ComponentName ALL_COMPONENT_NAMES = "*";


    /** 
    * Constant identifying all domains
    */
    const Domain ALL_DOMAINS = "*";


    /** 
    * Constant identifying all level values
    */
    const Value ALL_VALUES = -1;


    /** 
    * This structure contains the information describing a trace filter:
    * the value of the level, the owner domain, the activation state.
    */
    struct Trace_Filter {
        /**
        * Level value.
        */
        Value the_value;
        
        /**
        * Owner domain
        */
        Domain the_domain;

        /**
         * Component name.
         */
        // ECR-0123
        ComponentName the_component_name;

        /**
        * activation state
        */
	    boolean activation;
    };

    /** 
    * Definition of Sequence of Trace Filter
    */
    typedef sequence<Trace_Filter> TraceFilterSeq;

    // ------------------------------------------------------------------
    // Definitions of the Trace headers
    // ------------------------------------------------------------------

    /** 
    * Definition of Thread Ident
    */
    typedef unsigned long ThreadID;

    /** 
    * Definition of Thread Name
    */
    typedef string ThreadName;

    /** 
    * Definition of Process Ident
    */
    typedef unsigned long ProcessID;

    /** 
    * Definition of Application Name
    */
    typedef string ApplicationName;
    
    /** 
    * Definition of Process Name
    */
    typedef string ProcessName;

    /** 
    * Definition of Host Ident
    */
    typedef unsigned long HostID;

    /** 
    * Definition of Host Name
    */
    typedef string HostName;


    /** 
    * Definition of File Line
    */
    typedef unsigned long FileLine;

    /** 
    * Definition of File Name
    */
    typedef string FileName;
   
    /**
    * This structure contains the information about time
    */
    struct Timeval {
        /**
        * first time part in seconds
        */
        unsigned long seconds;

        /**
        * second time part in microseconds
        */
        unsigned long microseconds;
    };

    /**
    * Header used to define the information about the production
    * context of a specific message.
    */
    struct MessageHeader {

        /**
        * Trace Filter Level in which the trace has been produced.
        */
        Trace_Filter the_level;
        
        /**
        * Identifier of the thread which has produced the trace
        */
        ThreadID the_thread_id;

        /**
        * Line where the trace has been produced (optionnal).
        */
        FileLine the_file_line;
        
        /**
        * File where the trace has been produced (optionnal).
        */
        FileName the_file_name;

        /**
        * Date when the trace has been produced.
        */
        Timeval time_stamping;
    };



    /**
    * Header used to define the information about the production
    * context of a set of messages.
    */
    struct MessagesHeader {

        /**
        * The process which has produced the trace.
        */
        ProcessID the_process_id;

        /**
        * The application name which has produced the trace (optionnal).
        */
        ApplicationName the_application_name;
        
        /**
        * The process name which has produced the trace (optionnal).
        */
        ProcessName the_process_name;
        
        /**
        * The id of the host where the trace has been produced.
        */
        HostID the_host_id;

        /**
        * The host name where the trace has been produced (optionnal).
        */
        HostName the_host_name;
    };


    /**
    * This structure contains a message produced by the Trace 
    * already formatted in a human readable format.
    */
    struct FormattedMessage {

        /**
        * Information about the context of the message production.
        */
        MessageHeader header;

        /**
        * the already formatted message.
        */
        string message;
    };


    /** 
    * Definition of Sequence of Formatted Messages
    */
    typedef sequence<FormattedMessage> FormattedMessageSeq;



}; // End module CdmwTrace

#endif // CDMW_TRACE_COMMON_IDL_


/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES 
 * and SELEX-SI. 
 * 
 * It is derivative work based on PERCO Copyright (C) THALES 2000-2003. 
 * All rights reserved.
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it under 
 * the terms of the GNU Library General Public License as published by the
 * Free Software Foundation; either version 2 of the License, or (at your 
 * option) any later version. 
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public 
 * License for more details. 
 * 
 * You should have received a copy of the GNU Library General 
 * Public License along with CARDAMOM; see the file COPYING. If not, write to 
 * the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */


#ifndef CDMW_XML_IDL_
#define CDMW_XML_IDL_


#pragma prefix "thalesgroup.com"

/**
 * This module defines interfaces and data types for the Cdmw XML Service. 
 */
module CdmwXML {

    typedef sequence<unsigned short> DOMString;
  
    typedef unsigned short NodeType;

    const NodeType ELEMENT_NODE       = 1;
    const NodeType ATTRIBUTE_NODE     = 2;
    const NodeType TEXT_NODE          = 3;
    const NodeType CDATA_SECTION_NODE = 4;
    const NodeType DOCUMENT_NODE      = 9;

    
    interface Node;
    interface Element;
    interface Text;
    interface CDATASection;
    interface Attr;
    interface Document;
   
    
    valuetype NodeDescription {
        readonly attribute NodeType type;
        readonly attribute Node reference;
        
        // State
        private NodeType s_type;
        private Node s_reference;
        
        factory create(in NodeType type, 
                       in Node reference);
    };
    
    valuetype ElementDescription : NodeDescription {
        readonly attribute DOMString name;

        // State
        private DOMString s_name;

        factory create(in Element reference,
                       in DOMString name);
    };
    
    valuetype TextDescription : NodeDescription {
        attribute DOMString data;
        
        // State
        private DOMString s_data;
        
        factory create(in Text reference,
                       in DOMString data);
        
    };
    
    valuetype CDATASectionDescription : TextDescription {
        factory create(in CDATASection reference,
                       in DOMString data);
    };
    
    valuetype AttrDescription : NodeDescription {
        readonly attribute DOMString name;
        attribute DOMString value;
        
        // State
        private DOMString s_name;
        private DOMString s_value;
        
        factory create(in Attr reference,
                       in DOMString name,
                       in DOMString value);
    };
    
    valuetype DocumentDescription : NodeDescription {
        readonly attribute DOMString doctype;
        
        // State
        private DOMString s_doctype;
        
        factory create(in Document reference,
                       in DOMString doctype);
    };
    
   
    typedef sequence<NodeDescription> NodeDescriptionSeq;
    typedef sequence<AttrDescription> AttrDescriptionSeq;
    typedef sequence<ElementDescription> ElementDescriptionSeq;
    typedef sequence<TextDescription> TextDescriptionSeq;
   
    typedef unsigned short DOMExceptionCode;
    // const DOMExceptionCode INDEX_SIZE_ERR              = 1;
    // const DOMExceptionCode DOMSTRING_SIZE_ERR          = 2;
    const DOMExceptionCode HIERARCHY_REQUEST_ERR       = 3;
    const DOMExceptionCode WRONG_DOCUMENT_ERR          = 4;
    const DOMExceptionCode INVALID_CHARACTER_ERR       = 5;
    // const DOMExceptionCode NO_DATA_ALLOWED_ERR         = 6;
    // const DOMExceptionCode NO_MODIFICATION_ALLOWED_ERR = 7;
    const DOMExceptionCode NOT_FOUND_ERR               = 8;
    const DOMExceptionCode NOT_SUPPORTED_ERR           = 9;
    const DOMExceptionCode INUSE_ATTRIBUTE_ERR         = 10;
    
    /**
     * This exception indicates an invalid operation on the DOM tree.
     */
    exception DOMException {
        DOMExceptionCode code;
        string reason;
    };

    /**
     * This exception indicates an exception is thrown during XPath query.
     */
    exception XPathFormatException {
    	string reason;
    };
    
	 /** 
	  * This interface corresponds to the DOM primary datatype: a single node in
	  * the document tree. It provides operations for all derived interfaces
	  * (i.e. Attr, Document, Element, Text and CDATASection).
	  * 
	  */

    interface Node {
		 /**
		  * This operation returns the description of the current node.
		  * 
		  * @return The description of the current node.
		  */
        NodeDescription get_description();

		  /**
			* This operation returns the parent of the current node.
			*
			* @return  The parent of the current node.
			*
			* @exception DOMException Raised if the node has no parent.
			*/
        NodeDescription get_parent()
            raises (DOMException);
    };

	 /**
	  * This interface represents an element in an XML document. It provides
	  * operations to add, remove and replace nodes in the DOM tree, to get
	  * child nodes and to execute XPath queries.
	  */
    interface Element : Node {

		  /**
			* This operation allows to insert a new child node before a given one.
			*
			* @param newChild Node to be inserted as a child.
			* @param refChild The new node will be inserted before this one.
			* 
			* @return the node being inserted.
			* 
			* @exception DOMException Raised if the node to be inserted is one of its
			* node's ancestors, if the new child was created from a different document
			* than the one that created this node or if the reference child is not a
			* child of this node.
			*/
        Node insert_before(in Node newChild, in Node refChild) 
            raises (DOMException);
            
		  /**
			* This operation allows to replace a child node by a new one.
			*
			* @param newChild The new child node.
			* @param oldChild The node to be replaced.
			* 
			* @return the node replaced.
			* 
			* @exception DOMException Raised if the node to be replaced is one of its
			* node's ancestors, if the new child was created from a different document
			* than the one that created this node or if the old child is not a child
			* of this node.			*/
        Node replace_child(in Node newChild, in Node oldChild)
            raises (DOMException);
            
		  /**
			* This operation allows to remove a child node from the ones of the current
			* element. It returns the node removed.
			*
			* @param oldChild Node to be removed.
			* 
			* @return the node removed.
			* 
         * @exception DOMException Raised if the child given as parameter is not a 
         * child of this node.
			*/
        Node remove_child(in Node oldChild)
            raises (DOMException);

		  /**
			* This operation allows to add a child node on the current element. 
			*
			* @param newChild Node to be added as a child of the current element.
			* 
			* @return the node added.
			* 
			* @exception DOMException Raised if this node is of a type that does 
			* not allow children of the type of the new child node, or if the node
			* to append is one of this node's ancestors or if the new child was
			* created from a different document than the one that created this node.
			*/
        Node append_child(in Node newChild)
            raises (DOMException);
            
		  /**
			* This operation allows to execute an XPath query on the current element. 
			* It uses the XPath string to select a node list and to return it as a set
			* of node descriptions.
			*
			* @param xpath XPath query to be executed.
			* 
			* @return a set of node descriptions.
			* 
			* @exception XPathFormatException Raised if an exception occurred during
			* the XPath query.
			*/
        NodeDescriptionSeq select_nodes(in DOMString xpath)
            raises (XPathFormatException);
            
		  /**
			* The operation returns the set of elements which are the children of 
			* the current element.
			*
			* @return the set of elements which are the children of the current element.
			*/
        ElementDescriptionSeq get_child_elements();

		  /**
			* This operations returns the set of text nodes of the current element.
			*
			* @return the set of text nodes of the current element.
			*/
        TextDescriptionSeq get_texts();

		  /**
			* This operation returns the set of attributes belonging to the current 
			* element.
			*
			* @return the set of attributes belonging to the current element.
			*/
        AttrDescriptionSeq get_attributes();
        
		  /**
			* This operation returns the attribute node corresponding to the given name.
			*
			* @param name Name of the attribute node.
			* 
			* @return the attribute node corresponding to the given name.
			* 
			* @exception DOMException Raised if the element has no attribute with this 
			* name.
			*/
        AttrDescription get_attribute(in DOMString name)
            raises (DOMException);
            
		  /**
			* This operation allows to add a new attribute to the current element.
			*
			* @param name The name of the attribute to be added.
			* @param value The value of the attribute to be added.
			* 
			* @exception DOMException Raised if the specified name contains an illegal 
			* character.
			*/
        void set_attribute(in DOMString name, in DOMString value)
            raises (DOMException);
            
		  /**
			* This operation allows to add a new attribute to the current element.
			*
			* @param newAttr The new attribute
			* 
			* @return If the attribute given as parameter replaces an existing attribute,
			* it returns the replaced attribute, otherwise null is returned.
			* 
			* @exception DOMException Raised if the new attribute is already an attribute
			* of another Element object (The DOM user must explicitly clone Attr nodes to
			* re-use them in other elements) or if the new attribute was created from a
			* different document than the one that created the element.
			*/
        AttrDescription set_attribute_node(in Attr newAttr)
            raises (DOMException);
    };
    
	 /**
	  * This interface represents an attribute in an XML document. It provides
	  * an operation to change its own value.
	  */
    interface Attr : Node {
        void set_value(in DOMString value);
    };
    
	 /**
	  * This interface represents an attribute in an XML document. It provides
	  * an operation to change its own value.
	  */
    interface Text : Node {

		 /**
		  * This operation allows to set the data of the text node with the specified
		  * string.
		  *
		  * @param data String contained in the text node.
		  */
		  void set_data(in DOMString data);
    };
    
	 /**
	  * This interface represents a CDATASection node in an XML document.
	  * The CDATASection interface has no specific operation. It inherits operations
	  * from Node and Text interfaces.
	  */
    interface CDATASection : Text {
    };
    
	 /**
	  * This interface represents a document node in an XML document. It provides 
	  * operations to create nodes in a document, to execute XPath queries and to
	  * save a document.
	  *
	  */
    interface Document : Node {
		 /**
		  * This exception indicates the server is unable to save the XML document.
		  */
        exception SaveException {
        	string reason;
        };
        
		  /**
			* This operation allows to close the current XML document. It deallocates
			* the associated DOM tree and destroys every CORBA objects associated to
			* this DOM tree. 
			*/
        void close();
        
		  /**
			* This operation allows to save the current document.
			*
			* @exception SaveException is raised if the server is unable to save the
			* XML document.
			*/
        void save() raises (SaveException);
        
		  /**
			* This operation allows to save the current document with a given filename.
			*
			* @param filename New file name.
			*
			* @exception SaveException is raised if the server is unable to save the
			* XML document.
			*/
        void save_as(in string filename)
            raises (SaveException);
            
		  /**
			* This operation returns the child node that is the root element of the 
			* current document.
			*
			* @return the child node that is the root element of the current document.
			*
			*/
        ElementDescription get_document_element();
        
		  /**
			* This operation allows to execute an XPath query.
			*
			* @param xpath The XPath query to be resolved.
			*
			* @returns the list of Node resulting from the query.
			*
			* @exception XPathFormatException is raised if an exception is thrown 
			* during XPath query.
			*/
        NodeDescriptionSeq select_nodes_from_root(in DOMString xpath)
            raises (XPathFormatException);        
        
		  /**
			* This operation allows to create an element with a specified name of the
			* element type to instantiate.
			*
			* @param tagName Name of the element to be created.
			*
			* @return the created element.
			*
			* @exception DOMException Raised if the name contains an illegal character.
			*/
        Element create_element(in DOMString tagName)
            raises (DOMException);
        
		  /**
			* This operation allows to create an attribute with a specified name.
			*
			* @param name The name of the attribute to be added.
			* @param value The value of the attribute to be added.
			* 
			* @return the created attribute.
			*
			* @exception DOMException Raised if the name contains an illegal character.
			*/
        Attr create_attribute(in DOMString name, in DOMString value)
            raises (DOMException);
        
		  /**
			* This operation allows to create a text node given the specified string.
			*
			* @param data String contained in the text node.
			* 
			* @return the created text node.
			*
			*/
        Text create_text_node(in DOMString data);
        
		  /**
			* This operation allows to create a CDATASection whose value is the
			* specified string.
			*
			* @param data The value of the CDATASection.
			* 
			* @return the created CDATASection.
			*
			* @exception DOMException Raised if this document is an HTML document.
			*/
        CDATASection create_CDATASection(in DOMString data)
            raises (DOMException);

    };

    /**
	  * This interface defines basic methods to use the XML Service programming
	  * interfaces. Indeed, in order to get an DocumentDescription reference, a user
	  * application must first call the parse method from this interface.
	  * The XMLParser interface offers also another method which allows the creation
	  * of an empty DOM document. User applications can then add nodes and save the
	  * resulting DOM tree to a file.
	  */
    interface XMLParser {

		 /**
		  * This exception indicates a parsing error.
		  */
        exception ParsingException {
        	string reason;
        };
		  
        /**
			* This operation allows to parse an XML document.
			* 
			* @param filename Name of the file.
			* 
			* @return the DocumentDescription reference of the parsed file.
			*
			* @exception ParsingException Raised if an error occurred during parsing.
			*/
        DocumentDescription parse(in string filename) 
            raises (ParsingException);
            
		  /**
			* This operation allows to create an empty DOM document.
			*
			* @param xmlFilename New file name.
			* @param doctype Specify the type of the document.
			* @param dtdFilename Name of the dtd file on which the new document is based.
			*  
			* @return the DocumentDescription reference of the newly created document.
			*/
        DocumentDescription create_empty_document(in string xmlFilename,
                                                  in DOMString doctype,
                                                  in string dtdFilename);
    };

}; // End Module CdmwXML

#endif // CDMW_XML_IDL_


<!-- ===================================================================== -->
<!--
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI. It is derivative work based on PERCO Copyright (C) THALES
 * 2000-2003. All rights reserved.
 * 
 * Copyright (C) THALES 2004-2005. All rights reserved
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Library General Public License as published
 * by the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General Public
 * License along with CARDAMOM; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-->
<!-- ===================================================================== -->


<!-- 
    This is a template document to validate XML input for the CDMW Code
    Generator.

    A valid input file contains 4 sections:
        1) factories: defines object/component factories (IDL interfaces),
        2) datastore-types: defines the datastore initialisation
        3) lifecycle-frameworks: defines lifecycle frameworks to be generated,
        4) programs: defines placement of CDMW services (and
           lifecycle-frameworks) within executables.
-->
<!ELEMENT cdmw (factories,
                datastore-types?,
                lifecycle-frameworks,
                programs)>

<!ELEMENT factories (factory*)>

<!-- 
    A factory element defines either CDMW factory or a component home.
-->
<!ELEMENT factory (servant-provider?,
                   idl-search-dir*,
                   preprocessing-flags?)>

<!--
    CDMW objects are either Named or Anonymous. CDMW Object factories create
    either of these.

    Some contraints exist however on the factory IDL interface to enable
    automatic handling of Named objects by CDMW-generated lifecycle frameworks.

    A programming language-specific servant provider interface or abstract class
    will be generated for CORBA objects activation/deactivation.

    A component home may not need a servant provider.

    idl-interface and idl-filename are resepectively the IDL interface of the
    factory/home and the IDL filename containing the definition.

    idl-search-dir will be used to locate any idl file included by idl-filename.
-->
<!ATTLIST factory
   kind (NAMED | ANONYMOUS | HOME) #REQUIRED
   idl-interface ID #REQUIRED
   idl-filename CDATA #IMPLIED>

<!--
    A programming language-specific interface or abstract class responsible for
    providing servants for lifecycle frameworks.
-->
<!ELEMENT servant-provider EMPTY>

<!-- 
    classname, directory, and filename are respectively the classname of the
    servant provider, the directory where the filename will be generated.
-->
<!ATTLIST servant-provider
   classname CDATA #REQUIRED
   directory CDATA #IMPLIED
   filename CDATA #IMPLIED>

<!ELEMENT idl-search-dir (#PCDATA)>

<!ELEMENT preprocessing-flags (#PCDATA)>

<!-- 
    CDMW may generated datastore initialisation for replication data
-->
<!ELEMENT datastore-types (datastore-type*)>

<!--
    datastore-type will provide interface to all the state replication.
    it is unique for an oid and a data type

    idl-search-dir will be used to locate any idl file included by idl-filename.
-->
<!ELEMENT datastore-type (idl-search-dir*)>

<!--
    the typename is the typedef of the datastore-type for the specific oid/data
    the oid-type is the repository id of the oid object
    the data-type is the repository id of the data object
    the idl-filename is the file which contain the repository id for the oid 
                     and the data. it is optional if the type is just simple corba type
-->
<!ATTLIST datastore-type
    typename ID #REQUIRED
    oid-type CDATA #REQUIRED
    data-type CDATA #REQUIRED
    idl-filename CDATA #IMPLIED
    filename CDATA #IMPLIED>


<!-- 
    CDMW may generated frameworks for object lifecycle management.
-->
<!ELEMENT lifecycle-frameworks (lifecycle-framework*)>

<!--
    Lifecycle framework will provide an object factory for object creation and
    a set of classes/objects for objects activation and deactivation. 
-->
<!ELEMENT lifecycle-framework (factory-impl |
                               home-impl |
                               user-factory-impl)>
<!ATTLIST lifecycle-framework
   id ID #REQUIRED
   factory-idref IDREF #REQUIRED>

<!ENTITY % categories 'ENTITY | SESSION | SERVICE'>

<!ENTITY % threading.type 'SERIALIZE | MULTITHREAD'>

<!-- 
    factory-impl are CDMW-generated lifecycle frameworks for Named objects and 
    Anonymous object factories.

    Servant provider allocators are needed for instantiating a servant provider 
    instance for the framework.
-->
<!ELEMENT factory-impl (servant-provider-allocator)>

<!-- 
    Users shall provide a strategy/category for the lifecycle framework,
    a classname for the object factory implementation, a filename and
    a directory holding the class together with a threading policy.
-->
<!ATTLIST factory-impl
   category (%categories; | UNMANAGED_ENTITY) #REQUIRED
   classname CDATA #REQUIRED
   directory CDATA #IMPLIED
   filename CDATA #IMPLIED
   threading (%threading.type;) #REQUIRED>

<!-- 
    Will generate a component implementation framework following the CCM's
    standard language mapping. This framework is specific to the container and
    will be instantiated during component homes installation within CDMW
    containers.

    An extention to component CCD's <corbacomponent> element will be added when
    classname is provided by the user to enable the CDMW container home
    installation as in the following example:
            <corbacomponent>
                ....
                <extension CLASS='HOME_SERVANT_CLASSNAME' ORIGIN='Cdmw'>
                    classname
                </extension>
            </corbacomponent>

    NOTA: CIDL-based implementation frameworks will rather provide skeletons for
    component implementations and will not depend on the generated home-impl
    framework.
-->
<!ELEMENT home-impl EMPTY>
<!ATTLIST home-impl
   category (%categories; | PROCESS) #REQUIRED
   directory CDATA #IMPLIED
   threading (%threading.type;) #FIXED "MULTITHREAD"
   segmented ( yes | no ) #IMPLIED>

<!-- 
    User defined factories will be provided by users and no lifecycle framework
    is generated a part from necessary init and cleanup code within CDMW servers.

    NOTE that a classname is not needed as only a factory allocator is needed by
    CDMW frameworks installers.
-->
<!ELEMENT user-factory-impl (factory-allocator)>
<!ATTLIST user-factory-impl
   threading (%threading.type;) #REQUIRED>

<!-- 
    A servant provider allocator is provided by a user in order to allocate
    a servant provider instance for the lifecycle framework.
-->
<!ELEMENT servant-provider-allocator EMPTY>
<!ATTLIST servant-provider-allocator
   classname CDATA #REQUIRED
   filename CDATA #IMPLIED
>

<!-- 
    A user-provider factory allocator is needed by CDMW to install the
    user-defined lifecycle framework.
-->
<!ELEMENT factory-allocator EMPTY>
<!ATTLIST factory-allocator
   classname ID #REQUIRED
   filename CDATA #IMPLIED
>

<!ELEMENT programs (program*)>

<!-- 
    Program represent executables where CDMW services are placed/deployed.

    CDMW-specific code will be generated for initialising embedded CDMW services
    (and frameworks).

    A program-specific DTD file is generated to validate XML documentsfor use
    during initialisation of the CDMW services within the process.
-->
<!ELEMENT program (services)>

<!-- 
    filename (and classname for Java) will code initialisation code to be
    compiled and linked with the executable.

    init-dtd is a template for process-specific initialisation data.
-->
<!ATTLIST program
   classname ID #IMPLIED
   directory CDATA #IMPLIED
   filename CDATA #REQUIRED
   init-dtd CDATA #REQUIRED
>

<!-- 
    Define all CDMW services to be embedded within the executable.
-->
<!ELEMENT services (repository-interface,
                    performance?,
                    trace?,
                    time?,
                    fault-tolerance?,
                    lifecycle?)>

<!ELEMENT repository-interface EMPTY>

<!ELEMENT performance EMPTY>

<!ELEMENT trace EMPTY>

<!ELEMENT fault-tolerance (datastores?)>

<!ATTLIST fault-tolerance
    server ( yes | no ) #IMPLIED
    reply-logging ( yes | no ) #IMPLIED>

<!ELEMENT datastores (datastore+)>
<!ATTLIST datastores 
    kind ( IIOP | MIOP ) #REQUIRED>

<!--
    the idref reference the typename of the specific datastore-type
    the kind is the protocol used to transfert data between datastore
    the occurrences is the number of datastore for the specific type, used in the process
-->
<!ELEMENT datastore EMPTY>
<!ATTLIST datastore
    idref IDREF #REQUIRED
    occurrences CDATA #REQUIRED>

<!ELEMENT time EMPTY>

<!ELEMENT lifecycle (framework+)>

<!ELEMENT framework EMPTY>

<!-- 
    idref refers to a lifecycle-framework element and occurrences will hold the
    number of instantiations of the framework within the process.
-->
<!ATTLIST framework
   idref IDREF #REQUIRED
   occurrences CDATA #REQUIRED>



/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI. It is derivative work based on PERCO Copyright (C) THALES
 * 2000-2003. All rights reserved.
 * 
 * Copyright (C) THALES 2004-2005. All rights reserved
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Library General Public License as published
 * by the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General Public
 * License along with CARDAMOM; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */


#ifndef _COS_TIMER_EVENT_IDL_
#define _COS_TIMER_EVENT_IDL_

#ifdef _ORBRIVER_ADA_
#undef _ORBRIVER_ADA_
#endif 

#include <CosTime.idl>
#include <CosEventComm.idl>

#pragma prefix "omg.org"

module CosTimerEvent{
    
     // typePrefix CosTimerEvent "omg.org";
    
     enum TimeType {
          TTAbsolute,
          TTRelative,
          TTPeriodic
     };

     enum EventStatus {
          ESTimeSet,                
          ESTimeCleared,
          ESTriggered,                
          ESFailedTrigger
     };

     struct TimerEventT {
          TimeBase::UtcT            utc;
          any          event_data;
     };

     interface TimerEventHandler {
          
          readonly attribute EventStatus status;
          
          boolean time_set(
              out CosTime::UTO    uto);    
          
          void SetTimer(
              in TimeType    time_type,
              in CosTime::UTO trigger_time);
        
       boolean cancel_timer();
       
       void set_data( in any    event_data);
  };

     interface TimerEventService {
          
          TimerEventHandler register(
               in CosEventComm::PushConsumer event_interface,
               in any data);
          
          void unregister( in TimerEventHandler     timer_event_handler );
          CosTime::UTO event_time( in TimerEventT        timer_event );
     };    
};
#endif // _COS_TIMER_EVENT_IDL_



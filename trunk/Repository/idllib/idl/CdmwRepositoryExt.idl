/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI. It is derivative work based on PERCO Copyright (C) THALES
 * 2000-2003. All rights reserved.
 * 
 * Copyright (C) THALES 2004-2005. All rights reserved
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Library General Public License as published
 * by the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General Public
 * License along with CARDAMOM; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */


#ifndef CDMW_NAMING_AND_REPOSITORY_REPOSITORY_EXT_IDL_
#define CDMW_NAMING_AND_REPOSITORY_REPOSITORY_EXT_IDL_

#include <CdmwNamingAndRepository.idl>

#pragma prefix "thalesgroup.com"

/**
* This module describes interfaces and data types of the CDMW
* Naming and Repository service.
*/
module CdmwNamingAndRepository {

    /** 
    * Identifier the repository group rerence is stored with at FT-Manager
    */
    const string SIMPLE_REPOSITORY_ID = "SimpleRepository"; // FIXME type

    /** 
    * Identifier the repository group rerence is stored with at FT-Manager
    */
    const string REPOSITORY_GROUP_ID = "RepositoryGroup"; // FIXME type

    /** 
    * Identifier the factory group rerence is stored with at FT-Manager
    */
    const string FACTORY_FINDER_GROUP_ID = "FactoryFinderGroup"; 

     /** 
    * Identifier the root naling context group rerence is stored with
    * at FT-Manager
    */
    const string DEFAULT_ROOT_CONTEXT_GROUP_ID = "DefaultRootContextGroup"; 

    /** 
    * Identifier the admin root context group rerence is stored with
    * at FT-Manager
    */
    const string ADMIN_ROOT_CONTEXT_GROUP_ID = "AdminRootContextGroup"; 
    
    /** 
    * Identifier of the Admin Root naming context
    */
    const RootContextId ADMIN_ROOT_CONTEXT = "AdminRootContext";


    /** 
    * Description of a Root Context with the Naming and Repository service
    */
    struct RootContextDecription
    {
        /**
         * Identifier of the RootContext
         */
        RootContextId            id;
        
        /**
         * Object reference of the RootContext
         */
        CosNaming::NamingContext root;
    };

    typedef sequence<RootContextDecription> RootContextDecriptionSeq;

    
    /** 
    * The RepositoryExt interface extends the Repository inteface by providing a NameDomain
    * interface and extra operations for managing NameDomains and retreiving information
    * on extsting root contexts.
    * NOTA: RepositoryExt operations inherited from NameDomain interface allow use of
    * compound names such as in std CosNaming::NamingContext objects.
    */
    interface RepositoryExt : Repository, NameDomain {

        // Exceptions

        /** 
        * Exception to be raised whenever there is an attempt to remove a name domain
        * still having registrations of objects, factories, and name domains
        */
        exception NotEmpty {};
    
        
        /**
        * This operation retrieves descriptions of all root contexts hosted by
        * the NamingAndRepository server..
        *
        * @return A sequence of RootContextDescriptions.
        */
        RootContextDecriptionSeq get_root_context();


        /**
        * This operation defines a NameDomain object with the given <i>domain_name</i>.
        *
        * @param domain_name The full name of the name domain.
        *
        * @return The name domain object.
        *
        * @exception AlreadyExists if <i>domain_name</i> refers to an existing Name Domain.
        * @exception InvalidName if the name has an illegal form.
        */
        NameDomain define_name_domain (in Key domain_name)
            raises (NameDomain::AlreadyExists, InvalidName);


        /**
        * This operation removes the name domain with the given <i>domain_name</i>.
        *
        * @param domain_name The full name of the name domain.
        *
        * @exception NoNameDomain if <i>domain_name</i> does not refer to a Name Domain.
        * @exception InvalidName if the name has an illegal form.
        * @exception NotEmpty if the name domain contains object, factory, and name domain
        * registrations.
        */
        void remove_name_domain (in Key domain_name)
            raises (NoNameDomain, InvalidName, NotEmpty);
    };
}; 

#endif // CDMW_NAMING_AND_REPOSITORY_REPOSITORY_EXT_IDL_


#* =========================================================================== *
#* This file is part of CARDAMOM (R) which is jointly developed by THALES
#* and SELEX-SI.
#*
#* It is derivative work based on PERCO Copyright (C) THALES 2000-2003.
#* All rights reserved.
#* 
#* CARDAMOM is free software; you can redistribute it and/or modify it under
#* the terms of the GNU Library General Public License as published by the
#* Free Software Foundation; either version 2 of the License, or (at your
#* option) any later version.
#* 
#* CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
#* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#* FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
#* License for more details.
#* 
#* You should have received a copy of the GNU Library General
#* Public License along with CARDAMOM; see the file COPYING. If not, write to
#* the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#* =========================================================================== *

Welcome to the CARDAMOM TUTORIAL Version 2.0
============================================

The purpose of CARDAMOM Tutorial is to provide comprehensive examples for writing
software based on CARDAMOM runtime middleware. Provided Makefiles may be reused
to write more sofisticated ones that suit needs of CARDAMOM users.

Note
====

This tutorial is designed to be used with Version 1.1 of Cardamom

------------------------------------------------------------------------------------

First of all, configure the tutorial environment:
  > ./configure.sh

To execute a Tutorial :
  execute "make" to generate executable
  > cd hello
  > make
  
  then go to "run" directory of example and type "start.sh" to run example
  > cd run
  > start.sh

  To perform deployment operations (install, building assembly etc.) deployment tool is started
  For each ccm example, the appropriate operations are listed in the following files  
  - ccm_integration_commands.txt 
  - ccm_stop_command.txt 
  located under the /run directory. 


CONTENT:
=======
JacORB20.mk   : ORBacus/Java 4.x configuration file
README_CCM.txt: This file
config.mk : CDMW configuration file for use by tutorial makefiles
configure.sh  : Shell script to generate site.mk file
site.mk       : Configuration file used by tutorial makefiles (generated file)


For each tutorial subdirectory :

    Makefile      : Global makefile
    data/         : Contains XML data files for starting tutorial programs
    idl/          : Contains 'user-provided' IDL files
    run/          : Contains scripts for starting tutorial programs
    src/          : Contains 'user-provided' source files
    xml/          : Contains 'user-provided' XML data files for CDMW codegeneration

    The following directories are created by the global makefile
    generated/    : Contains CDMW generated files
    host-type/    : Build directory
                    => i686-pc-linux-gnu/
                       Contains .java generated by the idl compiler
                                .class and .jar




examples :

ccm010              : basic component without facet and event
ccm020              : facet delegation
ccm030              : facet inheritance
ccm040              : facet component support
ccm050              : event publisher
ccm060              : event emitter
ccm070              : event with value type method
ccm080              : attributes (.cpf files)

ccm110              : facet deconnection/connection 
                      (repository interface and naming service usage)
ccm120              : facet deconnection/connection 
                      (receptacle connection to naming service 
                       => CosNaming.idl include in Hello.idl file)
ccm130              : event connection 
                      (repository interface and naming service usage)
ccm140              : component creation and connection (naming service usage)
ccm210              : several receptacles on one facet
ccm220              : several consumers
ccm230              : client calls server facet which sends event to client
ccm240              : client calls server facet which sends event to client with thread
ccm_philosophers    : philosophers test




ccm00-1  -> ccm010  : basic component without facet and event
ccm00-2  -> ccm040  : facet component support (void return problem)
ccm00-2a            : facet component support (string return)
ccm0     -> ccm020  : facet delegation
ccm1     -> ccm030  : facet inheritance
ccm2     -> ccm050  : event publisher
ccm2-1   -> ccm060  : event emitter
ccm2-2   -> ccm070  : event with value type method
ccm3     -> ccm080  : attributes (.cpf files)

ccm4     -> ccm110  : facet deconnection/connection 
                      (repository interface and naming service usage)
ccm4a    -> ccm120  : facet deconnection/connection 
                      (receptacle connection to naming service 
                       => CosNaming.idl include problem in Hello.idl file)
ccm5     -> ccm130  : event connection 
                      (repository interface and naming service usage)
ccm6     -> ccm140  : component creation and connection (naming service usage)
ccm7     -> ccm210  : several receptacles on one facet
ccm8     -> ccm220  : several consumers
ccm9     -> ccm230  : client calls server facet which sends event to client
ccm9a    -> ccm240  : client calls server facet which sends event to client with thread
ccm_philosophers    : philosophers test



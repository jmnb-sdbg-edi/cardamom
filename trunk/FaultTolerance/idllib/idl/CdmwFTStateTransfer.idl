/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI. It is derivative work based on PERCO Copyright (C) THALES
 * 2000-2003. All rights reserved.
 * 
 * Copyright (C) THALES 2004-2005. All rights reserved
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Library General Public License as published
 * by the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General Public
 * License along with CARDAMOM; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */


#ifndef _CDMW_FT_STATE_TRANSFER_IDL_
#define _CDMW_FT_STATE_TRANSFER_IDL_

#include <CdmwFTTPCCoordinator.idl>
#include <CdmwFTTPCCohort.idl>

#pragma prefix "thalesgroup.com"

/**
* This module describes interfaces and data types of the CDMW Fault Tolerance
* service.
*/
module CdmwFT {
/**
* This module describes data types needed for FT State Transfer.
*/
module StateTransfer {
              
    /**
    * Sequence of DataStoreID.
    */
    typedef sequence<CdmwFT::Transaction::DataStoreID> DataStoreIDs;
  

    /**
    * Exception thrown if target DataStore is not in the expected state 
    * (coordinator/cohort) 
    */
    exception  InvalidDataStoreState {
    };

    /**
    * The RecordIterator interfaces provides a mechamism to copy the state
    * of a DataStore. Changes may be occuring to the DataStore during the
    * copying process.
    */
    interface RecordIterator
    {
        /**
         * Obtains at most the requested number of StateChanges.
         *
         * @param how_many the maximum number of records to return.
         *
         * @param changes the StateChanges.
         *
         * @return true if more records are available.
         */
        boolean next_n(in unsigned long how_many,
                       out CdmwFT::Transaction::StateChanges changes);

        /**
         * Destroys the iterator. Indicates the new backup has applied
         * all of the changes.
         */
        void destroy ();
    };

    /*
    * The DataStoreGroup interface allows a group of cohort data
    * stores to update themselves with the coordinator data stores.
    */
    interface DataStoreGroup
    {   
        /**
        * Returns an iterator that provides state information necessary to copy
        * a DataStore.
        *
        * @param from_location is the name of the location asking the records.
        *
        * @exception InvalidDataStoreState is raised if the data store is not the 
        * coordinator
        */
        RecordIterator get_record_iterator(in string from_location,
                                           in DataStoreIDs datastore_ids,
                                           in CdmwFT::Transaction::TPCCoordinator coordinator,
                                           in CdmwFT::Transaction::TPCCohort cohort)
           raises (InvalidDataStoreState);

    };

    /** 
    * This structure holds informations used 
    * by point-to-point state transfer for a DataStore for 
    * a given location.
    */
    struct LocalDataStoreInfo {
             
        /**
         * Identifiers of the DataStores associated with this
         * transaction engine.
         */
        DataStoreIDs dsids;
        
        /**
         * Reference to Coordinator object for the Datastore
         */
        CdmwFT::Transaction::TPCCoordinator coordinator;
        
        /**
         * Reference to Cohort object for the Datastore
         */
        CdmwFT::Transaction::TPCCohort cohort;
        
        /**
         * Reference to local DataStore object
         */
        CdmwFT::StateTransfer::DataStoreGroup local_data_store;
                 
    }; // LocalDataStoreInfo

    /**
     * Sequence of LocalDataStoreInfo structures.
     */
    typedef sequence<LocalDataStoreInfo> LocalDataStoreInfos;
    
    /** 
     * This structure holds informations used 
     * by point-to-point state transfer for a DataStore.
     */
    struct DataStoreInfo {
    
        /**
         * Identifier of the DataStores
         */ 
        FT::Location the_location;
         
        LocalDataStoreInfos  local_data_store_infos;
        
    }; // DataStoreInfo

    /**
    * Sequence of DataStoreInfo structures.
    */
    typedef sequence<DataStoreInfo> DataStoreInfos;


    
}; // end module StateTransfer
}; // end module CdmwFT

#endif // _CDMW_FT_STATE_TRANSFER_IDL_


/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI. It is derivative work based on PERCO Copyright (C) THALES
 * 2000-2003. All rights reserved.
 * 
 * Copyright (C) THALES 2004-2005. All rights reserved
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Library General Public License as published
 * by the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General Public
 * License along with CARDAMOM; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */


#ifndef _CDMW_FT_TPCCOMMON_IDL_
#define _CDMW_FT_TPCCOMMON_IDL_


#include <FT.idl>
#pragma prefix "thalesgroup.com"

/**
* This module describes interfaces and data types of the CDMW Fault Tolerance
* service.
*/
module CdmwFT {
    
  /**
   * This module describes interfaces and data types for transactions 
   * between coordinator and cohorts
   */
  module Transaction
  {

    typedef unsigned long TransactionIdentifier;
    typedef string TransactionInitiator;
    typedef string TransactionSender;
    

    /**
     * Transaction Identification to identify the commit operation
     */
    struct TransactionIdentification 
    {
        TransactionIdentifier id;
        
        TransactionInitiator initiator;
    };


    enum TransactionStatus
    {
        UNKNOWN,
        PREPARED,
        COMMITTED,
        ABORTED
    };

    /**
    * Enumeration of types of changes for transfering state to a new backup 
    */
    enum StateChangeKind { DS_INSERTION, DS_UPDATE, DS_REMOVAL };

    /**
    * Union for transfering state data to a new backup
    */
    union StateChangeData switch(StateChangeKind)
    {
        case DS_INSERTION:
        case DS_UPDATE:
           CORBA::OctetSeq data_seq;
    };

    /**
    * Sequence and structure for transfering state data to a new backup
    */
    struct StateChangeRecord
    {
        CORBA::OctetSeq oid_seq;
        StateChangeData change_data;
    };

    typedef sequence<StateChangeRecord> StateChangeRecords;

    /**
     * Type of a DataStore identifier
     */
    typedef unsigned long DataStoreID;

    /**
     * Structure with all state changes to be transfered to a backup DataStore
     */
    struct StateChange
    {
        DataStoreID dsid;
        StateChangeRecords records;
    };

    interface TPCBase
    {
        /**
         * question to get the status 
         */
        oneway void send_get_transaction_status(in TransactionIdentification id);
        
        /**
         * answer to set the status
         */
        oneway void send_set_transaction_status(in TransactionSender sender, in TransactionIdentification id, in TransactionStatus status);

        /**
         * question to get the status 
         */
        TransactionStatus get_transaction_status(inout TransactionIdentification id, out TransactionSender sender);
        
        /**
         * answer to set the status
         */
/*
        void set_transaction_status(in TransactionStatus status, inout TransactionSender sender, inout TransactionIdentification id);
*/
    };
    
  }; // End of namespace Transaction

}; // End of namespace CdmwFT
#endif // _CDMW_FT_TPCCOMMON_IDL_

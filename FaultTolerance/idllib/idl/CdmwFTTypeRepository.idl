/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI. It is derivative work based on PERCO Copyright (C) THALES
 * 2000-2003. All rights reserved.
 * 
 * Copyright (C) THALES 2004-2005. All rights reserved
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Library General Public License as published
 * by the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General Public
 * License along with CARDAMOM; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */


#ifndef __CDMW_FT_TYPE_REPOSITORY_IDL__
#define __CDMW_FT_TYPE_REPOSITORY_IDL__


#pragma prefix "thalesgroup.com"

/**
* This module describes interfaces and data types of the CDMW Fault Tolerance
* service.
*/
module CdmwFT {
        
    /** 
    * The TypeRepository is a local object providing access to a minimal type 
    * repository for checking interface inheritence and others...
    * <p>NOTA: Applications can retrieve its object reference by calling
    *  ORB::resolve_initial_references("FTTypeRepository").
    */
    local interface TypeRepository
    {
        /**
        * This exception is raised whenever a type is not present in the type
        * repository.
        */
        exception TypeNotFound {};

        /**
        * This operation checks whether a given interface have another interface 
        * as a base interaface.
        *
        * @param type_id  The repository id of the reference interface.
        * @param base_type_id  The repository id of the second interface to check if
        * it is a base interface of the reference one.
        *
        * @return <b>True</b> if the interface with <i>type_id</i> inherits from
        * interface with <i>base_type_id</i>. <b>False</b> otherwise.
        *
        * @exception TypeNotFound Raised when <i>type_id</i> is not in the Type
        * repository.
        */
        boolean has_base_interface(in string type_id, in string base_type_id)
	         raises (TypeNotFound);
    };
    
}; // CdmwFT

#endif // __CDMW_FT_TYPE_REPOSITORY_IDL__


/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI. It is derivative work based on PERCO Copyright (C) THALES
 * 2000-2003. All rights reserved.
 * 
 * Copyright (C) THALES 2004-2005. All rights reserved
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Library General Public License as published
 * by the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General Public
 * License along with CARDAMOM; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */


#ifndef __CDMW_FT_STATEFULL_PRIMARY_BACKUP_ADMIN_IDL__
#define __CDMW_FT_STATEFULL_PRIMARY_BACKUP_ADMIN_IDL__

#include <CdmwFTCommon.idl>
#include <CdmwFTMembersAdmin.idl>
#include <CdmwFTStateTransfer.idl>

#pragma prefix "thalesgroup.com"

/**
* This module describes interfaces and data types of the CDMW Fault Tolerance
* service.
*/
module CdmwFT {
/**
* This module describes local interfaces and data types available for
* a CDMW location (process).
*/
module Location {
    
   /**
    * Exception thrown if a DataStoreID is not known 
    */
    exception UnknownDataStoreID {
        CdmwFT::Transaction::DataStoreID dsid;
    };
    
   /**
    * Exception thrown if the initialisation process failed
    */
    exception InitFailed {
        string  reason;
    }; 
    
    /**
    * Exception thrown if the object is already initialised.
    */
    exception AlreadyDone {
    };
    
   /**
    * This structure holds comprehensive information for an object group and 
    * all needed information of its associated datastore.
    */
    struct StatefullGroupInfo {
        CdmwFT::GroupInfo              group_info;
        StateTransfer::DataStoreInfos  data_store_infos;
    };
    
   /**
    * Sequence of StatefullGroupInfo structures
    */
    typedef sequence<StatefullGroupInfo> StatefullGroupInfos;
    
   /** 
    * The StatusTransfertAdmin object manages local datastore information.
    * It represents a location for the CDMW ReplicationManager and is
    * notified there is a group view change with associated datastore 
    * (a change of object group members).
    * The meaning of a view is the same as in the virtual synchrony (Isis & co).
    */
    interface StatefullPrimaryBackupAdmin : Location::PrimaryBackupAdmin
    {
           
       /**
        * Updates the view of the specified object group with associated datastore. 
        *
        * @param statefull_group_infos contains a list of group information with their 
        * associated datastores. Group information remains of all the informations 
        * about the object group (id, ref, version, member locations).
        * Data store informations contains all the informations on datastores of that 
        * group (location, id, refs)
        *
        * @exception FT::ObjectGroupNotFound if the object group cannot be
        * found.
        * @exception UnknownDataStoreID raises if a specified data store 
        * doesn't exist in this location.
		  * @exception StateTransfer::InvalidDataStoreState if the datastore is not 
		  * initialised.
        */
        void update_statefull_group_view(
                        in StatefullGroupInfos  statefull_group_infos)
            raises(FT::ObjectGroupNotFound, 
						 UnknownDataStoreID, 
						 StateTransfer::InvalidDataStoreState);
            
        /**
        * Updates the view of the specified object group following a change
        * of the primary location.
        *
        * @param statefull_group_infos contains a list of group information with their 
        * associated datastores. Group information remains of all the informations 
        * about the object group (id, ref, version, member locations).
        * Data store informations contains all the informations on datastores of that 
        * group (location, id, refs)
        * @param primary_location Location of the primary member.
        *
        * @exception FT::ObjectGroupNotFound if the object group cannot be
        * found.
        * @exception FT::UnknownDataStoreID raises if the specified data store 
        * doesn't exist in this location.
		  * @exception StateTransfer::InvalidDataStoreState if the datastore is not 
		  * initialised.
        */
        void update_statefull_primary(
                        in StatefullGroupInfos  statefull_group_infos,
                        in FT::Location         primary_location)
            raises(FT::ObjectGroupNotFound, 
						 UnknownDataStoreID, 
						 StateTransfer::InvalidDataStoreState);
            
        /**
        * Init a new inserted backup member with the content of the primary 
        * datastore.
        *
        * @param local_data_store_infos contains all the informations on datastores
        * of that group on that location (id, ref).
        */
      void init_backup_data_stores(in StateTransfer::DataStoreInfo  primary_data_store_infos)
            raises(InitFailed, AlreadyDone);
          
        /**
        * Init all data stores of a new inserted member from a stable storage.
        *
        * @param local_data_store_infos contains all the informations on datastores
        * of that group on that location (id, ref).
        * 
        */
      void init_primary_data_stores(in StateTransfer::LocalDataStoreInfos  local_datastore_info)
             raises(InitFailed, AlreadyDone);
         
        /**
        * Advises the Primary location manager a failure appends when inserting a 
        * new backup.
        *
        * @param failed_location the name of the failed location embedding the new
        * backup
        * @param data_store_infos contains all the informations on datastores
        * of that group (location, id, ref)
        *
        */
        void handle_backup_insertion_failure(in ::FT::Location  failed_location);
                                    
        
    };
    
};  // StateTransfer
};  // CdmwFT

#endif // __CDMW_FT_STATEFULL_PRIMARY_BACKUP_ADMIN_IDL__

/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI. It is derivative work based on PERCO Copyright (C) THALES
 * 2000-2003. All rights reserved.
 * 
 * Copyright (C) THALES 2004-2005. All rights reserved
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Library General Public License as published
 * by the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General Public
 * License along with CARDAMOM; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */


#ifndef _CDMW_FT_MANAGER_IDL_
#define _CDMW_FT_MANAGER_IDL_

#include <CdmwFTReplicationManager.idl>
#include <CdmwFTMembersAdmin.idl>
#include <CdmwFTStateTransfer.idl>

#pragma prefix "thalesgroup.com"

/**
* This module describes interfaces and data types of the CDMW Fault Tolerance
* service.
*/
module CdmwFT { 

    interface FTManager;

    enum FaultManagerObject
    {
      FAULT_DETECTOR,
      FAULT_NOTIFIER,
      REPLICATION_MANAGER
    };

    struct FTManagerObjects
    {
        FT::FaultNotifier fault_notifier;
        CdmwFT::FaultManagement::FaultDetector fault_detector;
        CdmwFT::ReplicationManager replication_manager;
        CdmwFT::FTManager ft_manager;
        CdmwFT::StateTransfer::LocalDataStoreInfo local_data_store_info;
    };


	struct IOGRInfo
	{
		FT::ObjectGroup replication_manager;
		FT::ObjectGroup fault_notifier;
		FT::ObjectGroup fault_detector;
		FT::ObjectGroupRefVersion version;
		FT::Location the_location;
	};

  typedef sequence<string> LocationList;

  interface FTManager
    { 


        exception NoAlreadyActivated {};
        exception AlreadyActivated {};
        /**
         * Returns the fault notifier of the fault manager.
         *
         * @return Fault Notifier object.
         *
         * @exception FT::InterfaceNotFound if the object is nil.
         */	
        FT::FaultNotifier get_fault_notifier()
            raises (FT::ObjectGroupNotFound);
	  
        /**
         * Returns the fault detector of the fault manager.
         *
         * @return Fault detector object.
         *
         * @exception FT::InterfaceNotFound if the object is nil.
         */	
        CdmwFT::FaultManagement::FaultDetector get_fault_detector()
            raises (FT::ObjectGroupNotFound);
	  
        /**
         * Returns the replication manager of the fault manager.
         *
         * @return Replication Manager object.
         *
         * @exception FT::InterfaceNotFound if the object is nil.
         */	  
        CdmwFT::ReplicationManager get_replication_manager()
            raises (FT::ObjectGroupNotFound);

        /**
         * Returns the objects group of the FTManager 
         *
         * @return FTManagerObjects
         *
         * @exception FT::ObjectGroupNotFound if the object group doesn't exist
         */        
        FTManagerObjects get_FTManager_objects(in string master_location,
                                               in StateTransfer::DataStoreGroup datastores,
                                               in LocationList locations)
            raises(::FT::InterfaceNotFound);	

        /**
         * Returns the objects group for the object group _id
         *
         * @return ObjectGroup
         *
         * @exception FT::ObjectGroupNotFound if the object group doesn't exist
         */        
		Object get_object_group(in FT::ObjectGroupId id)
			raises(FT::ObjectGroupNotFound);

         /**
         * Returns the objects group version for the object group _id
         *
         * @return ::FT::ObjectGroupRefVersion
         *
         * @exception FT::ObjectGroupNotFound if the object group doesn't exist
         */ 
        FT::ObjectGroupRefVersion get_object_group_version(in FT::ObjectGroupId id)
 			raises(FT::ObjectGroupNotFound);


        /**
         * return true if the ftmanager is activated
         *
         * @return bool
         *
         **/
        boolean is_activated();

        /**
         * dump data store for the specific object
         */
        void dump_datastore(in FaultManagerObject obj );

    };
};

#endif // _CDMW_FT_MANAGER_IDL_


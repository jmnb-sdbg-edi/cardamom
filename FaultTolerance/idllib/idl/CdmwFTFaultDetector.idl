/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI. It is derivative work based on PERCO Copyright (C) THALES
 * 2000-2003. All rights reserved.
 * 
 * Copyright (C) THALES 2004-2005. All rights reserved
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Library General Public License as published
 * by the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General Public
 * License along with CARDAMOM; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */


#ifndef __CDMW_FT_FAULT_DETECTOR_IDL__
#define __CDMW_FT_FAULT_DETECTOR_IDL__

#include <CdmwFTCommon.idl>

#pragma prefix "thalesgroup.com"

/**
* This module describes interfaces and data types of the CDMW Fault Tolerance
* service.
*/
module CdmwFT {
/**
* This module describes interfaces and data types of the CDMW Fault Management
* (Fault Detector)
*/
module FaultManagement 
{
    /**
     * Monitoring Identifier for use for stopping monitoring of a Monitorable
     * object.
     */
    typedef unsigned long MonitoringId;
    /** 
    * Exception indicating that the monitoring identifier is invalid.
    * This means it is not generated by this fault detector.
    */
    exception InvalidMonitoringId {};

    /** 
    * This is a base interface for all CDMW Fault Detectors.
    */
    interface FaultDetector : ::FT::PullMonitorable
    {
        
        /**
        * This operation initiates monitoring of a monitorable object in
        * specific location with specific interval and timeout values.
        *
        * @param monitorable_object Object to be monitored.
        * @param location Location of the monitorable object. This allows a use
        * of hierarchy of fault detectors.
        * @param timeout Interval and Timeout values for the monitoring.
        *
        * @return a Handler Identifier for use for any subsequent unregistration.
        *
        * @exception FT::ObjectNotFound Raised when there is no monitorable_object in
        * the given location.
        */
        MonitoringId start_monitoring(
            in ::FT::PullMonitorable                        monitorable_object,
            in ::FT::Location                               location,
            in ::FT::FaultMonitoringIntervalAndTimeoutValue timeout)
            raises (FT::ObjectNotFound);
        /**
        * This operation stops the monitoring of a monitorable object.
        *
        * @param monitoring_id Previously allocated monitoring identifier.
        *
        * @exception InvalidMonitoringId Raised when monitoring_id is not generated
        * by this fault detector.
        */
        void stop_monitoring(in MonitoringId monitoring_id)
            raises (InvalidMonitoringId);

        /**
         * set the fault notifier
         **/
        void set_fault_notifier( in ::FT::FaultNotifier fault_notifier );
    };
}; // End of namespace FaultManagement
}; // End of namespace CdmwFT
#endif // __CDMW_FT_FAULT_DETECTOR_IDL__


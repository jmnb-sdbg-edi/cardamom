/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI. It is derivative work based on PERCO Copyright (C) THALES
 * 2000-2003. All rights reserved.
 * 
 * Copyright (C) THALES 2004-2005. All rights reserved
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Library General Public License as published
 * by the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General Public
 * License along with CARDAMOM; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */

#ifndef _CdmwFTMonitoring_IDL
#define _CdmwFTMonitoring_IDL

#pragma prefix "thalesgroup.com"

/**
 * This module describes interfaces and data types of the Monitoring Library.
 */
module CdmwFT {
module MonitoringLibrary {
    /**
     * Location of monitorable entities. This may be the hostname where the
     * monitorable entity is running.
     */  
    typedef string Location;
    
    /**
     * A sequence of Locations.
     */ 
    typedef sequence<Location> Locations;
    
    /**
     * Interface to be supported by entities willing to be notified
     * of failure and creation of locations.
     */ 
    local interface MonitoringObserver {
        /**
         * Callback operation to report that <i>the_location</i> has failed.
         * @param the_location The location of the failed location
         */ 
        void on_failure (in Location the_location);
        /**
         * Callback operation to report that <i>the_location</i> is started.
         * @param the_location The location of the started location
         */ 
        void on_start (in Location the_location);
   };

    /**
    * Exception indicating that monitoring has already been started
    */
    exception AlreadyStarted {};
    
    /**
    * Exception indicating that monitoring has not been started
    */
    exception NotStarted{};
    
    /**
    * Exception to be raised whenever an object doesn't exist.
    */
    exception NotFound {};
    
    /** 
    * Exception to be raised whenever there is an attempt to add/register 
    * already added/registered entities.
    */
    exception AlreadyExists{};

    /**
     * Exception indicating the set of locations is not empty.
     */
    exception NotEmpty {};
    
    /**
     * Interface of the entity responsible for monitoring locations
     * in order to detect their failure.
     */ 
    local interface Monitoring {        
        /**
         * Enables monitoring of registered locations
         *
         * @exception AlreadyStarted Raised if monitoring was already started
         */ 
        void start_monitoring()
            raises (AlreadyStarted);
        
        /**
         * Disables previous monitoring
         *
         * @exception NotStarted Raised if monitoring was not running
         */ 
        void stop_monitoring()
            raises (NotStarted);
    };
};
};
#endif 

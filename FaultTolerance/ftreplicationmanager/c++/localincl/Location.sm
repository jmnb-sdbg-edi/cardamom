// =====================================================================
// This file is part of CARDAMOM (R) which is jointly developed by THALES
// and SELEX-SI. It is derivative work based on PERCO Copyright (C) THALES
// 2000-2003. All rights reserved.
// 
// Copyright (C) THALES 2004-2005. All rights reserved
// 
// CARDAMOM is free software; you can redistribute it and/or modify it
// under the terms of the GNU Library General Public License as published
// by the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
// 
// CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
// License for more details.
// 
// You should have received a copy of the GNU Library General Public
// License along with CARDAMOM; see the file COPYING. If not, write to the
// Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
// =====================================================================
// -*- tab-width: 4; -*-

%{
#include <stdlib.h>
#include <iostream>
#include "ftreplicationmanager/ObjectGroup.hpp"
#include "ftreplicationmanager/Object.hpp"
#include "ftreplicationmanager/CdmwFTLocationInfo.stub.hpp"
using namespace std;
using namespace Cdmw::FT::ReplicationManager;
%}

%start StateMap::INITIAL
%class Location
%header Location.h
%package Cdmw::FT::ReplicationManager::Location

%map StateMap
%%

// -----------------------------------------------------------------------
//
INITIAL
Entry
{
  fsm_state(::CdmwFT::LocationState_INITIAL);
}
{
  // Called by the Location which receives the first add_member: tells
  // the peer Locations to insert their future members as BACKUP. Using
  // an event to be sure that it is called only when the peer is in the
  // INITIAL state.
  ev_set_backup
          INITIAL {
              backup(true);
          }

  // m_members_count is set to 0 by the LocationContext Ctor
  ev_create_object
          INITIAL {
              inc_exp_add_member();
          }

  ev_add_member (
            grpctxt:       ObjectGroup::ObjectGroup&
          , objctxt:       Object::Object&
          , member:        CORBA::Object_ptr
          , primary_loc:   const ::FT::Location&)
      [ctxt.members_count() == 0 && ctxt.exp_add_member() == 0]
          // First member but no create_object yet. Failure.
          FAILED {
          }

  ev_add_member (
            grpctxt:       ObjectGroup::ObjectGroup&
          , objctxt:       Object::Object&
          , member:        CORBA::Object_ptr
          , primary_loc:    const ::FT::Location&)
      [!ctxt.backup() && ctxt.members_count() == 0 && ctxt.exp_add_member() == 1]
          // First member for this location, 1 create_object so far
          PRIMARY {
              members_count(1);
              exp_add_member(0);
              set_peers_to_initial_backup();
              add_primary(grpctxt, objctxt, member, primary_loc);
              update_primary (primary_loc);
          }

  ev_add_member (
            grpctxt:       ObjectGroup::ObjectGroup&
          , objctxt:       Object::Object&
          , member:        CORBA::Object_ptr
          , primary_loc:    const ::FT::Location&)
      [!ctxt.backup() && ctxt.members_count() == 0 && ctxt.exp_add_member() > 1]
          INSERTING_PRIMARY {
              inc_members_count();
              dec_exp_add_member();
              set_peers_to_initial_backup();
              add_primary(grpctxt, objctxt, member, primary_loc);
          }

  ev_add_member (
            grpctxt:       ObjectGroup::ObjectGroup&
          , objctxt:       Object::Object&
          , member:        CORBA::Object_ptr
          , primary_loc:    const ::FT::Location&)
      [ctxt.backup() && ctxt.members_count() == 0 && ctxt.exp_add_member() == 1]
          // First member for this location, 1 create_object so far, some 
          // other Location is already in the PRIMARY state
          BACKUP {
              members_count(1);
              exp_add_member(0);
              add_backup(grpctxt, objctxt, member, primary_loc);
              //update_all_group_views (); // Moved to Rep. Mgr.
          }

  ev_add_member (
            grpctxt:       ObjectGroup::ObjectGroup&
          , objctxt:       Object::Object&
          , member:        CORBA::Object_ptr
          , primary_loc:    const ::FT::Location&)
      [ctxt.backup() && ctxt.members_count() == 0 && ctxt.exp_add_member() > 1]
          // First member for this location, more than 1 create_object so far,  
          // some other Location is already in the INSERTING_PRIMARY state
          INSERTING_BACKUP {
              inc_members_count();
              dec_exp_add_member();
              add_backup(grpctxt, objctxt, member, primary_loc);
          }

  ev_failure FAILED {
          }
}

// -----------------------------------------------------------------------
//
INSERTING_PRIMARY
Entry
{
  fsm_state(::CdmwFT::LocationState_INSERTING_PRIMARY);
}
{
  ev_add_member (
            grpctxt:       ObjectGroup::ObjectGroup&
          , objctxt:       Object::Object&
          , member:        CORBA::Object_ptr
          , primary_loc:    const ::FT::Location&)
      [ctxt.exp_add_member() == 1]
          PRIMARY {
              inc_members_count();
              exp_add_member(0);
              add_primary(grpctxt, objctxt, member, primary_loc);
              update_primary (primary_loc);
          }

  ev_add_member (
            grpctxt:       ObjectGroup::ObjectGroup&
          , objctxt:       Object::Object&
          , member:        CORBA::Object_ptr
          , primary_loc:    const ::FT::Location&)
      [ctxt.exp_add_member() > 1]
          INSERTING_PRIMARY { 
              inc_members_count();
              dec_exp_add_member();
              add_primary(grpctxt, objctxt, member, primary_loc);
          }

  ev_create_object
          INSERTING_PRIMARY {
              inc_exp_add_member();
          }

  ev_failure FAILED {
          }
}

// -----------------------------------------------------------------------
//
PRIMARY
Entry
{
  fsm_state(::CdmwFT::LocationState_PRIMARY);
}
{
// -> plutot ev_remove_member
//  ev_create_object
//          INSERTING_PRIMARY {
//              inc_exp_add_member();
//          }

  ev_set_backup
          BACKUP {
              set_backup();
          }

  ev_failure FAILED {
          }
}

// -----------------------------------------------------------------------
//
INSERTING_BACKUP
Entry
{
  fsm_state(::CdmwFT::LocationState_INSERTING_BACKUP);
}
{
  ev_add_member (
            grpctxt:       ObjectGroup::ObjectGroup&
          , objctxt:       Object::Object&
          , member:        CORBA::Object_ptr
          , primary_loc:    const ::FT::Location&)
      [ctxt.exp_add_member() == 1]
          BACKUP {
              inc_members_count();
              exp_add_member(0);
              add_backup(grpctxt, objctxt, member, primary_loc);
              //update_all_group_views (); // Moved to Rep.Mgr.
          }

  ev_add_member (
            grpctxt:       ObjectGroup::ObjectGroup&
          , objctxt:       Object::Object&
          , member:        CORBA::Object_ptr
          , primary_loc:    const ::FT::Location&)
      [ctxt.exp_add_member() > 1]
          INSERTING_BACKUP { 
              inc_members_count();
              dec_exp_add_member();
              add_backup(grpctxt, objctxt, member, primary_loc);
          }

  ev_create_object
          INSERTING_BACKUP {
              inc_exp_add_member();
          }

  ev_failure FAILED {
          }
}

// -----------------------------------------------------------------------
//
BACKUP
Entry
{
  fsm_state(::CdmwFT::LocationState_BACKUP);
}
{
// -> plutot ev_remove_member
//  ev_create_object
//          INSERTING_BACKUP {
//              inc_exp_add_member();
//          }

  ev_set_primary
          PRIMARY {
              set_primary();
          }

  ev_failure FAILED {
          }
}

// -----------------------------------------------------------------------
//
FAILED
Entry
{
  fsm_state(::CdmwFT::LocationState_FAILED);
}
{
}

// -----------------------------------------------------------------------
//
ERROR
{
  ev_create_object         nil  {}
  ev_initial_backup        nil  {}
  ev_add_member            nil  {}
  ev_set_primary           nil  {}
  ev_set_backup            nil  {}
  ev_failure               nil  {}
}

// -----------------------------------------------------------------------
//
Default
{
    Unknown ERROR   {}
}
%%

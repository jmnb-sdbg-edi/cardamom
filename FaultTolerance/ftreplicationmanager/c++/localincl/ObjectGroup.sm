// =====================================================================
// This file is part of CARDAMOM (R) which is jointly developed by THALES
// and SELEX-SI. It is derivative work based on PERCO Copyright (C) THALES
// 2000-2003. All rights reserved.
// 
// Copyright (C) THALES 2004-2005. All rights reserved
// 
// CARDAMOM is free software; you can redistribute it and/or modify it
// under the terms of the GNU Library General Public License as published
// by the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
// 
// CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
// License for more details.
// 
// You should have received a copy of the GNU Library General Public
// License along with CARDAMOM; see the file COPYING. If not, write to the
// Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
// =====================================================================
// -*- tab-width: 4; -*-

%{
#include <stdlib.h>
#include <iostream>
#include "ftreplicationmanager/CdmwFTObjectGroupData.stub.hpp"
using namespace std;
%}

%start StateMap::INITIAL
%class ObjectGroup
%header ObjectGroup.h
%package ::Cdmw::FT::ReplicationManager::ObjectGroup
%map StateMap
%%

// -----------------------------------------------------------------------
//
INITIAL
Entry
{
  fsm_state(::CdmwFT::ObjectGroupState_INITIAL);
}
{
  ev_primary_ready (objctxt: Object::Object&)
          LOST_REDUNDANCY {
            members_count(1);
            primary_ready(objctxt);
          }
}

// -----------------------------------------------------------------------
//
COMPLETE_FAILURE
Entry
{
  fsm_state(::CdmwFT::ObjectGroupState_FAILED);
  notify_observers();
}
{
  ev_primary_ready (objctxt: Object::Object&)
          LOST_REDUNDANCY {
            members_count(1);
            primary_ready(objctxt);
          }
}

// -----------------------------------------------------------------------
//
LOST_REDUNDANCY
Entry 
{
  fsm_state(::CdmwFT::ObjectGroupState_LOST_REDUNDANCY);
  notify_observers();
}
{
  ev_backup_ready (objctxt: Object::Object&)
      [ (ctxt.members_count() + 1) >= ctxt.min_members_count() ]
          FULLY_REDUNDANT {
            inc_members_count();
            backup_ready(objctxt);
          }

  ev_backup_ready (objctxt: Object::Object&)
      // [ (ctxt.members_count() + 1) < ctxt.min_members_count() ]
          DEGRADED_REDUNDANCY {
            inc_members_count();
            backup_ready(objctxt);
          }

  ev_member_removed (objctxt: Object::Object&)
      [ ctxt.members_count() == 1 ]
          COMPLETE_FAILURE {
            members_count(0);
            member_removed(objctxt);
          }
}

// -----------------------------------------------------------------------
//
DEGRADED_REDUNDANCY
Entry
{
  fsm_state(::CdmwFT::ObjectGroupState_DEGRADED_REDUNDANCY);
  notify_observers();
}
{
  ev_member_removed (objctxt: Object::Object&)
      [ ctxt.members_count() == 2 ]
          LOST_REDUNDANCY {
            dec_members_count();
            member_removed(objctxt);
          }

  ev_member_removed (objctxt: Object::Object&)
      [ ctxt.members_count() < ctxt.min_members_count() ]
          DEGRADED_REDUNDANCY {
            dec_members_count();
            member_removed(objctxt);
          }

  ev_backup_ready (objctxt: Object::Object&)
      [ (ctxt.members_count() + 1) < ctxt.min_members_count() ]
          DEGRADED_REDUNDANCY {
            inc_members_count();
            backup_ready(objctxt);
          }

  ev_backup_ready (objctxt: Object::Object&)
      [ (ctxt.members_count() + 1) >= ctxt.min_members_count() ]
          FULLY_REDUNDANT {
            inc_members_count();
            backup_ready(objctxt);
          }
}

// -----------------------------------------------------------------------
//
FULLY_REDUNDANT
Entry
{
  fsm_state(::CdmwFT::ObjectGroupState_FULLY_REDUNDANT);
  notify_observers();
}
{
  ev_member_removed (objctxt: Object::Object&)
      [ ctxt.members_count() > ctxt.min_members_count() ]
          FULLY_REDUNDANT {
            dec_members_count();
            member_removed(objctxt);
          }

  ev_member_removed (objctxt: Object::Object&)
      [ ctxt.members_count() == 2 ]
          LOST_REDUNDANCY {
            dec_members_count();
            member_removed(objctxt);
          }

  ev_member_removed (objctxt: Object::Object&)
      [ ctxt.members_count() == ctxt.min_members_count() ]
          DEGRADED_REDUNDANCY {
            dec_members_count();
            member_removed(objctxt);
          }

  ev_backup_ready (objctxt: Object::Object&)
          FULLY_REDUNDANT {
            inc_members_count();
            backup_ready(objctxt);
          }
}

// -----------------------------------------------------------------------
//
FAILED
Entry
{
  fsm_state(::CdmwFT::ObjectGroupState_FAILED);
  notify_observers();
}
{
}

// -----------------------------------------------------------------------
//
ERROR
{
}

// -----------------------------------------------------------------------
//
Default
{
    Unknown ERROR {}
}
%%

/* =========================================================================== *
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI.
 * 
 * It is derivative work based on PERCO Copyright (C) THALES 2000-2003.
 * All rights reserved.
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Library General Public License as published by the
 * Free Software Foundation; either version 2 of the License, or (at your
 * option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General
 * Public License along with CARDAMOM; see the file COPYING. If not, write to
 * the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 * =========================================================================== */


#ifndef _PHILO_IDL_
#define _PHILO_IDL_

#ifndef __OpenCCM__
#include <Components.idl>
#endif

#pragma prefix "acme.com"

module Dinner {
  exception InUse {};

  /*
   * A Registrator hands out names for Philosophers
   */

  interface Registration {
    string register ();
  };

  component Registrator supports Registration {
  };

  home RegistratorHome manages Registrator {};

  /*
   * Fork component
   */

  interface Fork {
    void get () raises (InUse);
    void release ();
  };

  component ForkManager {
    provides Fork the_fork;
  };

  home ForkHome manages ForkManager {};

  /*
   * Status information produced by each Philosopher
   */

  enum PhilosopherState {
    EATING,
    THINKING,
    HUNGRY,
    STARVING,
    DEAD
  };

  eventtype StatusInfo {
    public string name;
    public PhilosopherState state;
    public unsigned long secs_since_last_meal;
    public boolean has_left_fork;
    public boolean has_right_fork;
  };

  /*
   * Philosopher component
   */

  component Philosopher {
    readonly attribute string name;
    uses Fork left;
    uses Fork right;
    uses Registration register;
    emits StatusInfo config;
    publishes StatusInfo info;
  };

  home PhilosopherHome manages Philosopher {};

  /*
   * Observer component
   */

  component Observer {
    consumes StatusInfo info;
  };

  home ObserverHome manages Observer {};
};

#endif // _PHILO_IDL_


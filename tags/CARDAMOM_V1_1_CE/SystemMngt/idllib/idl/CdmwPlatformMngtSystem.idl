/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES 
 * and SELEX-SI. 
 * 
 * It is derivative work based on PERCO Copyright (C) THALES 2000-2003. 
 * All rights reserved.
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it under 
 * the terms of the GNU Library General Public License as published by the
 * Free Software Foundation; either version 2 of the License, or (at your 
 * option) any later version. 
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public 
 * License for more details. 
 * 
 * You should have received a copy of the GNU Library General 
 * Public License along with CARDAMOM; see the file COPYING. If not, write to 
 * the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */


#ifndef CDMW_PLATFORM_MNGT_SYSTEM_IDL_
#define CDMW_PLATFORM_MNGT_SYSTEM_IDL_




#include <CdmwPlatformMngtCommon.idl>
#include <CdmwPlatformMngtObservable.idl>
#include <CdmwPlatformMngtEntityContainer.idl>
#include <CdmwPlatformMngtServiceContainer.idl>
#include <CdmwPlatformMngtPropertyContainer.idl>
#include <CdmwPlatformMngtHostProxy.idl>
#include <CdmwPlatformMngtApplication.idl>

#pragma prefix "thalesgroup.com"

module CdmwPlatformMngt
{

    interface SupervisionObserver;


    /**
     * The system.
     */
    interface System : Observable,
        CdmwPlatformMngtEntity::RWEntityContainer,
        CdmwPlatformMngtService::RWServiceDefContainer,
        RWPropertyContainer, HostContainer
    {

        /**
        * The name identifying the system.
        */
        readonly attribute SystemName name;

        /**
        * Returns the status of the system with its additional information.
        */
        SystemStatus get_status(out string status_info);

        /**
        * Returns the mode of the system with its additional information.
        */
        FunctioningMode get_mode(out string mode_info);

        /**
        * Returns a snapshot of the whole application.
        */
        SystemSnapshot get_snapshot();

        /**
        * Returns the applications of the system.
        * The first how_many applications will be returned at most and the
        * rest of the applications may be retrieved thanks to the iterator.
        *
        * @param how_many the number of applications to return
        * @param applications the iterator to the rest of applications.
        * @return At most the number of applications requested
        */
        Applications get_applications(in unsigned long how_many,
            out ApplicationsIterator applications_iterator );

        /**
        * Returns the specified application.
        *
        * @param application_name the name identifying the application.
        * @return the application
        * @exception ApplicationNotFound if application_name doesn't denote
        * an existing application.
        */
        Application get_application(in ApplicationName application_name)
            raises(ApplicationNotFound);

        /**
        * Defines the initial configuration of the system.
        *
        * @param system_def the definition of the system.
        *
        * @exception DuplicateEntity if there is a duplicate entity name among
        * the system's entities
        * @exception DuplicateService if there is a duplicate service name among
        * the system's service definitions
        * @exception DuplicateHost if there is a duplicate host name among
        * the system's host definitions
        * @exception AlreadyDone if the initial configuration has already been
        * defined.
        * @exception IncompatibleStatus if the system is not in the INITIAL
        * status.
        */
        void define(in SystemDef system_def)
            raises(DuplicateEntity, DuplicateService, DuplicateHost,
            AlreadyDone, IncompatibleStatus);

        /**
        * Sets the graph of application initialisation.
        *
        * @param application_graph the application graph.
        *
        * @exception ReferenceNotFound if an element of the graph refers to an
        * unknown application.
        * @exception CircularReference if a circular reference has been detected
        * in the graph.
        * @exception IncompatibleStatus if the startup of the system is in
        * progress.
        */
        void set_init_graph(in GraphElements application_graph)
            raises(ReferenceNotFound, CircularReference, IncompatibleStatus);

        /**
        * Sets the graph of application stop.
        *
        * @param application_graph the application graph.
        *
        * @exception ReferenceNotFound if an element of the graph refers to an
        * unknown application
        * @exception CircularReference if a circular reference has been detected
        * in the graph
        * @exception IncompatibleStatus if the stop of the system is in
        * progress.
        */
        void set_stop_graph(in GraphElements application_graph)
            raises(ReferenceNotFound, CircularReference, IncompatibleStatus);

        /**
        * Adds a new runset or modify an existing runset.
        *
        * @param run_set_def the definition of the runset.
        *
        * @exception DuplicateRunSetElement if an element already exists in the
        * runset or among existing runsets.
        * @exception IncompatibleStatus if the status of the system doesn't
        * allow the operation.
        */
        void set_run_set(in RunSetDef run_set_def)
            raises(DuplicateRunSetElement, IncompatibleStatus);

        /**
        * Removes the specified runset.
        *
        * @param run_set_name the name identifying the runset to remove.
        *
        * @exception RunSetNotFound if run_set_name doesn't denote
        * an existing runset.
        * @exception IncompatibleStatus if the status of the system doesn't
        * allow the operation.
        */
        void remove_run_set(in RunSetName run_set_name)
            raises(RunSetNotFound, IncompatibleStatus);

        /**
        * Removes all runsets.
        *
        * @exception IncompatibleStatus if the status of the system doesn't
        * allow the operation.
        */
        void remove_all_run_sets() raises(IncompatibleStatus);

        /**
        * Adds a host to the system.
        *
        * @param host_def the definition of the host to add.
        *
        * @return the proxy to the added host
        *
        * @exception HostAlreadyExists if the host name is already used
        * within the system.
        * @exception IncompatibleStatus if the status of the system doesn't
        * allow the operation.
        */
        HostProxy add_host(in HostDef host_def)
            raises(HostAlreadyExists, IncompatibleStatus);

        /**
        * Removes a host from the system.
        *
        * @param host_name the name identifying the host to remove.
        *
        * @exception HostNotFound if host_name doesn't denote
        * an existing host.
        * @exception IncompatibleStatus if the status of the system doesn't
        * allow the operation.
        */
        void remove_host(in HostName host_name)
            raises(HostNotFound, IncompatibleStatus);

        /**
        * Adds an application to the system.
        *
        * @param platform_application_def the definition of the platform application
        * embedding the application.
        * @param application_def the definition of the application to add.
        *
        * @return the added application
        *
        * @exception ApplicationAlreadyExists if the application name is already
        * used within the system.
        * @exception HostNotFound if the host where the application should run
        * is unknown.
        * @exception DuplicateEntity if there is a duplicate entity name among
        * the application's entities
        * @exception DuplicateService if there is a duplicate service name among
        * the application's service definitions
        * @exception DuplicateProcess if there is a duplicate process name among
        * the application's processes
        * @exception ProcessHostNotFound if an unknown host is used by one of
        * the application's processes
        * @exception DuplicateProcessEntity if there is a duplicate entity name
        * among the entities of one of the application processes
        * @exception DuplicateProcessService if there is a duplicate service
        * name among the services of one of the application processes
        * @exception DuplicateProcessStep if there is a duplicate step label
        * among the steps of one of the application processes
        * @exception DuplicateProcessActivityPoint if there is a duplicate
        * name among the activity points of one of the application processes
        * @exception IncompatibleStatus if the status of the system doesn't
        * allow the operation.
        */
        Application add_application(
                in PlatformApplicationDef platform_application_def,
                in ApplicationDef application_def)
            raises(ApplicationAlreadyExists, HostNotFound,
            DuplicateEntity, DuplicateService,
            DuplicateProcess, ProcessHostNotFound,
            DuplicateProcessEntity, DuplicateProcessService,
            DuplicateProcessStep, DuplicateProcessActivityPoint,
            IncompatibleStatus);

        /**
        * Removes an application from the system.
        * The application must be inactive.
        *
        * @param application_name the name identifying the application to remove.
        *
        * @exception ApplicationNotFound if application_name doesn't denote
        * an existing application.
        * @exception ApplicationStillActive if the application is still active
        * @exception IncompatibleStatus if the status of the system doesn't
        * allow the operation.
        */
        void remove_application(in ApplicationName application_name)
            raises(ApplicationNotFound, ApplicationStillActive, IncompatibleStatus);

        /**
        * Starts the system.
        * The initialisation order of the applications will follow the graph
        * of application initialisation. The automatic startup of applications
        * are defined by the runsets.
        *
        * @param startup_kind the startup kind of the whole system.
        *
        * @exception IncompatibleStatus if the status of the system doesn't
        * allow the operation.
        */
        void start(in CdmwPlatformMngtBase::StartupKind startup_kind)
            raises(IncompatibleStatus);

        /**
        * Resumes the startup of the system.
        *
        * @exception IncompatibleStatus if the status of the system doesn't
        * allow the operation.
        */
        void resume()
            raises(IncompatibleStatus);

        /**
        * Acknowledges the DEGRADED_MODE of the system.
        * The mode of the system is reset to NORMAL_MODE.
        *
        * @exception IncompatibleStatus if the status of the system doesn't
        * allow the operation.
        */
        void acknowledge()
            raises(IncompatibleStatus);

        /**
        * Requests the system to stop.
        * The stop order of the applications will follow the graph of
        * application stop. Active applications that do not belong to this graph
        * will be stopped concurrently.
        *
        * @param emergency if true, the graph is not used and all the
        * applications will be requested to stop concurrently. This flag
        * is also transmitted to these applications.
        */
        void stop(in boolean emergency);

    };


    /**
    * The interface used by an application to notify its degradation.
    */
    interface ApplicationObserver
    {

        /**
        * Notifies the initialisation of an application.
        *
        * @param application_name the name identifying the application.
        *
        * @exception ApplicationNotFound if application_name doesn't denote
        * an existing application.
        */
        void notify_initialisation(in ApplicationName application_name)
            raises(ApplicationNotFound);

        /**
        * Notifies the degradation of an application.
        *
        * @param application_name the name identifying the application.
        *
        * @exception ApplicationNotFound if application_name doesn't denote
        * an existing application.
        */
        void notify_degradation(in ApplicationName application_name)
            raises(ApplicationNotFound);

    }; // End interface ApplicationObserver

    
}; // End Module CdmwPlatformMngt

#endif // CDMW_PLATFORM_MNGT_SYSTEM_IDL_


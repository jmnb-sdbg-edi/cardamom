<?xml version="1.0" encoding="utf-8"?>
<!-- ===================================================================== -->
<!--
 * This file is part of CARDAMOM (R) which is jointly developed by THALES 
 * and SELEX-SI. 
 * 
 * It is derivative work based on PERCO Copyright (C) THALES 2000-2003. 
 * All rights reserved.
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it under 
 * the terms of the GNU Library General Public License as published by the
 * Free Software Foundation; either version 2 of the License, or (at your 
 * option) any later version. 
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public 
 * License for more details. 
 * 
 * You should have received a copy of the GNU Library General 
 * Public License along with CARDAMOM; see the file COPYING. If not, write to 
 * the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-->
<!-- ===================================================================== -->


<!DOCTYPE project [
    <!ENTITY common_config_targets
             SYSTEM "file:../data/CommonConfigTargets.xml">
]>

<project name="Install" default="-install" basedir=".">  
    
    <description>
        This file install the product into the install directory 
    </description>
    
    
    <!-- Include XML fragments -->
    &common_config_targets;
    
    
    <!-- =======================================================================
        The "-install-delivery" target install the product into the install directory
        
        It depends on the following targets:
            + "-create-installation-directories"
            + "-run-codegen-specific-tasks"
            + "-find-target-cscs"
            + "-change-permissions-on-sh-file"
            + "-create-tutorials-config-files"
    -->
    <target name="-install-delivery"
            depends="-create-installation-directories, -run-codegen-specific-tasks,
                     -find-target-cscs, -change-permissions-on-sh-file,
                     -create-tutorials-config-files">
    </target>

    <!-- =======================================================================
        The "-install" target install the product into the install directory
        
        It depends on the following targets:
            + "-initialize-install"
            + "-install-delivery"
    -->
    <target name="-install"
            depends="-initialize-install, -install-delivery">
    </target>


    <!-- =======================================================================
        The "-install-valid" target installs the validation files into the
        installation directory.

        It depends on the following targets:
            + "-initialize-install-valid"
            + "-check-options"
            + "-install-delivery"
            + "-create-setenv-sh"
            + "-update-paths"
    -->
    <target name="-install-valid"
            depends="-initialize-install-valid, -check-options, -install-delivery,
                     -create-setenv-sh, -update-paths">

        <!-- replicate the installation directory on the target hosts -->
        <for list="1,2,3" param="n">
            <sequential>
                <replicatedir dir="${install.dir}" host="valid.targethost@{n}"/>
            </sequential>
        </for>
    </target>

    <!-- =======================================================================
        The "-install-integ" target installs the integration files into the
        installation directory.

        It depends on the following targets:
            + "-initialize-install-integ"
            + "-check-options"
            + "-install-delivery"
            + "-create-setenv-sh"
            + "-update-paths"
    -->
    <target name="-install-integ"
            depends="-initialize-install-integ, -check-options, -install-delivery,
                     -create-setenv-sh, -update-paths">

        <!-- replicate the installation directory on the target hosts -->
        <for list="1,2,3" param="n">
            <sequential>
                <replicatedir dir="${install.dir}" host="integ.targethost@{n}"/>
            </sequential>
        </for>
    </target>

    <!-- =======================================================================
        The "-install-qualif" target installs the qualification files into the
        installation directory.

        It depends on the following targets:
            + "-initialize-install-qualif"
            + "-check-options"
            + "-install-delivery"
            + "-install-tools"
            + "-custumisation-delivery-file"
            + "-create-setenv-sh"
            + "-update-paths"
    -->
    <target name="-install-qualif"
            depends="-initialize-install-qualif, -check-options, 
                     -install-delivery,-install-tools, -custumisation-delivery-file,
                     -create-setenv-sh, -update-paths">

        <!-- copy the binary version into the share directory of the install qualif -->
        <if>
            <not>
                <isset property="without.binary.version"/>
            </not>
            <then>
                <move file="${install.dir}${FS}..${FS}..${FS}${config.product.name}-${product.version}.tar.gz"
                      todir="${install.dir}${FS}share"/>
            </then>
        </if>

        <dirname file="${install.dir}" property="install.dir.dirname_"/>
        <!-- replicate the installation directory on the target hosts -->
        <for list="1,2,3" param="n">
            <sequential>
                <replicatedir dir="${install.dir.dirname_}" host="qualif.targethost@{n}"/>
            </sequential>
        </for>
    </target>

    <!-- =======================================================================
        The "-install-binary" target installs the qualification files into the
        installation directory.

        It depends on the following targets:
            + "-initialize-install-binary"
            + "-check-options"
            + "-install-delivery"
            + "-install-tools"
            + "-custumisation-delivery-file"
            + "-update-paths"
            + "-create-configuration-script-file"
    -->
    <target name="-install-binary"
            depends="-initialize-install-binary, -check-options,
                     -install-delivery, -install-tools, -custumisation-delivery-file,
                     -update-paths, -create-configuration-script-file">
        
        <!-- tar the directory -->
        <echo>tar the archive</echo>
        <xexec executable="tar" showCmd="true" dir="${install-dir-dirname}">
            <arg line="-cf ${install-dir-dirname}${FS}${config.product.name}-${product.version}.tar"/>
            <arg line="${config.product.name}-${product.version}"/>
        </xexec>
        
        <!-- zip the archive -->
        <echo>zip the archive</echo>
        <gzip zipfile="${install-dir-dirname}${FS}${config.product.name}-${product.version}.tar.gz"
              src="${install-dir-dirname}${FS}${config.product.name}-${product.version}.tar"/>
        
        <property name="install.binary.file.name" 
                  value="${install-dir-dirname}${FS}${config.product.name}-${product.version}.tar.gz"/>
        
        <!-- delete the archive -->
        <delete file="${install-dir-dirname}${FS}${config.product.name}-${product.version}.tar"/>
        <delete dir="${install-dir-dirname}${FS}${config.product.name}-${product.version}"/>
    </target>

    <!-- =======================================================================
    The "-check-options" checks if the mandatory options are set and defines
    properties.

    It depends on the following targets:
    + "-define-install-macros"
    -->
    <target name="-check-options" depends="-define-install-macros">     

        <!-- check if path for specific tools are indicated in the command line -->
        <if>
            <or>
                <isset property="is.install.binary"/>
                <isset property="is.install.qualif"/>
            </or>
            <then>
                <if>
                    <and>
                        <isset property="install.gccdir"/>
                        <isset property="install.makedir"/>
                        <isset property="install.binutilsdir"/>
                    </and>
                    <then>
                        <!-- check if the specific directory exist -->
                        <available file="${install.gccdir}" type="dir" property="install.gccdir.ok"/>
                        <available file="${install.makedir}" type="dir" property="install.makedir.ok"/>
                        <available file="${install.binutilsdir}" type="dir" property="install.binutilsdir.ok"/>
                        <if>
                            <not>
                                <equals arg1="${install.gccdir}" arg2="none"/>
                            </not>
                            <then>
                                <if>
                                    <isset property="install.gccdir.ok"/>
                                    <then>                                
                                        <property name="gcc.install.dir" value="${install.gccdir}"/>
                                        <property name="config.GCC.install.dir" value="${install.gccdir}"/>
                                    </then>
                                    <else>
                                        <fail>Bad directory for gcc</fail>
                                    </else>
                                </if>
                            </then>
                        </if>
                        <if>
                            <not>
                                <equals arg1="${install.makedir}" arg2="none"/>
                            </not>
                            <then>
                                <if>
                                    <isset property="install.makedir.ok"/>
                                    <then>                                
                                        <property name="make.install.dir" value="${install.makedir}"/>
                                        <property name="config.MAKE.install.dir" value="${install.makedir}"/>
                                    </then>
                                    <else>
                                        <fail>Bad directory for make</fail>
                                    </else>
                                </if>
                            </then>
                        </if>
                        <if>
                            <not>
                                <equals arg1="${install.binutilsdir}" arg2="none"/>
                            </not>
                            <then>
                                <if>
                                    <isset property="install.binutilsdir.ok"/>
                                    <then>                                
                                        <property name="binutils.install.dir" value="${install.binutilsdir}"/>
                                        <property name="config.BINUTILS.install.dir" value="${install.binutilsdir}"/>
                                    </then>
                                    <else>
                                        <fail>Bad directory for binutils</fail>
                                    </else>
                                </if>
                            </then>
                        </if>
                    </then>
                    <else>
                        <!-- invalid or missing options -->
                        <if>
                            <isset property="is.install.binary"/>
                            <then>
                                <var name="s" value="install-binary options:"/>                       
                            </then>
                            <else>
                                <var name="s" value="install-qualif options:"/>           
                            </else>
                        </if>
                        <var name="s" value="${s} gccdir=[install_dir|none]"/>
                        <var name="s" value="${s} makedir=[install_dir|none]"/>
                        <var name="s" value="${s} binutilsdir=[install_dir|none]"/>
                        <fail>${s}</fail>
                    </else>
                </if>
            </then>
        </if>

        <!-- check the hosts and targets -->
        <if>
            <or>
                <isset property="is.install.valid"/>
                <isset property="is.install.qualif"/>
                <isset property="is.install.integ"/>
            </or>
            <then>
                <if>
                    <and>
                        <contains string="${install.options}" substring="host1="/>
                        <contains string="${install.options}" substring="host2="/>
                        <contains string="${install.options}" substring="targethost1="/>
                    </and>
                    <then>
                        <for list="${install.options}" param="option" delimiter=" ">
                            <sequential>
                                <!-- name of the option -->
                                <selecttoken string="@{option}"
                                             delimiter="=" firstToken="true"
                                             property="opt"/>

                                <!-- value -->
                                <selecttoken string="@{option}"
                                             delimiter="=" tokenNumber="1"
                                             property="host"/>

                                <if>
                                    <isset property="is.install.valid"/>
                                    <then>
                                        <property name="valid.${opt}" value="${host}"/>
                                    </then>
                                    <elseif>
                                        <isset property="is.install.integ"/>
                                        <then>
                                            <property name="integ.${opt}" value="${host}"/>
                                        </then>
                                    </elseif>
                                    <elseif>
                                        <isset property="is.install.qualif"/>
                                        <then>
                                            <property name="qualif.${opt}" value="${host}"/>
                                        </then>
                                    </elseif>
                                </if>
                                
                                <!-- unset properties -->
                                <xvar name="opt"  unset="true"/>
                                <xvar name="host" unset="true"/>
                            </sequential>
                        </for>
                        
                        <echoproperties prefix="valid."/>
                        
                        <!-- define token values for configuration files -->
                        <if>
                            <isset property="is.install.valid"/>
                            <then>
                                <addhoststokens
                                                prefix="valid"
                                                file="${install.tokens.file}"/>
                            </then>
                            <elseif>
                                <isset property="is.install.integ"/>
                                <then>
                                    <addhoststokens
                                                    prefix="integ"
                                                    file="${install.tokens.file}"/>
                                </then>
                            </elseif>
                            <elseif>
                                <isset property="is.install.qualif"/>
                                <then>
                                    <addhoststokens
                                                    prefix="qualif"
                                                    file="${install.tokens.file}"/>
                                </then>
                            </elseif>
                        </if>
                    </then>
                    <else>
                        <!-- invalid or missing options -->
                        <if>
                            <isset property="is.install.valid"/>
                            <then>
                                <var name="s" value="install-valid options:"/>
                            </then>
                            <elseif>
                                <isset property="is.install.integ"/>
                                <then>
                                    <var name="s" value="install-integ options:"/>
                                </then>
                            </elseif>
                            <elseif>
                                <isset property="is.install.qualif"/>
                                <then>
                                    <var name="s" value="install-qualif options:"/>
                                </then>
                            </elseif>
                        </if>                       
                        <var name="s" value="${s} host1=xmlhostname1"/>
                        <var name="s" value="${s} host2=xmlhostname2"/>
                        <var name="s" value="${s} [host3=xmlhostname3]"/>
                        <var name="s" value="${s} targethost1=targethostname1"/>
                        <var name="s" value="${s} [targethost2=targethostname2]"/>
                        <var name="s" value="${s} [targethost3=targethostname3]"/>
                        <fail>${s}</fail>
                    </else>                   
                </if>
            </then>
        </if>       
    </target>


    <!-- =======================================================================
        The "-define-install-macros" target defines some helper macros.
    -->
    <target name="-define-install-macros" unless="install.macros.defined">
        <!--
            The "addhoststokens" macro inserts properties about the validation
            or qualification hosts into the tokens file.
        -->
        <macrodef name="addhoststokens">
            <attribute name="prefix"/>
            <attribute name="file"/>

            <sequential>
                <propertycopy property="host1val" from="@{prefix}.host1"/>
                <propertycopy property="host2val" from="@{prefix}.host2"/>
                <propertycopy property="host3val" from="@{prefix}.host3"
                              silent="true"/>

                <propertyfile file="@{file}">
                    <entry key="hostname1val" value="${host1val}"/>
                    <entry key="hostname2val" value="${host2val}"/>
                </propertyfile>

                <if>
                    <isset property="host3val"/>
                    <then>
                        <propertyfile file="@{file}">
                            <entry key="hostname3val" value="${host3val}"/>
                        </propertyfile>
                    </then>
                </if>

                <!-- unset properties -->
                <xvar name="host1val" unset="true"/>
                <xvar name="host2val" unset="true"/>
                <xvar name="host3val" unset="true"/>
            </sequential>
        </macrodef>

        <!--
            The "replicatedir" macro duplicates the specified directory on the
            specified target host.
        -->
        <macrodef name="replicatedir">
            <attribute name="dir"/>
            <attribute name="host"/>

            <sequential>
                <propertycopy property="host_" silent="true" from="@{host}"/>

                <dirname file="@{dir}" property="dir_"/>

                <if>
                    <and>
                        <isset property="@{host}"/>
                        <not>
                            <equals arg1="${HOSTNAME}" arg2="${host_}"
                                    trim="true"/>
                        </not>
                    </and>
                    <then>
                        <xexec executable="rsh" showCmd="true">
                            <arg line="${host_} mkdir -p ${dir_}"/>
                        </xexec>

                        <xexec executable="rcp" showCmd="true">
                            <arg line="-r @{dir} ${host_}:${dir_}"/>
                        </xexec>
                    </then>
                </if>

                <!-- unset properties -->
                <xvar name="host_" unset="true"/>
                <xvar name="dir_"  unset="true"/>
            </sequential>
        </macrodef>

        <property name="install.macros.defined" value="true"/>
    </target>
   
    

    <!-- =======================================================================
    The "-initialize-install" target set the "is.install" property
    -->
    <target name="-initialize-install">
        <property name="is.install" value="true"/>
    </target>

    <!-- =======================================================================
    The "-initialize-install-qualif" target set the "is.install.qualif" property
    -->
    <target name="-initialize-install-qualif">
        <property name="is.install.qualif" value="true"/>
    </target>

    <!-- =======================================================================
    The "-initialize-install-valid" target set the "is.install.valid" property
    -->
    <target name="-initialize-install-valid">
        <property name="is.install.valid" value="true"/>
    </target>

    <!-- =======================================================================
    The "-initialize-install-integ" target set the "is.install.integ" property
    -->
    <target name="-initialize-install-integ">
        <property name="is.install.integ" value="true"/>
    </target>

    <!-- =======================================================================
    The "-initialize-install-binary" target set the "is.install.binary" property
    -->
    <target name="-initialize-install-binary">
        <xvar name="is.install.qualif" unset="true"/>
        <property name="is.install.binary" value="true"/>
    </target>

    <!-- =======================================================================
        The "-create-installation-directories" target creates the installation 
        directory tree and sets some properties.
    -->
    <target name="-create-installation-directories">
        <dirname file="${config.install.dir}" property="install-dir-dirname"/>
        <!-- create the install directory -->
        <echo>Create the installation directory</echo>
        <if>
            <isset property="is.install.qualif"/>
            <then>
                <property name="install.dir"
                          value="${config.install.dir}-qualif${FS}delivery"/>
                <property name="install.tools.dir"
                          value="${config.install.dir}-qualif${FS}tools"/>
            </then>
            <elseif>
                <isset property="is.install.valid"/>
                <then>
                    <property name="install.dir"
                              value="${config.install.dir}-valid"/>
                </then>
            </elseif>
            <elseif>
                <isset property="is.install.inter"/>
                <then>
                    <property name="install.dir"
                              value="${config.install.dir}-integ"/>
                </then>
            </elseif>
            <elseif>
                <isset property="is.install.binary"/>
                <then>
                    <property name="install.dir"
                              value="${install-dir-dirname}${FS}${config.product.name}-${product.version}${FS}delivery"/>
                    <dirname file="${install.dir}" property="install.dir.dirname"/>
                    <property name="install.tools.dir"
                              value="${install-dir-dirname}${FS}${config.product.name}-${product.version}${FS}tools"/>
                </then>
            </elseif>            
            <else>
                <property name="install.dir" value="${config.install.dir}"/>
            </else>
        </if>

        <mkdir dir="${install.dir}"/>
        <if>
            <isset property="install.tools.dir"/>
            <then>
                <mkdir dir="${install.tools.dir}"/>
            </then>
        </if>

        <mkdir dir="${install.dir}${FS}bin"/>

        <mkdir dir="${install.dir}${FS}lib"/>

        <for list="c++,java" param="itf.name">
            <sequential>
                <mkdir dir="${install.dir}${FS}lib${FS}@{itf.name}"/>
            </sequential>
        </for>

        <mkdir dir="${install.dir}${FS}idl"/>

        <if>
            <contains string="${config.sel.interfaces}" substring="c++"
                      casesensitive="true"/>
            <then>
                <mkdir dir="${install.dir}${FS}include${FS}c++"/>
            </then>
        </if>

        <mkdir dir="${install.dir}${FS}share"/>
        <chmod dir="${install.dir}${FS}share" perm="g+w"/>
        <stringmanip string="${config.product.name}" action="lowercase"
                     property="product.lcase.name"/>

        <property name="sloppy.check" value="false"/>
    </target>



    <!-- =======================================================================
        The "-install-tools" target copy necessary tools 
    -->
    <target name="-install-tools">
        <!-- determine the tools list to install -->
        <if>
            <not>
                <isset property="without.tools"/>
            </not>
            <then>
                <!-- built the list of tools needed for qualification and binary version -->
                <var name="tools-list" value="${config.sel.min.compilers} MAKE BINUTILS"/>
                <var name="tools-list" value="${tools-list} ${config.sel.min.orbs}"/>
                <var name="tools-list" value="${tools-list} ${config.sel.min.tools}"/>
                
                <tempfile property="install.tools.conf" destdir="${TMP}"
                          prefix="${tmpfile.prefix}_install_conf"
                          suffix="#${site.id}.properties"/>
                
                <echo file="${install.tools.conf}" append="true">
                    tools.ld.library.path = 
                    tools.path = 
                </echo>

                <property name="set.env.file"
                          value="${install.dir}${FS}bin${FS}set_env.sh"/>
                
                <!-- for each tools, copy it and custumize it -->
                <foreach list="${tools-list}" target="-copy-tools"
                         param="local-tool" inheritall="true" delimiter=" "/>
                
                <property file="${install.tools.conf}"/>
                <delete file="${install.tools.conf}" quiet="true"/>
            </then>
            <else>
                <echo> Tools are not copied </echo>
            </else>
        </if>
    </target>
    
    <!-- =======================================================================
    the "-copy-tools" target copy all needed tools in the install directory
    -->  
    <target name="-copy-tools">
        <echo>Coping ${local-tool} ... </echo>

        <!-- copy the selected tool -->
        <switch value="${local-tool}">
            <case value="GCC">  
                <if>
                    <isset property="gcc.install.dir"/>
                    <then>
                        <echo>${gcc.install.dir}</echo>
                        
                        <xexec executable="rcp" showCmd="true">
                            <arg line="-r localhost:${gcc.install.dir}"/>            
                            <arg value="${install.tools.dir}"/>
                        </xexec>
                        <basename property="gcc.basename" 
                                  file="${gcc.install.dir}"/>
                        <property name="tools.bin.dir" value="${install.tools.dir}${FS}${gcc.basename}${FS}bin"/>
                        <property name="tools.lib.dir" value="${install.tools.dir}${FS}${gcc.basename}${FS}lib"/>
                        
                        
                        <findfile file="*"
                                  dir="${install.tools.dir}${FS}${gcc.basename}"
                                  recursive="true"
                                  property="all.files"
                                  separator=";"/>
                        
                        <foreach list="${all.files}" target="-custumisation-file"
                                 param="file" inheritall="true" delimiter="; "/>
                    </then>
                </if>
            </case>
            <case value="J2SDK">
                <echo>${config.J2SDK.install.dir}</echo>
                <property name="j2sdk.install.dir" 
                          value="${config.J2SDK.install.dir}"/>               
                
                <xexec executable="rcp" showCmd="true">
                    <arg line="-r localhost:${j2sdk.install.dir}"/>            
                    <arg value="${install.tools.dir}"/>
                </xexec>
                <basename property="j2sdk.basename" 
                          file="${j2sdk.install.dir}"/>
                <property name="tools.bin.dir" value="${install.tools.dir}${FS}${j2sdk.basename}${FS}bin"/>
                <property name="tools.lib.dir" value="${install.tools.dir}${FS}${j2sdk.basename}${FS}lib"/>
            </case>
            <case value="MAKE">
                <if>
                    <isset property="make.install.dir"/>
                    <then>
                        <echo>${make.install.dir}</echo>
                        
                        <xexec executable="rcp" showCmd="true">
                            <arg line="-r localhost:${make.install.dir}"/>            
                            <arg value="${install.tools.dir}"/>
                        </xexec>
                        <basename property="make.basename" 
                                  file="${make.install.dir}"/>
                        <property name="tools.bin.dir" value="${install.tools.dir}${FS}${make.basename}${FS}bin"/>
                        <property name="tools.lib.dir" value="${install.tools.dir}${FS}${make.basename}${FS}lib"/>
                    </then>
                </if>
            </case>
            <case value="BINUTILS">
                <if>
                    <isset property="binutils.install.dir"/>
                    <then>
                        <echo>${binutils.install.dir}</echo>
                        
                        <xexec executable="rcp" showCmd="true">
                            <arg line="-r localhost:${binutils.install.dir}"/>            
                            <arg value="${install.tools.dir}"/>
                        </xexec>
                        <basename property="binutils.basename" 
                                  file="${binutils.install.dir}"/>
                        <property name="tools.bin.dir" value="${install.tools.dir}${FS}${binutils.basename}${FS}bin"/>
                        <property name="tools.lib.dir" value="${install.tools.dir}${FS}${binutils.basename}${FS}lib"/>
                        
                        
                        <findfile file="*"
                                  dir="${install.tools.dir}${FS}${binutils.basename}"
                                  recursive="true"
                                  property="all.files"
                                  separator=";"/>
                        
                        <foreach list="${all.files}" target="-custumisation-file"
                                 param="file" inheritall="true" delimiter="; "/>
                    </then>
                </if>
            </case>
            <case value="TAO">
                <dirname file="${config.TAO.install.dir}" property="temp1"/>
                <dirname file="${temp1}" property="tao.ace.install.dir"/>
                <basename file="${tao.ace.install.dir}" 
                          property="tao.ace.basename.dir"/>
                
                <echo>${tao.ace.install.dir}   ${tao.ace.basename.dir}</echo>
                <xexec executable="rcp" showCmd="true">
                    <arg line="-r localhost:${tao.ace.install.dir}"/>            
                    <arg value="${install.tools.dir}"/>
                </xexec> 
                <xdelete>
                    <dirset dir="${install.tools.dir}${FS}${tao.ace.basename.dir}">
                        <include name="**/tests"/>                         
                    </dirset>
                </xdelete>
                <xdelete>
                    <dirset dir="${install.tools.dir}${FS}${tao.ace.basename.dir}">
                        <include name="**/examples"/>                        
                    </dirset>
                </xdelete>
                <xdelete>
                    <dirset dir="${install.tools.dir}${FS}${tao.ace.basename.dir}">
                        <include name="**/performance-tests"/>                        
                    </dirset>
                </xdelete>
                <xdelete>
                    <dirset dir="${install.tools.dir}${FS}${tao.ace.basename.dir}">
                        <include name="**/.shobj"/>                        
                    </dirset>
                </xdelete>
                <findfile file="lib*.so*"
                          dir="${install.tools.dir}${FS}${tao.ace.basename.dir}${FS}ACE_wrappers${FS}TAO"
                          recursive="true"
                          property="tao.library.to.delete"/>
                <exec executable="rm">
                    <arg line="${tao.library.to.delete}"/>
                </exec>
                <property name="tools.lib.dir" value="${install.tools.dir}${FS}${tao.ace.basename.dir}${FS}ACE_wrappers${FS}ace"/>
                <property name="tools.bin.dir" value="${install.tools.dir}${FS}${tao.ace.basename.dir}${FS}ACE_wrappers${FS}bin${PS}${install.tools.dir}${FS}${tao.ace.basename.dir}${FS}ACE_wrappers${FS}TAO${FS}TAO_IDL${PS}${install.tools.dir}${FS}${tao.ace.basename.dir}${FS}ACE_wrappers${FS}TAO${FS}orbsvcs${FS}IFR_Service${PS}${install.tools.dir}${FS}${tao.ace.basename.dir}${FS}ACE_wrappers${FS}TAO${FS}orbsvcs${FS}Naming_Service"/>
            </case>
            <case value="TAOOpenFusion">
                <dirname file="${config.TAOOpenFusion.install.dir}" property="temp1"/>
                <dirname file="${temp1}" property="tao.ace.install.dir"/>
                <basename file="${tao.ace.install.dir}" 
                          property="tao.ace.basename.dir"/>
                
                <echo>${tao.ace.install.dir}   ${tao.ace.basename.dir} ${install.tools.dir}</echo>
                <xexec executable="rcp" showCmd="true">
                    <arg line="-r localhost:${tao.ace.install.dir}"/>            
                    <arg value="${install.tools.dir}"/>
                </xexec> 
                <xdelete>
                    <dirset dir="${install.tools.dir}${FS}${tao.ace.basename.dir}">
                        <include name="**/tests"/>                         
                    </dirset>
                </xdelete>
                <xdelete>
                    <dirset dir="${install.tools.dir}${FS}${tao.ace.basename.dir}">
                        <include name="**/examples"/>                        
                    </dirset>
                </xdelete>
                <xdelete>
                    <dirset dir="${install.tools.dir}${FS}${tao.ace.basename.dir}">
                        <include name="**/performance-tests"/>                        
                    </dirset>
                </xdelete>
                <xdelete>
                    <dirset dir="${install.tools.dir}${FS}${tao.ace.basename.dir}">
                        <include name="**/.shobj"/>                        
                    </dirset>
                </xdelete>
                <findfile file="lib*.so*"
                          dir="${install.tools.dir}${FS}${tao.ace.basename.dir}${FS}src${FS}TAO"
                          recursive="true"
                          property="tao.library.to.delete"/>
                <exec executable="rm">
                    <arg line="${tao.library.to.delete}"/>
                </exec>
                <property name="tools.lib.dir" value="${install.tools.dir}${FS}${tao.ace.basename.dir}${FS}src${FS}ace"/>
                <property name="tools.bin.dir" value="${install.tools.dir}${FS}${tao.ace.basename.dir}${FS}src${FS}bin${PS}${install.tools.dir}${FS}${tao.ace.basename.dir}${FS}src${FS}TAO${FS}TAO_IDL${PS}${install.tools.dir}${FS}${tao.ace.basename.dir}${FS}src${FS}TAO${FS}orbsvcs${FS}IFR_Service${PS}${install.tools.dir}${FS}${tao.ace.basename.dir}${FS}src${FS}TAO${FS}orbsvcs${FS}Naming_Service"/>
            </case>
            <case value="ORBacusJAVA">
                <xexec executable="rcp" showCmd="true">
                    <arg line="-r localhost:${config.ORBacusJAVA.install.dir}"/>            
                    <arg value="${install.tools.dir}"/>
                </xexec>
                <basename property="ORBacusJAVA.basename" 
                          file="${config.ORBacusJAVA.install.dir}"/>
                <selecttoken string="${config.ORBacusJAVA.bin.dir}" 
                             delimiter="${ORBacusJAVA.basename}${FS}"
                             tokenNumber="1" 
                             property="short.ORBacusJAVA.bin.dir"/>
                <property name="tools.bin.dir" value="${install.tools.dir}${FS}${ORBacusJAVA.basename}${FS}${short.ORBacusJAVA.bin.dir}"/>
            </case>
            <case value="ORBacusCPP">
                <xexec executable="rcp" showCmd="true">
                    <arg line="-r localhost:${config.ORBacusCPP.install.dir}"/>            
                    <arg value="${install.tools.dir}"/>
                </xexec>
                <basename property="ORBacusCPP.basename" 
                          file="${config.ORBacusCPP.install.dir}"/>
                <selecttoken string="${config.ORBacusCPP.bin.dir}" 
                             delimiter="${ORBacusCPP.basename}${FS}"
                             tokenNumber="1" 
                             property="short.ORBacusCPP.bin.dir"/>
                <property name="tools.bin.dir" value="${install.tools.dir}${FS}${ORBacusCPP.basename}${FS}${short.ORBacusCPP.bin.dir}"/>
                <selecttoken string="${config.ORBacusCPP.lib.dir}" 
                             delimiter="${ORBacusCPP.basename}${FS}"
                             tokenNumber="1" 
                             property="short.ORBacusCPP.lib.dir"/>
                <property name="tools.lib.dir" value="${install.tools.dir}${FS}${ORBacusCPP.basename}${FS}${short.ORBacusCPP.lib.dir}"/>
            </case>
            <case value="XercesCPP">
                <xexec executable="rcp" showCmd="true">
                    <arg line="-r localhost:${config.XercesCPP.install.dir}"/>            
                    <arg value="${install.tools.dir}"/>
                </xexec>
                <basename property="XercesCPP.basename" 
                          file="${config.XercesCPP.install.dir}"/>
                <selecttoken string="${config.XercesCPP.lib.dir}" 
                             delimiter="${XercesCPP.basename}${FS}"
                             tokenNumber="1" 
                             property="short.XercesCPP.lib.dir"/>
                <property name="tools.lib.dir" value="${install.tools.dir}${FS}${XercesCPP.basename}${FS}${short.XercesCPP.lib.dir}"/>
            </case>
            <case value="XercesJAVA">
                <xexec executable="rcp" showCmd="true">
                    <arg line="-r localhost:${config.XercesJAVA.install.dir}"/>            
                    <arg value="${install.tools.dir}"/>
                </xexec>
            </case>
            <case value="XalanJAVA">
                <xexec executable="rcp" showCmd="true">
                    <arg line="-r localhost:${config.XalanJAVA.install.dir}"/>            
                    <arg value="${install.tools.dir}"/>
                </xexec>
            </case>
            <case value="Saxon">
                <xexec executable="rcp" showCmd="true">
                    <arg line="-r localhost:${config.Saxon.install.dir}"/>            
                    <arg value="${install.tools.dir}"/>
                </xexec>
            </case>
            <case value="OpenORB">
                <xexec executable="rcp" showCmd="true">
                    <arg line="-r localhost:${config.OpenORB.install.dir}"/>            
                    <arg value="${install.tools.dir}"/>
                </xexec>
            </case>
            <case value="OpenCCM">
                <xexec executable="rcp" showCmd="true">
                    <arg line="-r localhost:${config.OpenCCM.install.dir}"/>            
                    <arg value="${install.tools.dir}"/>
                </xexec>
                <basename property="OpenCCM.basename" 
                          file="${config.OpenCCM.install.dir}"/>
                <selecttoken string="${config.OpenCCM.bin.dir}" 
                             delimiter="${OpenCCM.basename}${FS}"
                             tokenNumber="1" 
                             property="short.OpenCCM.bin.dir"/>
                <property name="tools.bin.dir" value="${install.tools.dir}${FS}${OpenCCM.basename}${FS}${short.OpenCCM.bin.dir}"/>
                <findfile file="*"
                          dir="${install.tools.dir}${FS}${OpenCCM.basename}"
                          recursive="true"
                          property="all.files"
                          separator=";"/>
                
                <foreach list="${all.files}" target="-custumisation-OpenCCM-file"
                         param="file" inheritall="true" delimiter="; "/>
            </case>
            <case value="JacORB">
                <xexec executable="rcp" showCmd="true">
                    <arg line="-r localhost:${config.JacORB.install.dir}"/>            
                    <arg value="${install.tools.dir}"/>
                </xexec>
            </case>
            <case value="CPPUnit">
                <xexec executable="rcp" showCmd="true">
                    <arg line="-r localhost:${config.CPPUnit.install.dir}"/>            
                    <arg value="${install.tools.dir}"/>
                </xexec>
            </case>
            <case value="FtpJAVA">
                    <echo>FtpJAVA</echo>
            </case>            
            <default>
                <fail>unknown tool '${local-tool}'.</fail>
            </default>
        </switch>


        <property file="${install.tools.conf}"/>

        <if>
            <isset property="tools.bin.dir"/>
            <then>
                <property name="temp.tools.path" value="${tools.path}${PS}${tools.bin.dir}"/>
            </then>
            <else>
                <property name="temp.tools.path" value="${tools.path}"/>
            </else>
        </if>
        <if>
            <isset property="tools.lib.dir"/>
            <then>
                <property name="temp.tools.ld.library.path" value="${tools.ld.library.path}${PS}${tools.lib.dir}"/>
            </then>
            <else>
                <property name="temp.tools.ld.library.path" value="${tools.ld.library.path}"/>
            </else>
        </if>

        <echo file="${install.tools.conf}" append="true">
            tools.ld.library.path = ${temp.tools.ld.library.path}
            tools.path = ${temp.tools.path}
        </echo>
    </target>

    <!-- =======================================================================
    the "-create-configuration-script-file"  target create a configure.sh script 
    into the install directory to replace token by the new right values
    -->
    <target name="-create-configuration-script-file">
        <basename property="j2sdk.basname" file="${config.J2SDK.install.dir}"/>
        <echo file="${install-dir-dirname}${FS}${config.product.name}-${product.version}${FS}configure.sh">
            
INSTALL_PATH=$PWD;
JAVA_VERSION=${config.Foundation.java.compiler.ver};
            
echo "==========================================================";
echo "CDMW installation tool";
echo "";
echo "This tool will guide you along the installation";
echo "";
echo "First part";
echo "----------";
echo "";
echo "CDMW will check if all correct versions have been installed and will";
echo "prompt you in case of error";
echo "";
echo "Second part";
echo "----------";
echo "";
echo "CDMW will configure itself";
echo "==========================================================";

echo "";
echo "";
echo "Enter the FTP home directory";
echo "[/home/ftp]";
read input;
if test "$input" != ""
    then
        FTP_DIR=$input;
    else
        FTP_DIR="/home/ftp";
fi;


echo "";
echo "";
echo "Check of tools installation in accordance with the configuration selected";
echo "------------------------------------------------------------------------";
echo "Check Java version $JAVA_VERSION"
java -version 2>/tmp/testjavaversion.temp
java_version=`cat  /tmp/testjavaversion.temp | grep version | cut  -d\" -f2`
rm /tmp/testjavaversion.temp

if test "$java_version" != "$JAVA_VERSION"
then
echo "Bad version for Java"
echo "The required version is $JAVA_VERSION"
exit 0
else
echo "Test OK"
fi
echo "";

echo "Check the FTP home directory $FTP_DIR"
if test ! -d $FTP_DIR
then
echo "WARNING: The FTP home ($FTP_DIR) is not a directory";
exit 0
else
    
# check if the ftp dir is writeable;
if test ! -w $FTP_DIR
then 
 $echo "WARNING: Cannot write into $FTP_DIR";
 exit 0;
 else
 echo "Test OK"
fi
fi




echo "";
echo "";
echo "Customization of source files in accordance with selected configuration";
echo "------------------------------------------------------------------------";

find_java=`which java | grep java`
if [ -h "$find_java" ]; then
    JDK_LIB=`ls -l $find_java | cut -d'>' -f2 | xargs dirname`
else
    JDK_LIB=`dirname $find_java`
fi;
if test -f  delivery/bin/jvm.sh
then
cat delivery/bin/jvm.sh | sed s%@CDMW_TOOLS_INSTALL_PATH@/${j2sdk.basname}%$JDK_LIB/..%g > jvm.sh.tmp ; 
cp jvm.sh.tmp delivery/bin/jvm.sh; 
rm jvm.sh.tmp; 
fi


for f in `find $INSTALL_PATH/delivery -name "site.mk" -exec grep -l "FTP_DIR" {} \;`; do 
	echo $f; 
	cat $f | sed s%FTP_DIR[-+_a-zA-Z0-9/=:]*%FTP_DIR=$FTP_DIR%g > $f.tmp ; 
	cp $f.tmp $f; 
    rm $f.tmp; 
	done; 


for f in `find $INSTALL_PATH/delivery -name "*" -type f -exec grep -l "@CDMW_INSTALL_PATH@" {} \;`; do 
	echo $f; 
	cat $f | sed s%@CDMW_INSTALL_PATH@%$INSTALL_PATH/delivery%g > $f.tmp ; 
	cp $f.tmp $f; 
    rm $f.tmp; 
	done; 


for f in `find $INSTALL_PATH/delivery -name "*" -type f -exec grep -l "@CDMW_TOOLS_INSTALL_PATH@" {} \;`; do 
	echo $f; 
	cat $f | sed s%@CDMW_TOOLS_INSTALL_PATH@%$INSTALL_PATH/tools%g > $f.tmp ; 
	cp $f.tmp $f; 
    rm $f.tmp;
	done; 


for f in `find $INSTALL_PATH/tools -name "*" -type f -exec grep -l "@CDMW_TOOLS_INSTALL_PATH@" {} \;`; do 
	echo $f; 
	cat $f | sed s%@CDMW_TOOLS_INSTALL_PATH@%$INSTALL_PATH/tools%g > $f.tmp ; 
	cp $f.tmp $f; 
    rm $f.tmp;
	done; 


echo " ";
echo " ";
echo "To compile and run CDMW Application, export the following variable";
echo "export PATH=$INSTALL_PATH/delivery/bin${PS}${tools.path}${PS}$PATH";
echo "export LD_LIBRARY_PATH=$INSTALL_PATH/delivery/lib${PS}${tools.ld.library.path}${PS}$LD_LIBRARY_PATH";


echo " ";
echo " ";
echo "The CDMW install is now configured";
echo "You can built demos";
echo " ";
echo " ";
        </echo>


        <chmod file="${install-dir-dirname}${FS}${config.product.name}-${product.version}${FS}configure.sh"  perm="a+x"/>
    </target>


    <!-- =======================================================================
    the "-custumisation-delivery-file" target replace, in the cdmw sources,
    all specific path by token or by other value following the install configuration
    -->
    <target name="-custumisation-delivery-file">       
        <echo> Custumisation files ... </echo>
        <findfile file="*"
                  dir="${install.dir}"
                  recursive="true"
                  property="all.files"
                  separator=";"/>
        
        <foreach list="${all.files}" target="-custumisation-file"
                 param="file" inheritall="true" delimiter="; "/>
    </target>


    <!-- =======================================================================
    the "-custumisation-file" target replace all specific path by token or by 
    other value following the install configuration
    -->
    <target name="-custumisation-file">       
        <isbinary file="${file}" property="is.a.binary.file"/>        
        <!-- change token only on no binary files and no source files -->
        
        <var name="tools-list" value="${config.sel.min.compilers} MAKE BINUTILS"/>
        <var name="tools-list" value="${tools-list} ${config.sel.min.orbs}"/>
        <var name="tools-list" value="${tools-list} ${config.sel.min.tools}"/>
        
        <dirname property="install.dir.dirname" file="${install.dir}"/>
        <basename property="file.basename" file="${file}"/>
        <var name="file.basename.ext" value="${file.basename}${FS}"/>
        <if>
            <not>
                <or>
                    <isset property="is.a.binary.file"/>
                    <contains string="${file.basename.ext}" substring=".i${FS}"/>
                    <contains string="${file.basename.ext}" substring=".idl${FS}"/>
                    <contains string="${file.basename.ext}" substring=".cpp${FS}"/>
                    <contains string="${file.basename.ext}" substring=".hpp${FS}"/>
                    <contains string="${file.basename.ext}" substring=".h${FS}"/>
                    <contains string="${file.basename.ext}" substring=".cpp${FS}"/>
                    <contains string="${file.basename.ext}" substring=".java${FS}"/>
                </or>
            </not>
            <then>
                <loadfile srcFile="${file}" property="file.content"/>
                <if>
                    <isset property="is.install.qualif"/>
                    <then>
                        <!-- replace tokens -->
                        <foreach list="${tools-list}" target="-apply-regex"
                                 param="local-tool" inheritall="true" delimiter=" "/>
                    </then>                
                    <else>                    
                        <!-- replace tokens -->
                        <if>
                            <contains string="${file.content}" substring="${config.install.dir}"/>
                            <then>
                                <replaceregexp file="${file}" match="([=:;&quot; ])${config.install.dir}"
                                               replace="\1@CDMW_INSTALL_PATH@"  flags="g"/>
                           </then>
                        </if>
                        <if>
                            <contains string="${file.content}" substring="${install.dir.dirname}${FS}delivery"/>
                            <then>
                                <replaceregexp file="${file}" match="([=:;&quot; ])${install.dir.dirname}${FS}delivery"
                                               replace="\1@CDMW_INSTALL_PATH@"  flags="g"/>
                           </then>
                        </if>
                        <foreach list="${tools-list}" target="-apply-regex"
                                 param="local-tool" inheritall="true" delimiter=" "/>
                    </else>
                </if>
            </then>
        </if>
    </target>

    <!-- =======================================================================
    the "-apply-regex" target applied regexp for a specific tools
    -->
    <target name="-apply-regex">             
        <propertycopy name="tool.install.dir" silent="true"
                      from="config.${local-tool}.install.dir"/>

        <if>
            <and>
                <isset property="tool.install.dir"/>
                <contains string="${file.content}" substring="${tool.install.dir}"/>
            </and>
            <then>
                <basename property="tool.basename" file="${tool.install.dir}"/>
                 <if>
                    <isset property="is.install.qualif"/>
                    <then>
                        <if>
                            <or>
                                <equals arg1="${local-tool}" arg2="TAO"/>
                                <equals arg1="${local-tool}" arg2="TAOOpenFusion"/>
                                <equals arg1="${local-tool}" arg2="JacORB" />
                            </or>
                            <then>
                                <dirname property="tool.dirname" file="${tool.install.dir}"/>
                                <if>
                                    <not><equals arg1="${local-tool}" arg2="JacORB" /></not>
                                    <then>
                                        <dirname property="tool.dirname2" file="${tool.dirname}"/>
                                        <basename property="tool.basename2" file="${tool.dirname2}"/>
					<replaceregexp file="${file}" match="([=:;&quot; ])${tool.dirname2}"
					    replace="\1${install.tools.dir}${FS}${tool.basename2}"  flags="g"/>
                                    </then>
				    <else>
					<basename property="tool.basename2" file="${tool.dirname}"/>
					<replaceregexp file="${file}" match="([=:;&quot; ])${tool.dirname}"
					    replace="\1${install.tools.dir}${FS}${tool.basename2}"  flags="g"/>
				    </else>
                                </if>
                            </then>
                            <else>
                                <replaceregexp file="${file}" match="([=:;&quot; ])${tool.install.dir}"
                                    replace="\1${install.tools.dir}${FS}${tool.basename}"  flags="g"/>                               
                            </else>
                        </if>
                    </then>
                    <else>
                        <if>
                            <or>
                                <equals arg1="${local-tool}" arg2="TAO"/>
                                <equals arg1="${local-tool}" arg2="TAOOpenFusion"/>
                                <equals arg1="${local-tool}" arg2="JacORB" />
                            </or>
                            <then>
                                <dirname property="tool.dirname" file="${tool.install.dir}"/>
                                <if>
                                    <not><equals arg1="${local-tool}" arg2="JacORB" /></not>
                                    <then>
                                        <dirname property="tool.dirname2" file="${tool.dirname}"/>
                                        <basename property="tool.basename2" file="${tool.dirname2}"/>
					<replaceregexp file="${file}" match="([=:;&quot; ])${tool.dirname2}"
					    replace="\1@CDMW_TOOLS_INSTALL_PATH@${FS}${tool.basename2}"  flags="g"/>
                                    </then>
				    <else>
					<basename property="tool.basename2" file="${tool.dirname}"/>
					<replaceregexp file="${file}" match="([=:;&quot; ])${tool.dirname}"
					    replace="\1@CDMW_TOOLS_INSTALL_PATH@${FS}${tool.basename2}"  flags="g"/>
				    </else>
                                </if>
                            </then>
                            <else>
                                <replaceregexp file="${file}" match="([=:;&quot; ])${tool.install.dir}"
                                    replace="\1@CDMW_TOOLS_INSTALL_PATH@${FS}${tool.basename}"  flags="g"/>
                            </else>
                        </if>                       
                    </else>
                </if>
            </then>
        </if>
        <xvar name="tool.install.dir" unset="true"/>
        <xvar name="tool.basename" unset="true"/>
        
    </target>

    <!-- =======================================================================
    the "-custumisation-OpenCCM-file" target replace all specific path by token or by 
    other value following the install configuration
    -->
    <target name="-custumisation-OpenCCM-file">       
        <isbinary file="${file}" property="is.a.binary.file"/>        
        <!-- find the dirname -->
        <dirname property="OpenCCM.install.dir.dirname" 
                 file="${config.OpenCCM.install.dir}"/>
        <!-- change token only on no binary file -->
        <if>
            <not>
                <isset property="is.a.binary.file"/>
            </not>
            <then>
                <loadfile srcFile="${file}" property="file.content"/>
                <if>
                    <or>
                        <contains string="${file.content}" substring="${OpenCCM.install.dir.dirname}"/>
                    </or>
                    <then>
                        <!-- replace tokens -->
                        <if>
                            <isset property="is.install.qualif"/>
                            <then>
                                <replaceregexp file="${file}" match="([=:;&quot; ])${OpenCCM.install.dir.dirname}"
                                               replace="\1${install.tools.dir}${FS}"  flags="g"/>
                            </then>
                            <else>
                                <replaceregexp file="${file}" match="([=:;&quot; ])${OpenCCM.install.dir.dirname}"
                                               replace="\1@CDMW_TOOLS_INSTALL_PATH@"  flags="g"/>
                                
                            </else>
                        </if>
                    </then>
                </if>
            </then>
        </if>                
    </target>


    <!-- =======================================================================
    The "-create-filtersetid" target create filtersetid for the Site.properties
    file and the Install.properties files
    -->
    <target name="-create-filtersetid">
        <!-- find the basename of the site.properties files -->
        <!--
        <basename property="build.site.properties.basename" 
                  file="${build.site.properties}"/>
        -->
        <!-- find the dirname of the site.properties files -->
        <!--
        <dirname property="build.site.properties.dirname" 
                 file="${build.site.properties}"/>
        -->
        
        <!-- find the site.properties files -->
        <!--
        <findfile file="${build.site.properties.basename}" 
                  dir="${build.site.properties.dirname}"
                  findFirst="true" 
                  property="build.site.properties.exist"/>
        -->
        <available
            file="${build.site.properties}"
            property="build.site.properties.exist"
            />
        
        <if>
            <isset property="build.site.properties.exist"/>
            <then>
                <!--create a filtersetid with the site.properties files -->
                <xloadproperties srcFile="${mb.site.properties}" 
                                 filtersetid="my.site.tokens"/>
            </then>
            <else>
                <fail>The file '${mb.site.properties}' can't be found.</fail>
            </else>
        </if>
        
        <!-- find the basename of the install.properties files -->
        <!--
        <basename property="build.install.tokens.properties.basename" 
                  file="${install.tokens.file}"/>
        -->
        <!-- find the dirname of the install.properties files -->
        <!--
        <dirname property="build.install.tokens.properties.dirname" 
                 file="${install.tokens.file}"/>
        -->
        
        <!-- find the install.properties files -->
        <!--
        <findfile file="${build.install.tokens.properties.basename}" 
                  dir="${build.install.tokens.properties.dirname}"
                  findFirst="true" 
                  property="build.install.tokens.properties.exist"/>
        -->
        <condition property="build.install.tokens.properties.exist">
            <and>
                <available file="${install.tokens.file}" />
                <not><isemptyfile file="${install.tokens.file}" /></not>
            </and>
        </condition>
        
        <if>
            <and>
                <isset property="build.site.properties.exist"/>
                <isset property="build.install.tokens.properties.exist" />
            </and>
            <then>
                <if>
                    <isset property="is.install.valid"/>
                    <then>
                        <copy file="${install.tokens.file}" 
                              tofile="${install.tokens.file}-valid"
                              overwrite="true"
                        />
                        <replaceregexp
                            file="${install.tokens.file}-valid"
                            match="${config.install.dir}"
                            replace="${install.dir}"
                            flags="g"
                        />
                        <xloadproperties
                            srcFile="${install.tokens.file}-valid"
                            filtersetid="my.install.tokens"
                        />
                    </then>
                </if>
                <if>
                    <isset property="is.install.qualif"/>
                    <then>
                        <copy file="${install.tokens.file}" 
                              tofile="${install.tokens.file}-qualif"
                              overwrite="true"
                        />
                        <replaceregexp
                            file="${install.tokens.file}-qualif"
                            match="${config.install.dir}"
                            replace="${install.dir}"
                            flags="g"
                        />
                        <xloadproperties
                            srcFile="${install.tokens.file}-qualif" 
                            filtersetid="my.install.tokens"
                        />
                    </then>                
                </if>
                <if>
                    <or>
                        <isset property="is.install"/>
                        <isset property="is.install.binary"/>
                    </or>
                    <then>
                        <xloadproperties
                            srcFile="${install.tokens.file}"
                            filtersetid="my.install.tokens"
                        />
                    </then>                
                </if>
            </then>
            <else>
                <fail>The file '${install.tokens.file}' can't be found.</fail>
            </else>
        </if>
    </target>   
    
    
    <!-- =======================================================================
    The "-change-permissions-on-sh-file" target change permission on the 
    executable script files
    -->
    <target name="-change-permissions-on-sh-file">
        <chmod perm="a+x">
            <fileset dir="${install.dir}${FS}bin">
                <include name="**/*.sh"/>
                <include name="**/*.guess"/>
            </fileset>
        </chmod>
    </target>

    <!-- =======================================================================
    The "-copy-all-idl-files" target copy the list of idl files present
    -->
    <target name="-copy-all-idl-files" depends="-create-idl-list-file">
        <if>
            <not>
                <equals arg1="${csc.idl.list}" arg2=" "/>
            </not>
            <then>
                <!-- if the list is not null -->
                <foreach list="${csc.idl.list}" target="-copy-idl-files"
                         param="idl.file" inheritall="true" delimiter=" "/>
            </then>
        </if>
    </target>


    <!-- =======================================================================
    The "-copy-idl-files" target
    -->
    <target name="-copy-idl-files">        
        <basename property="basename.idl.file" file="${idl.file}"/>

        <!-- find the idl files in the csci directory -->
        <if>
            <available file="${my.csci.delivery.dir}" type="dir"/>
            <then>
                <findfile file="${basename.idl.file}" 
                    dir="${my.csci.delivery.dir}"
                    findFirst="true" recursive="true"
                    property="idl.file.to.copy"/>
            </then>
        </if>
            <if>
            <not>
                <isset property="idl.file.to.copy"/>
            </not>
            <then>
                <findfile file="${basename.idl.file}" 
                          dir="${my.csc.delivery.dir}"
                          findFirst="true" recursive="true"
                          property="idl.file.to.copy"/>
            </then>
        </if>
        <!-- copy the idl files in the install directory -->
        <copy file="${idl.file.to.copy}" todir="${install.dir}${FS}idl"/>
        
        <antcall target="-copy-idl3-files"/>        
    </target>


    <!-- =======================================================================
    The "-copy-idl3-files" target
    -->
    <target name="-copy-idl3-files" if="my.delivery.uses.codegen">
        <if>
            <contains string="${idl.file.to.copy}" substring="_cif.idl"/>
            <then>
                <basename property="basename.idl.file.to.copy" 
                          file="${idl.file.to.copy}"/>
                <selecttoken string="${basename.idl.file.to.copy}" 
                             delimiter="_cif.idl"
                             tokenNumber="0" property="short.idl.file"/>
                <findfile file="${short.idl.file}.idl" 
                          dir="${my.cscs.target}${FS}.."
                          findFirst="true" recursive="true"
                          property="idl3.file.to.copy"/>
                <if>
                    <not>
                        <isset property="idl3.file.to.copy"/>
                    </not>
                    <then>
                        <findfile file="${short.idl.file}.idl" 
                                  dir="${my.csci.location}"
                                  findFirst="true" recursive="true"
                                  property="idl3.file.to.copy"/>
                    </then>
                </if>
                <!-- copy the idl files in the install directory -->
                <copy file="${idl3.file.to.copy}" todir="${install.dir}${FS}idl"/>
            </then>
        </if>
    </target>    
    

    <!-- =======================================================================
        The "-find-target-cscs" target returns the list of all the CSCs to
        visit.
    -->
    <target name="-find-target-cscs">
        <!-- location of the package description file -->
        <property name="sloppy.check" value="false"/>
        <property name="install.pkg.desc"
                  location="${config.csc.data.dir}${FS}PkgDesc.xml"/>

        <if>
            <and>
                <isset property="config.sel.min.cscis"/>
                <isset property="config.sel.interfaces"/>
                <isset property="config.sel.packages"/>
            </and>
            <then>
                <!-- find the cscs list to install-->
                <findcscs pkgdesc="${install.pkg.desc}" 
                          addProperty="install.target.cscs"
                          cscis="${config.sel.min.cscis}"
                          interfaces="${config.sel.interfaces}"
                          packages="${config.sel.packages}"
                          cscType="build"/>

                <var name="my.list" value="${install.target.cscs}"/>

                <if>
                    <isset property="is.install.valid"/>
                    <then>
                        <findcscs pkgdesc="${install.pkg.desc}" 
                                  addProperty="valid.target.cscs"
                                  cscis="${config.sel.min.cscis}"
                                  interfaces="${config.sel.interfaces}"
                                  packages="${config.sel.packages}"
                                  cscType="validation-test"/>
                      
                        <if>
                            <isset property="only.validation.test"/>
                            <then>
                                <var name="my.list"
                                     value="${valid.target.cscs}"/>
                            </then>
                            <else>
                                <var name="my.list"
                                     value="${my.list} ${valid.target.cscs}"/>
                            </else>
                        </if>
                    </then>
                </if>

                <if>
                    <isset property="is.install.qualif"/>
                    <then>
                        <findcscs pkgdesc="${install.pkg.desc}" 
                                  addProperty="qualif.target.cscs"
                                  cscis="${config.sel.min.cscis}"
                                  interfaces="${config.sel.interfaces}"
                                  packages="${config.sel.packages}"
                                  cscType="qualification-test"/>
                        
                        <if>
                            <isset property="only.qualification.test"/>
                            <then>
                                <var name="my.list"
                                     value="${qualif.target.cscs}"/>
                            </then>
                            <else>
                                <var name="my.list"
                                     value="${my.list} ${qualif.target.cscs}"/>
                            </else>
                        </if>
                    </then>
                </if>
		
                <if>
                    <isset property="config.Splice.install.dir"/>
                    <then>
                        <var name="p" value="${config.ProdTests.location}"/>
                        <var name="p" value="${p}${FS}demos${FS}demo_splice"/>
                        <var name="p" value="${p}${FS}c++"/>

                        <var name="my.list" value="${my.list} ${p}"/>
                    </then>
                    <else>
                        <stringmanip action="removetoken"
                                     string="${my.list}"
                                     substring="${config.ProdTests.location}${FS}demos${FS}demo_ft_dcps${FS}c++"
                                     property="my.list"
                                     override="true"/>
                    </else>
                </if>
                <if>
                    <not>
                        <isset property="only.tools"/>
                    </not>
                    <then>
                        <!-- for each csc, we check if the delivery must be 
                        export or not -->
                        <foreach list="${my.list}" target="-copy-deliveries"
                                 param="my.cscs.target" inheritall="true" 
                                 delimiter=" "/>
                    </then>
                </if>
            </then>
        </if>
    </target>

    <!-- =======================================================================
    The "-copy-deliveries" target load the CSCPropertie file to copy deliveries
    files or demo directories
    -->
    <target name="-copy-deliveries">
        <!-- find the Build.xml file -->
        <findfile file="Build*.xml" 
                  dir="${my.cscs.target}"
                  findFirst="true" recursive="false"
                  property="csc.build.file"/>

        <var name="my.var" 
             value="${my.cscs.target}${FS}${config.csc.data.dir}"/>
        <var name="my.var"
             value="${my.var}${FS}${config.csc.properties.file}"/>
        <property name="my.csc.properties" value="${my.var}"/>

        <if>
            <isset property="csc.build.file"/>
            <then>
                <dirname file="${csc.build.file}" property="my.csc.location"/>
                <property name="my.csc.delivery.dir"
                    value="${my.csc.location}${FS}${config.delivery.dir}"/>
                <!-- if the Build.xml file exist : 
                the csc is a build directory -->
                <tempfile property="install.conf" destdir="${TMP}"
                          prefix="${tmpfile.prefix}_install_conf"
                          suffix="#${site.id}.properties"/>  

                <!-- load the CSCProperties (via the Build.xml file) -->
                <ant dir="${my.cscs.target}" antfile="${csc.build.file}"
                     target="-load-csc-properties-for-install"/>
                
                <property file="${install.conf}"/>
                <delete file="${install.conf}"/>
                <!-- if deliveries are present -->
                <if>
                    <isset property="install.csc.all.deliveries"/>
                    <then>
                        <!-- for each delivery, we will to copy it -->
                        <foreach list="${install.csc.all.deliveries}" 
                                 target="-copy-delivery"
                                 param="my.delivery.basename" inheritall="true" 
                                 delimiter=" "/>
                    </then>
                </if>
            </then>
            <else> 
                <!-- if the Build.xml file don't exist : 
                load the CSCproperties.xml file -->
                <var name="p" value="${config.Build.location}${FS}configuration"/>
                <var name="p" value="${p}${FS}${config.csc.data.dir}${FS}"/>
                <var name="p" value="${p}DepsInfo.properties"/>

                <loadproperties srcFile="${p}">
                    <filterchain>
                        <expandproperties/>
                    </filterchain>
                </loadproperties>
                
                <loadcscproperties file="${my.csc.properties}" prefix="install">
                    <filterset>
                        <filtersfile file="${build.site.properties}"/>
                    </filterset>
                </loadcscproperties>

                <if>
                    <or>
                        <equals arg1="${install.csc.type}" arg2="demo"/>
                        <equals arg1="${install.csc.type}" arg2="perftest"/>
                    </or>
                    <then>
                        <if>
                            <equals arg1="${install.csc.type}" arg2="demo"/>
                            <then>
                                <!-- if the csc type is demo -->
                                <antcall target="-copy-demo"/>
                            </then>
                        </if>
                        <if>
                            <equals arg1="${install.csc.type}" arg2="perftest"/>
                            <then>
                                <!-- if the csc type is demo -->
                                <antcall target="-copy-perftest"/>
                            </then>
                        </if>
                    </then>
                    <else>
                        <var name="s" value="In file ${my.csc.properties}"/>
                        <var name="s" value="${s} the type is not 'demo' and"/>
                        <var name="s" value="${s} there are no"/>
                        <var name="s" value="${s} Build*.xml file"/>
                        <fail>${s}</fail>
                    </else>
                </if>
            </else>            
        </if>
    </target>

    <!-- ======================================================================
    the "-copy-perftest" target copy the perftest into the install directory
    -->
    <target name="-copy-perftest">
        <!-- build the perf.directory property -->
        <property name="perf.directory"
		  location="${config.ProdTests.location}${FS}perftests"/>

        <!-- build the install.perf.directory property -->
        <property name="install.perf.directory" location="${install.dir}"/>

        <!-- copy perf directory -->
        <echo>Copy perftests ...</echo>
        <mkdir dir="${install.perf.directory}"/>
        <exec executable="cp">
            <arg line="-r ${perf.directory}"/>
            <arg line="${install.perf.directory}"/>
        </exec>
    </target>

    <!-- ======================================================================
    the "-copy-demo" target copy the demo into the install directory
    -->
    <target name="-copy-demo" depends="-create-filtersetid">
        <!-- build the demo.directory property -->
        <var name="my.var" value="${config.ProdTests.location}${FS}demos"/>
        <var name="my.var" value="${my.var}${FS}${install.csc.name}"/>
        <var name="my.var" value="${my.var}${FS}${install.csc.lang}"/>
        <property name="demo.directory" value="${my.var}"/>

        <!-- build the install.demo.directory property -->
        <var name="my.var" value="${install.dir}${FS}demos"/>
        <var name="my.var" value="${my.var}${FS}${install.csc.name}"/>
        <property name="install.demo.directory" value="${my.var}"/>

        <!-- copy demo directory -->
        <echo>Copy ${demo.directory} ...</echo>
        <mkdir dir="${install.demo.directory}"/>
        <exec executable="cp">
            <arg line="-r ${demo.directory}"/>
            <arg line="${install.demo.directory}"/>
        </exec>

        <findfile file="CSCProperties.xml" 
                  dir="${install.demo.directory}${FS}${install.csc.lang}"
                  findFirst="true" recursive="false"
                  property="cscproperties.file.to.delete"/>
        <delete file="${cscproperties.file.to.delete}"/>
        <findfile file="site.mk" 
                  dir="${install.demo.directory}${FS}${install.csc.lang}"
                  findFirst="true" recursive="false"
                  property="site.file.to.delete"/>
        <delete file="${site.file.to.delete}"/>

       
        <!-- copy site.mk file with filterset -->
        <if>
            <available file="${demo.directory}${FS}site.mk"/>
            <then>
                <if>
                    <or>
                        <isset property="is.install.valid" />
                        <isset property="is.install.qualif" />
                    </or>
                    <then>
                        <copy file="${demo.directory}${FS}site.mk" 
                            todir="${install.demo.directory}${FS}${install.csc.lang}">
                            <filterset>
                                <filter token="config.install.dir" value="${install.dir}"/>
                            </filterset>
                            <filterset refid="my.site.tokens"/>                
                            <filterset refid="my.install.tokens"/>
                        </copy>
                    </then>
                    <else>
                        <copy file="${demo.directory}${FS}site.mk" 
                            todir="${install.demo.directory}${FS}${install.csc.lang}">
                            <filterset>
                                <filter token="config.install.dir" value="${install.dir}"/>
                            </filterset>
                            <filterset refid="my.site.tokens"/>                
                        </copy>
                    </else>
                </if>
            </then>
        </if>
        
        <if>
            <isset property="config.ProdTests.cpp.orb" />
            <then>
                <stringmanip
                    string="${config.ProdTests.cpp.orb}"
                    action="lowercase"
                    property="csci.cpp.orb.demo.lowercase"
                />
            </then>
        </if>

        <!-- find all specific files with the orb extension 
        at the end of the file -->
        <findfile file="*.${csci.cpp.orb.demo.lowercase}"
                  dir="${install.demo.directory}${FS}${install.csc.lang}"
                  recursive="true"
                  property="specific.cpp.orb.file"/>
        
        <!-- for each specific file, create the good target file -->
        <if>
            <isset property="specific.cpp.orb.file"/>
            <then>
                <foreach list="${specific.cpp.orb.file}" delimiter=" "
                         inheritall="true"
                         target="-copy-specific-file" param="my.param.file"/>
            </then>
        </if>

        <stringmanip string="${config.ProdTests.java.orb}" action="lowercase"
                     property="csci.java.orb.demo.lowercase"/>

        <!-- find all specific files with the orb extension 
        at the end of the file -->
        <findfile file="*.${csci.java.orb.demo.lowercase}"
                  dir="${install.demo.directory}${FS}${install.csc.lang}"
                  recursive="true"
                  property="specific.java.orb.file"/>
        
        <!-- for each specific file, create the good target file -->
        <if>
            <isset property="specific.java.orb.file"/>
            <then>
                <foreach list="${specific.java.orb.file}" delimiter=" "
                         inheritall="true"
                         target="-copy-specific-file" param="my.param.file"/>
            </then>
        </if>
    </target>
    

    <!-- =======================================================================
    the "-copy-specific-file" target copy the file.orb to file
    -->
    <target name="-copy-specific-file">
        <if>
            <isset property="csci.cpp.orb.demo.lowercase"/>
            <then>
                <selecttoken string="${my.param.file}" 
                             delimiter=".${csci.cpp.orb.demo.lowercase}"
                             tokenNumber="0" property="cpp.file.to.copy"/>
                <copy file="${my.param.file}" tofile="${cpp.file.to.copy}"/>
            </then>
        </if>

        <if>
            <isset property="csci.java.orb.demo.lowercase"/>
            <then>
                <selecttoken string="${my.param.file}" 
                             delimiter=".${csci.java.orb.demo.lowercase}"
                             tokenNumber="0" property="java.file.to.copy"/>
                <copy file="${my.param.file}" tofile="${java.file.to.copy}"/>
            </then>
        </if>
    </target>

    <!-- =======================================================================
    the "-copy-delivery" target check the type of delivery and build the right
    name of the delivery
    -->
    <target name="-copy-delivery" depends="-determine-information"
            if="the.delivery.is.exportable">

        <var name="my.var" value="${install.dir}${FS}include${FS}c++"/>
        <var name="my.var" value="${my.var}${FS}${install.csc.owner}"/>
        <var name="my.var" value="${my.var}${FS}${install.csc.name}"/>
        <property name="directory.to.install" value="${my.var}"/>

        <var name="my.var" value="${my.csci.location}${FS}"/>
        <var name="my.var" value="${my.var}${config.delivery.dir}${FS}"/>
        <var name="my.var" value="${my.var}${config.delivery.include.dir}"/>
        <var name="my.var" value="${my.var}${FS}c++${FS}${install.csc.owner}"/>
        <var name="my.var" value="${my.var}${FS}${install.csc.name}"/>
        <property name="directory.to.copy" value="${my.var}"/>

        <if>
            <equals arg1="${install.csc.lang}" arg2="c++"/>
            <then>
                <copy todir="${directory.to.install}" failonerror="false">
                    <fileset dir="${directory.to.copy}"/>
                </copy>
            </then>
        </if>

        <switch value="${my.delivery.type}">
            <!-- the delivery is an executable -->
            <case value="exe">
                <switch value="${my.delivery.lang}">
                    <case value="c++">
                        <!-- no need to do anything on the basename -->
                        <property name="my.delivery.name"
                                  value="${my.delivery.basename}"/>
                    </case>
                    <case value="java">
                        <property name="my.delivery.name"
                                  value="${my.delivery.basename}.jar"/>
                    </case>
                    <default>
                        <fail>unknown lang '${my.delivery.lang}'.</fail>
                    </default>
                </switch>

                <property name="dir.to.install.file"
                          value="${install.dir}${FS}bin"/>
            </case>

            <!-- the delivery is a library -->
            <case value="lib">

                <antcall target="-copy-all-idl-files"/>

                <switch value="${my.delivery.lang}">
                    <case value="c++">

                        <!-- determine the filename extension -->
                        <if>
                            <equals arg1="${config.cpp.shared}" arg2="y"/>
                            <then>
                                <property name="delivery.name.suffix"
                                          value=".so"/>
                            </then>
                            <else>
                                <property name="delivery.name.suffix"
                                          value=".a"/>
                            </else>
                        </if>

                        <!-- construct the name -->
                        <var name="my.var" value="${my.delivery.basename}"/>
                        <var name="my.var"
                             value="${my.var}${delivery.name.suffix}"/>

                        <property name="my.delivery.name"
                                  value="lib${product.lcase.name}${my.var}"/>
                        <property name="dir.to.install.file"
                                  value="${install.dir}${FS}lib${FS}c++"/>
                    </case>
                    <case value="java">
                        <var name="my.var" value="${my.delivery.basename}.jar"/>

                        <property name="my.delivery.name"
                                  value="lib${product.lcase.name}${my.var}"/>
                        <property name="dir.to.install.file"
                                  value="${install.dir}${FS}lib${FS}java"/>
                    </case>
                    <default>
                        <fail>unknown delivery type '${my.delivery.lang}'.</fail>
                    </default>
                </switch>
            </case>

            <!--the delivery is a jni library-->
            <case value="jnilib">
                <antcall target="-copy-all-idl-files"/>

                <var name="my.var" value="${my.delivery.basename}.so"/>
                <property name="my.delivery.name"
                          value="lib${product.lcase.name}${my.var}"/>
                <property name="dir.to.install.file"
                          value="${install.dir}${FS}lib${FS}c++"/>

            </case>

            <!-- the delivery is a data -->
            <case value="data">
                <!-- get the data list  -->
                <propertycopy name="my.deliveries.name"
                              from="install.csc.${my.delivery.basename}.sourcefiles"/>
            </case>
            <default>
                <fail>unknown delivery type '${my.delivery.type}'.</fail>
            </default>
        </switch>

        <!-- if the delivery is a directory, call the "-copy-data-file" target
        else copy the delivery -->
        <if>
            <equals arg1="${my.delivery.type}" arg2="data"/>
            <then>
                <foreach list="${my.deliveries.name}" target="-copy-data-file"
                         param="my.delivery.name" inheritall="true"
                         delimiter=" "/>
            </then>
            <else>
                <!-- determine the search directory -->
                <switch value="${install.csc.lang}">
                    <case value="java">
                        <if>
                            <equals arg1="${my.delivery.type}" arg2="jnilib"/>
                            <then>
                                <propertycopy property="csci.orb" silent="true"
                                from="config.${install.csc.owner}.cpp.orb"/>

                                <propertycopy property="csci.orb.ver" silent="true"
                                from="config.${install.csc.owner}.cpp.orb.ver"/>

                                <propertycopy property="csci.compiler"
                                from="config.${install.csc.owner}.cpp.compiler"/>

                                <propertycopy property="csci.compiler.ver"
                                from="config.${install.csc.owner}.cpp.compiler.ver"/>
                            </then>
                            <else>
                                <propertycopy property="csci.orb" silent="true"
                                from="config.${install.csc.owner}.java.orb"/>

                                <propertycopy property="csci.orb.ver" silent="true"
                                from="config.${install.csc.owner}.java.orb.ver"/>
                            </else>
                        </if>
                    </case>
                    <case value="c++">
                        <propertycopy property="csci.orb" silent="true"
                            from="config.${install.csc.owner}.cpp.orb"/>

                        <propertycopy property="csci.orb.ver" silent="true"
                            from="config.${install.csc.owner}.cpp.orb.ver"/>

                        <propertycopy property="csci.compiler"
                              from="config.${install.csc.owner}.cpp.compiler"/>

                        <propertycopy property="csci.compiler.ver"
                              from="config.${install.csc.owner}.cpp.compiler.ver"/>
                    </case>
                    <case value="ada">
                        <propertycopy property="csci.orb" silent="true"
                            from="config.${install.csc.owner}.ada.orb"/>

                        <propertycopy property="csci.orb.ver" silent="true"
                            from="config.${install.csc.owner}.ada.orb.ver"/>
                    </case>
                </switch>

                <var name="p.orig" value="${my.csci.delivery.dir}${FS}"/>

                <switch value="${my.delivery.type}">
                    <case value="exe">
                        <var name="p"
                            value="${config.delivery.executable.dir}${FS}"/>
                    </case>
                    <default>
                        <var name="p"
                             value="${config.delivery.library.dir}${FS}"/>
                    </default>
                </switch>

                <if>
                    <or>
                        <equals arg1="${install.csc.lang}" arg2="c++"/>
                        <equals arg1="${my.delivery.type}" arg2="jnilib"/>
                    </or>
                    <then>
                        <var name="p" value="${p}${config.site.csn}-"/>
                        <var name="p" value="${p}${csci.compiler}-"/>
                        <var name="p" value="${p}${csci.compiler.ver}"/>
                    </then>
                </if>

                <if>
                    <and>
                        <equals arg1="${install.csc.lang}" arg2="c++"/>
                        <isset property="csci.orb"/>
                    </and>
                    <then>
                        <var name="p" value="${p}-"/>
                    </then>
                </if>
                <if>
                    <and>
                        <isset property="csci.orb"/>
                        <not>
                            <equals arg1="${my.delivery.type}" arg2="jnilib"/>
                        </not>
                    </and>
                    <then>
                        <var name="p" value="${p}${csci.orb}-${csci.orb.ver}"/>
                    </then>
                </if>

                <if>
                    <available file="${p.orig}${p}" type="dir"/>
                    <then>
                        <findfile file="${my.delivery.name}" dir="${p.orig}${p}"
                                  findFirst="true" recursive="true"
                                  property="file.to.copy"/>
                    </then>
                </if>

                <if>
                    <and>
                        <not>
                            <isset property="file.to.copy"/>
                        </not>
                        <or>
                            <isset property="is.install.valid"/>
                            <isset property="is.install.qualif"/>
                        </or>
                    </and>
                    <then>
                        <var name="p.orig"
                             value="${my.csc.delivery.dir}${FS}"/>

                        <findfile file="${my.delivery.name}"
                                  dir="${p.orig}${p}"
                                  findFirst="true" recursive="true"
                                  property="file.to.copy"/>
                    </then>
                </if>

                <if>
                    <isset property="my.delivery.name"/>
                    <then>
                        <echo>Copy ${my.delivery.name} ...</echo>
                        <exec executable="cp">
                            <arg line="${file.to.copy}"/>
                            <arg line="${dir.to.install.file}"/>
                        </exec>
                    </then>
                    <else>
                        <fail>could not find ${my.delivery.name}</fail>
                    </else>
                </if>
            </else>
        </if>

        <if>
            <isset property="my.delivery.uses.codegen"/>
            <then>
                <foreach list="${my.delivery.cgen.cfgfile}"
                         target="-copy-generated-file"
                         param="my.codegen.file" inheritall="true"
                         delimiter=" "/>
            </then>
        </if>

    </target>


    <!-- =======================================================================
    the "-copy-generated-file" target copy file generated 
    -->
    <target name="-copy-generated-file">
        <echo>Copy generated files ...</echo>
        <basename file="${my.codegen.file}"
                  property="my.codegen.basename.file"/>
        <var name="my.var" value="${my.cscs.target}${FS}"/>
        <var name="my.var" value="${my.var}${config.csc.generated.dir}${FS}"/>
        <var name="my.var" value="${my.var}${my.delivery.name}${FS}"/>
        <var name="my.var" value="${my.var}${my.codegen.basename.file}${FS}"/>
        
        <copy todir="${install.dir}${FS}share">
            <fileset dir="${my.var}">
                <include name="**/*.dtd"/>
                <include name="**/*.cpf"/>
                <include name="**/*.ccd"/>
                <include name="**/*.idl"/>
            </fileset>
        </copy>
    </target>
    

    <!-- =======================================================================
    the "-copy-data-file" target copy data with filterset into the good 
    directory (bin or share)
    -->
    <target name="-copy-data-file" depends="-create-filtersetid">
        <dirname file="${my.delivery.name}"
                 property="dirname.data.file.to.copy"/>
        <if>
            <contains string="${dirname.data.file.to.copy}" 
                     substring="${FS}${config.csc.data.dir}${FS}"/>
            <then>
                <selecttoken string="${dirname.data.file.to.copy}" 
                         delimiter="${FS}${config.csc.data.dir}${FS}"
                         tokenNumber="1" property="path.after.data.dir"/> 
            </then>
        </if>
        
        <echo>Copy ${my.delivery.name} ...</echo>
        
        <!-- if the install.properties file exist, 
        use it to realise filterset -->
        <if>
            <isset property="build.install.tokens.properties.exist"/>
            <then>
                <if>
                    <or>
                        <contains string="${my.delivery.name}" 
                                  substring=".sh"/>
                        <contains string="${my.delivery.name}" 
                                  substring=".guess"/>
                    </or>
                    <then>
                        <!--
                        <if>
                            <or>
                                <isset property="is.install.valid" />
                                <isset property="is.install.qualif" />
                            </or>
                            <then>
                        -->
                                <copy file="${my.delivery.name}" 
                                    todir="${install.dir}${FS}bin" 
                                    overwrite="true">
                                    <filterset>
                                        <filter token="config.install.dir" value="${install.dir}"/>
                                    </filterset>
                                    <filterset refid="my.site.tokens"/>                
                                    <filterset refid="my.install.tokens"/>
                                </copy>
                        <!--
                            </then>
                            <else>
                                <copy file="${my.delivery.name}" 
                                    todir="${install.dir}${FS}bin" 
                                    overwrite="true">
                                    <filterset>
                                        <filter token="config.install.dir" value="${install.dir}"/>
                                    </filterset>
                                    <filterset refid="my.site.tokens"/>                
                                </copy>
                            </else>
                        </if>
                        -->
                    </then>
                    <else>
                        <if>
                            <isset property="path.after.data.dir"/>
                            <then>
                                <mkdir dir="${install.dir}${FS}share${FS}${path.after.data.dir}"/>
                                <property name="path.to.install.file"
                                          value="${install.dir}${FS}share${FS}${path.after.data.dir}"/>
                            </then>
                            <else>
                                <property name="path.to.install.file"
                                          value="${install.dir}${FS}share"/>
                            </else>
                        </if>
                        <!--
                        <if>
                            <or>
                                <isset property="is.install.valid" />
                                <isset property="is.install.qualif" />
                            </or>
                            <then>
                        -->
                                <copy file="${my.delivery.name}" 
                                    todir="${path.to.install.file}" 
                                    overwrite="true">
                                    <filterset>
                                        <filter token="config.install.dir" value="${install.dir}"/>
                                    </filterset>
                                    <filterset refid="my.site.tokens"/>                
                                    <filterset refid="my.install.tokens"/>
                                </copy>
                        <!--
                            </then>
                            <else>
                                <copy file="${my.delivery.name}" 
                                    todir="${path.to.install.file}" 
                                    overwrite="true">
                                    <filterset>
                                        <filter token="config.install.dir" value="${install.dir}"/>
                                    </filterset>
                                    <filterset refid="my.site.tokens"/>                
                                </copy>
                            </else>
                        </if>
                        -->
                    </else>
                </if>
            </then>
            <else>
                <if>
                    <or>
                        <contains string="${my.delivery.name}" substring=".sh"/>
                        <contains string="${my.delivery.name}" substring=".guess"/>
                    </or>
                    <then>
                        <copy file="${my.delivery.name}" 
                              todir="${install.dir}${FS}bin" 
                              overwrite="true">
                            <filterset refid="my.site.tokens"/>            
                        </copy>
                    </then>
                    <else>
                        <if>
                            <isset property="path.after.data.dir"/>
                            <then>
                                <mkdir dir="${install.dir}${FS}share${FS}${path.after.data.dir}"/>                                
                                <property name="path.to.install.file"
                                          value="${install.dir}${FS}share${FS}${path.after.data.dir}"/>                               
                            </then>
                            <else>
                                <property name="path.to.install.file"
                                          value="${install.dir}${FS}share"/>                                   
                            </else>
                        </if>
                        <copy file="${my.delivery.name}" 
                              todir="${path.to.install.file}" 
                              overwrite="true">
                            <filterset refid="my.site.tokens"/>            
                        </copy>
                    </else>
                </if>
            </else>
        </if>        
        
        <chmod perm="a+x">
            <fileset dir="${install.dir}${FS}share">
                <include name="**/*.sh"/>
                <include name="**/*.guess"/>
            </fileset>
        </chmod>
    </target>
    
    
    <!-- ======================================================================
    the "-create-idl-list-file" target create the list of idl files
    -->
    <target name="-create-idl-list-file">
        <var name="csc.idl.list" value=" "/>
        <if>
            <isset property="install.csc.${my.delivery.basename}.idl.server"/>
            <then>
                <propertycopy name="server.idl.file"
                              from="install.csc.${my.delivery.basename}.idl.server"/>
                <var name="csc.idl.list" 
                     value="${csc.idl.list} ${server.idl.file}"/>
            </then>
        </if>
        <if>
            <isset property="install.csc.${my.delivery.basename}.idl.client"/>
            <then>
                <propertycopy name="client.idl.file"
                              from="install.csc.${my.delivery.basename}.idl.client"/>
                <var name="csc.idl.list" 
                     value="${csc.idl.list} ${client.idl.file}"/>
            </then>
        </if>
        <if>
            <isset property="install.csc.${my.delivery.basename}.idl.tie"/>
            <then>
                <propertycopy name="tie.idl.file"
                              from="install.csc.${my.delivery.basename}.idl.tie"/>
                <var name="csc.idl.list" 
                     value="${csc.idl.list} ${tie.idl.file}"/>
            </then>
        </if>
    </target>


    <!-- =======================================================================
    the "-determine-information" target position some properties after the 
    loadcscproperties
    -->
    <target name="-determine-information">
        
        <!-- the CSCI location -->
        <propertycopy name="my.csci.location"
                      from="config.${install.csc.owner}.location"/>
        
        <!-- determine the type of the csc -->
        <if>
            <isset property="install.csc.type"/>
            <then>                
                <propertycopy name="my.csc.type"
                              from="install.csc.type"/>               
            </then>
        </if>

        <!-- determine the visibility of the delivery -->
        <propertycopy name="my.delivery.visibility"
                      from="install.csc.${my.delivery.basename}.visibility"/>
        
        <!-- determine what to do in regards with the delivery type -->
        <propertycopy name="my.delivery.type"
                      from="install.csc.${my.delivery.basename}.type"/>
        
        <!-- determine the language of the delivery -->
        <propertycopy name="my.delivery.lang"
                      from="install.csc.lang"/>
        
        <!-- determine the type of the delivery -->
        <condition property="my.delivery.is.jnilib">
            <equals arg1="${my.delivery.type}" arg2="jnilib"/>
        </condition>
        
        <condition property="my.delivery.is.data">
            <equals arg1="${my.delivery.type}" arg2="data"/>
        </condition>
        
        <condition property="my.delivery.is.exe.or.lib">
            <or>
                <equals arg1="${my.delivery.type}" arg2="exe"/>
                <equals arg1="${my.delivery.type}" arg2="lib"/>
                <isset property="my.delivery.is.jnilib"/>
            </or>
        </condition>
        
        <!-- determine if the delivery is exportable-->
        <condition property="the.delivery.is.exportable">
            <or>
                <equals arg1="${my.delivery.visibility}" arg2="public"/>
                <and>
                    <or>
                        <isset property="is.install.valid"/>
                        <isset property="is.install.qualif"/>
                    </or>
                    <or>
                        <equals arg1="${install.csc.type}"
                                arg2="unit-test"/>
                        <equals arg1="${install.csc.type}"
                                arg2="integration-test"/>
                        <equals arg1="${install.csc.type}"
                                arg2="validation-test"/>
                        <equals arg1="${install.csc.type}"
                                arg2="qualification-test"/>
                    </or>
                    <or>
                        <equals arg1="${my.delivery.visibility}"
                                arg2="private"/>
                        <equals arg1="${my.delivery.visibility}"
                                arg2="protected"/>
                    </or>
                </and>
            </or>
        </condition>

        <condition property="the.delivery.is.public">
                <equals arg1="${my.delivery.visibility}" arg2="public"/>
        </condition>
        <condition property="the.delivery.is.private">
                <equals arg1="${my.delivery.visibility}" arg2="private"/>
        </condition>
        <condition property="the.delivery.is.protected">
                <equals arg1="${my.delivery.visibility}" arg2="protected"/>
        </condition>
        
        <property name="my.csci.delivery.dir" 
                  value="${my.csci.location}${FS}${config.delivery.dir}"/>
        
        <!-- determine if the delivery uses the code generation -->
        <condition property="my.delivery.uses.codegen">
            <isset property="install.csc.${my.delivery.basename}.cgen.cfgfile"/>
        </condition>

        <if>
            <isset property="my.delivery.uses.codegen"/>
            <then>
                <propertycopy name="my.delivery.cgen.cfgfile"
                              from="install.csc.${my.delivery.basename}.cgen.cfgfile"/>
            </then>
        </if>
    </target>


    <!-- =======================================================================
        The "-run-codegen-specific-tasks" target installs the customized
        OpenCCM shell scripts into the installation directory tree.
    -->
    <target name="-run-codegen-specific-tasks" if="config.OpenCCM.install.dir">
        <if>
            <not>
                <isset property="only.tools"/>
            </not>
            <then>
                <!-- location of the ANT config file -->
                <var name="my.var" value="${config.Build.location}${FS}configuration"/>
                <var name="my.var" value="${my.var}${FS}data"/>
                <property name="configuration.data.dir" location="${my.var}"/>
                
                <!-- location of the code generator engine -->
                <var name="my.var" value="${install.dir}${FS}lib${FS}java"/>
                <var name="my.var" value="${my.var}${FS}lib${product.lcase.name}"/>
                <var name="my.var" value="${my.var}cgengine.jar"/>
                <property name="cgengine.location" location="${my.var}"/>
                
                <!-- install scripts -->
                <ant antfile="ConfigureOpenCCM.xml" dir="${configuration.data.dir}"
                     target="-install-customized-scripts">
                    
                    <property name="tool.name" value="OpenCCM"/>
                    <property name="openccm.lib.dir"
                              location="${config.OpenCCM.lib.dir}"/>
                    <property name="config.OpenCCM_SCRIPTDIR"
                              location="${install.dir}${FS}share"/>
                    <property name="openccm.jvm.sh"
                              location="${config.OpenCCM.bin.dir}${FS}jvm.sh"/>
                    <property name="codegen.lib.location"
                              location="${cgengine.location}"/>
                    <property name="OpenCCM_BINDIR"
                              location="${install.dir}${FS}bin"/>
                </ant>
                
                <move todir="${install.dir}${FS}bin">
                    <fileset dir="${install.dir}${FS}share">
                        <include name="ir3*"/>
                        <include name="jvm.sh"/>
                        <include name="envi*.sh"/>
                    </fileset>
                </move>
            </then>
        </if>
    </target>


    <!-- =======================================================================
        The "-create-setenv-sh" target generates a shell script that sets the
        PATH and LD_LIBRARY_PATH of the user environment.
    -->
    <target name="-create-setenv-sh">
        <!-- full qualified name of the shell script -->
        <property name="set_env.sh"
                  location="${install.dir}${FS}bin${FS}set_env.sh"/>

        <!-- minimal PATH and LD_LIBRARY_PATH -->
        <var name="p1" value=".:/usr/bin:/bin:/usr/X11R6/bin"/>
        <var name="p1" value="${p1}:${install.dir}/bin"/>

        <var name="p2" value="${install.dir}/lib/c++"/>

        <!-- PATH and LD_LIBRARY_PATH for all the required tools -->
        <var name="s" value=""/>

        <if>
            <isset property="config.sel.min.compilers"/>
            <then>
                <var name="s" value="${s} ${config.sel.min.compilers}"/>
            </then>
        </if>

        <if>
            <isset property="config.sel.min.orbs"/>
            <then>
                <var name="s" value="${s} ${config.sel.min.orbs}"/>
            </then>
        </if>

        <if>
            <isset property="config.sel.min.tools"/>
            <then>
                <var name="s" value="${s} ${config.sel.min.tools}"/>
            </then>
        </if>

        <var name="tools.PATH"       value=""/>
        <var name="tools.LD_LIBPATH" value=""/>

        <for list="${s}" delimiter=" " param="tool">
            <sequential>
                <propertycopy property="tool.PATH" silent="true"
                              from="config.@{tool}.bin.dir"/>

                <propertycopy property="tool.LD_LIBPATH" silent="true"
                              from="config.@{tool}.lib.dir"/>

                <if>
                    <isset property="tool.PATH"/>
                    <then>
                        <if>
                            <equals arg1="tools.PATH" arg2="" trim="true"/>
                            <then>
                                <var name="tools.PATH" value="${tool.PATH}"/>
                            </then>
                            <else>
                                <var name="tools.PATH"
                                     value="${tools.PATH}:${tool.PATH}"/>
                            </else>
                        </if>
                    </then>
                </if>

                <if>
                    <isset property="tool.LD_LIBPATH"/>
                    <then>
                        <if>
                            <equals arg1="tools.LD_LIBPATH" arg2=""
                                    trim="true"/>
                            <then>
                                <var name="tools.LD_LIBPATH"
                                     value="${tool.LD_LIBPATH}"/>
                            </then>
                            <else>
                                <var name="tools.LD_LIBPATH"
                                value="${tools.LD_LIBPATH}:${tool.LD_LIBPATH}"/>
                            </else>
                        </if>
                    </then>
                </if>

                <!-- unset properties -->
                <xvar name="tool.PATH"       unset="true"/>
                <xvar name="tool.LD_LIBPATH" unset="true"/>
            </sequential>
        </for>

        <echo file="${set_env.sh}" append="true">
#!/bin/sh
PATH=${p1}:${tools.PATH}:${env.PATH}
LD_LIBRARY_PATH=${p2}:${tools.LD_LIBPATH}:${env.LD_LIBRARY_PATH}
export PATH LD_LIBRARY_PATH
export TAO_ROOT=${env.TAO_ROOT}
export ACE_ROOT=${env.ACE_ROOT}
export TAO_DISABLE_CODESET_ENCODING=1
export CLASSPATH=${env.CLASSPATH}:${config.JacORB.install.dir}
        </echo>


        <echo>PATH=${p1}:${tools.PATH}:${env.PATH}</echo>
        <echo>LD_LIBRARY_PATH=${p2}:${tools.LD_LIBPATH}:${env.LD_LIBRARY_PATH}</echo>

        <if>
            <isset property="is.install.qualif"/>
            <then>               
                <foreach list="${set_env.sh}" target="-custumisation-file"
                    param="file" inheritall="true" delimiter=" "/> 
            </then>
        </if>

        <chmod file="${set_env.sh}" perm="a+x"/>
    </target>


    <!-- =======================================================================
        The "-update-paths" target alters the paths in every script or data file
        it could find so that they point to the appropriate installation dir.
    -->
    <target name="-update-paths">
        <!-- unset properties -->
        <xvar name="all.files"      unset="true"/>
        <xvar name="is.binary.file" unset="true"/>

        <!-- we will alter the paths of every non-binary file -->
        <findfile file="*" dir="${install.dir}" recursive="true"
                  property="all.files"/>

        <for list="${all.files}" delimiter=" " param="f">
            <sequential>
                <isbinary file="@{f}" property="is.binary.file"/>

                <if>
                    <and>
                        <not><isset property="is.binary.file"/></not>
                        <isset property="is.install.valid"/>
                    </and>
                    <then>
                        <loadfile srcFile="@{f}" property="f.content"/>

                        <if>
                            <and>
                                <contains
                                    string="${f.content}"
                                    substring="${config.install.dir}"/>

                                <not>
                                    <contains string="${f.content}"
                                              substring="${install.dir}"/>
                                </not>
                            </and>
                            <then>
                                <replaceregexp
                                    file="@{f}" flags="g"
                                    match="([=:;&quot; ])${config.install.dir}"
                                    replace="\1${install.dir}"/>
                            </then>
                        </if>
                    </then>
                </if>

                <!-- unset properties -->
                <xvar name="is.binary.file" unset="true"/>
                <xvar name="f.content"      unset="true"/>
            </sequential>
        </for>

        <!-- change file permissions -->
        <chmod perm="a+x">
            <fileset dir="${install.dir}${FS}bin">
                <include name="**/*.*"/>
                <exclude name="**/*.jar"/>
            </fileset>
        </chmod>
    </target>


    <!-- =======================================================================
        The "-create-tutorials-config-files" target generates configuration
        files for the tutorials build system.

        It depends on the following target:
            + "-create-filtersetid"
    -->
    <target name="-create-tutorials-config-files" depends="-create-filtersetid">
        <!-- output dir -->
        <property name="in.cfgfiles.outdir"
                  location="${install.dir}${FS}share${FS}tutorialconfigs"/>

        <mkdir dir="${in.cfgfiles.outdir}"/>

        <!-- site.mk template -->
        <var name="p" value="${basedir}${FS}${config.csc.data.dir}"/>
        <property name="in.site.mk.template"
                  location="${p}${FS}tutorial-sitetmpl.mk"/>

        <!-- target site.mk -->
        <property name="in.site.mk.target"
                  location="${in.cfgfiles.outdir}${FS}site.mk"/>

        <!--
            we will assume here that there is only one ORB per implementation
            language.
        -->
        <for list="TAO,ORBacusCPP" param="cpp.orb">
            <sequential>
                <if>
                    <contains string="${config.sel.min.orbs}"
                              substring="@{cpp.orb}"/>

                    <then>
                        <property name="config.cpp.orb" value="@{cpp.orb}"/>
                    </then>
                </if>
            </sequential>
        </for>

        <for list="ORBacusJAVA,JacORB" param="java.orb">
            <sequential>
                <if>
                    <contains string="${config.sel.min.orbs}"
                              substring="@{java.orb}"/>

                    <then>
                        <property name="config.java.orb" value="@{java.orb}"/>
                    </then>
                </if>
            </sequential>
        </for>

        <copy file="${in.site.mk.template}" tofile="${in.site.mk.target}">
            <filterset refid="my.site.tokens"/>
            <filterset>
                <filter token="config.cpp.orb"  value="${config.cpp.orb}"/>
                <filter token="config.java.orb" value="${config.java.orb}"/>
            </filterset>
        </copy>

        <!--
            create a configuration to help the tutorials build system to
            determine which tutorials to install.
        -->
        <var name="p" value="${in.cfgfiles.outdir}${FS}"/>
        <var name="p" value="${p}${config.lowercase.product.name}.config"/>
        <property name="in.cdmw.config" location="${p}"/>

        <propertyfile file="${in.cdmw.config}">
            <entry key="config.packages"   value="${config.sel.packages}"/>
            <entry key="config.interfaces" value="${config.sel.interfaces}"/>
        </propertyfile>
    </target>


</project>




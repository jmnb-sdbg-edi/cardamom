<?xml version="1.0" encoding="utf-8"?>
<!-- ===================================================================== -->
<!--
 * This file is part of CARDAMOM (R) which is jointly developed by THALES 
 * and SELEX-SI. 
 * 
 * It is derivative work based on PERCO Copyright (C) THALES 2000-2003. 
 * All rights reserved.
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it under 
 * the terms of the GNU Library General Public License as published by the
 * Free Software Foundation; either version 2 of the License, or (at your 
 * option) any later version. 
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public 
 * License for more details. 
 * 
 * You should have received a copy of the GNU Library General 
 * Public License along with CARDAMOM; see the file COPYING. If not, write to 
 * the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-->
<!-- ===================================================================== -->


<!DOCTYPE project [
    <!ENTITY common_targets SYSTEM "file:../../data/CommonConfigTargets.xml">
]>


<project name="ConfigureORBacusJAVA" default="-check-ORBacusJAVA" basedir=".">


    <description>
        This build file locates and checks IONA ORBacus JAVA.
    </description>


    <!-- Include XML fragments -->
    &common_targets;


    <!-- =======================================================================
        The "check-ORBacusJAVA" target checks if the ORB is suitable for the
        build.

        It depends on the following targets:
            + "-initialize"
            + "-test1"
            + "-test2"
            + "-test3"
            + "-set-ORBacusJAVA-properties"
    -->
    <target name="-check-ORBacusJAVA"
            depends="-initialize, -test1, -test2, -test3,
                     -set-ORBacusJAVA-properties">

        <!-- save ORBacusJAVA properties -->
        <echoproperties destfile="${cb.tools.conf}" prefix="config."/>
    </target>


    <!-- =======================================================================
        The "-locate-ORBacusJAVA" target determines the installation directory
        of IONA ORBacus JAVA.

        It depends on the following targets:
            + "-initialize"
    -->
    <target name="-locate-ORBacusJAVA" depends="-initialize">
        <!-- determine the installation directory -->
        <var name="my.var"
             value="Enter the ${tool.fullname} installation directory"/>

        <propertycopy property="orbacusjava.default.install.dir" silent="true"
                      from="${mb.prev}.config.${tool.name}.install.dir"/>

        <if>
            <isset property="orbacusjava.default.install.dir"/>
            <then>
                <if>
                    <isfalse value="${passive.mode}"/>
                    <then>
                        <xinput message="${my.var}" dirPathOnly="true"
                                addproperty="config.${tool.name}.install.dir"
                                default="${orbacusjava.default.install.dir}"/>
                    </then>
                    <else>
                        <propertycopy property="config.${tool.name}.install.dir"
                                      from="orbacusjava.default.install.dir"/>
                    </else>
                </if>
            </then>
            <else>
                <xinput message="${my.var}" dirPathOnly="true"
                        addproperty="config.${tool.name}.install.dir"/>
            </else>
        </if>

        <propertycopy property="orbacusjava.install.dir"
                      from="config.${tool.name}.install.dir"/>

        <!-- save some properties temporarily -->
        <propertyfile file="${tmpconfig.cache}">
            <entry key="config.${tool.name}.install.dir"
                   value="${orbacusjava.install.dir}"/>
        </propertyfile>

        <!-- determine the bin directory -->
        <propertycopy property="orbacusjava.default.bin.dir" silent="true"
                      from="${mb.prev}.config.${tool.name}.bin.dir"/>

        <if>
            <not>
                <isset property="orbacusjava.default.bin.dir"/>
            </not>
            <then>
                <!-- try to guess the bin directory -->
                <findfile file="jidl" dir="${orbacusjava.install.dir}"
                          findFirst="true" recursive="true"
                          property="orbacusjava.jidl"/>

                <dirname property="orbacusjava.default.bin.dir"
                         file="${orbacusjava.jidl}"/>
            </then>
        </if>

        <if>
            <isfalse value="${passive.mode}"/>
            <then>
                <xinput message="Enter the ${tool.fullname} bin directory"
                        addproperty="config.${tool.name}.bin.dir"
                        default="${orbacusjava.default.bin.dir}"
                        dirPathOnly="true"/>
            </then>
            <else>
                <propertycopy property="config.${tool.name}.bin.dir"
                              from="orbacusjava.default.bin.dir"/>
            </else>
        </if>

        <propertycopy property="orbacusjava.bin.dir"
                      from="config.${tool.name}.bin.dir"/>

        <!-- save some properties temporarily -->
        <propertyfile file="${tmpconfig.cache}">
            <entry key="config.${tool.name}.bin.dir"
                   value="${orbacusjava.bin.dir}"/>
        </propertyfile>

        <!-- determine the lib directory -->
        <propertycopy property="orbacusjava.default.lib.dir" silent="true"
                      from="${mb.prev}.config.${tool.name}.lib.dir"/>

        <if>
            <not>
                <isset property="orbacusjava.default.lib.dir"/>
            </not>
            <then>
                <!-- try to guess the lib directory -->
                <findfile file="OB.jar" dir="${orbacusjava.install.dir}"
                          findFirst="true" recursive="true"
                          property="orbacusjava.ob.jar"/>

                <dirname property="orbacusjava.default.lib.dir"
                         file="${orbacusjava.ob.jar}"/>
            </then>
        </if>

        <if>
            <isfalse value="${passive.mode}"/>
            <then>
                <xinput message="Enter the ${tool.fullname} lib directory"
                        addproperty="config.${tool.name}.lib.dir"
                        default="${orbacusjava.default.lib.dir}"
                        dirPathOnly="true"/>
            </then>
            <else>
                <propertycopy property="config.${tool.name}.lib.dir"
                              from="orbacusjava.default.lib.dir"/>
            </else>
        </if>

        <propertycopy property="orbacusjava.lib.dir"
                      from="config.${tool.name}.lib.dir"/>

        <!-- save some properties temporarily -->
        <propertyfile file="${tmpconfig.cache}">
            <entry key="config.${tool.name}.lib.dir"
                   value="${orbacusjava.lib.dir}"/>
        </propertyfile>

        <!-- determine the IDL directory -->
        <propertycopy property="orbacusjava.default.idl.dir" silent="true"
                      from="${mb.prev}.config.${tool.name}.idl.dir"/>

        <if>
            <not>
                <isset property="orbacusjava.default.idl.dir"/>
            </not>
            <then>
                <!-- try to guess the IDL directory -->
                <findfile file="orb.idl" dir="${orbacusjava.install.dir}"
                          findFirst="true" recursive="true"
                          property="orbacusjava.orb.idl"/>

                <!--
                    we need to run the "dirname" task twice because the ORBacus
                    IDLs are stored in .../idl/OB/
                -->
                <dirname property="orbacusjava.orb.idl.dirname"
                         file="${orbacusjava.orb.idl}"/>
                <dirname property="orbacusjava.default.idl.dir"
                         file="${orbacusjava.orb.idl.dirname}"/>
            </then>
        </if>

        <if>
            <isfalse value="${passive.mode}"/>
            <then>
                <xinput message="Enter the ${tool.fullname} IDL directory"
                        addproperty="config.${tool.name}.idl.dir"
                        default="${orbacusjava.default.idl.dir}"
                        dirPathOnly="true"/>
            </then>
            <else>
                <propertycopy property="config.${tool.name}.idl.dir"
                              from="orbacusjava.default.idl.dir"/>
            </else>
        </if>

        <propertycopy property="orbacusjava.idl.dir"
                      from="config.${tool.name}.idl.dir"/>

        <!-- save some properties temporarily -->
        <propertyfile file="${tmpconfig.cache}">
            <entry key="config.${tool.name}.idl.dir"
                   value="${orbacusjava.idl.dir}"/>
        </propertyfile>

        <!-- save ORBacusJAVA properties -->
        <echoproperties destfile="${cb.tools.conf}" prefix="config."/>
    </target>


    <!-- =======================================================================
        The "-initialize" target defines some properties for the build.

        It depends on the following targets:
            + "-check-global-aliases"
    -->
    <target name="-initialize" depends="-check-global-aliases">
        <!-- the required version for ORBacus JAVA -->
        <propertycopy property="orbacusjava.required.version"
                      from="require.${my.os.name}.${tool.name}.version"/>

        <!--
            load properties from the temporary file so that next time the
            "echoproperties" task overwrites this file, the properties are not
            lost.
        -->
        <property file="${cb.tools.conf}"/>

        <property name="tool.fullname" value="ORBacus JAVA"/>
    </target>


    <!-- =======================================================================
        The "-test1" target checks whether the ORBacus JAVA version is ok.
    -->
    <target name="-test1">
        <echo message="Checking the ${tool.fullname} version"/>

        <!--
            the test is successful if jidl is found in the ${bin.dir} and it
            prints the required version.
        -->
        <propertycopy property="orbacusjava.bin.dir"
                      from="config.${tool.name}.bin.dir"/>

        <property name="orbacusjava.jidl"
                  location="${orbacusjava.bin.dir}${FS}jidl"/>

        <available file="${orbacusjava.jidl}"
                   property="orbacusjava.jidl.present"/>

        <fail unless="orbacusjava.jidl.present"
              message="Could not find ${orbacusjava.jidl}."/>

        <!-- make jidl print its version -->
        <exec executable="jidl" dir="${orbacusjava.bin.dir}"
              outputproperty="orbacusjava.test1.cmdline.output"
              resultproperty="orbacusjava.test1.return.code"
              vmlauncher="false">

            <arg value="--version"/>
        </exec>

        <if>
            <not>
                <equals arg1="${orbacusjava.test1.return.code}" arg2="0"/>
            </not>
            <then>
                <!-- should never happen -->
                <fail>could not obtain ${tool.fullname} version</fail>
            </then>
        </if>

        <selecttoken string="${orbacusjava.test1.cmdline.output}" delimiter=" "
                     tokenNumber="1" property="orbacusjava.current.version"/>

        <!--
            the test is successful if the versions are equal (unless version
            checking is disabled or the check mode is set to "loose")
        -->
        <var name="s" value="warning: your version is"/>
        <var name="s" value="${s} ${orbacusjava.current.version}, expected"/>
        <var name="s" value="${s} version is ${orbacusjava.required.version}"/>

        <var name="s2" value="The required version for ${tool.fullname}"/>
        <var name="s2" value="${s2} is ${orbacusjava.required.version}, your"/>
        <var name="s2"
             value="${s2} version is ${orbacusjava.current.version}."/>

        <if>
            <istrue value="${require.tool.version.checking}"/>
            <then>
                <if>
                    <not>
                        <equals arg1="${orbacusjava.current.version}"
                                arg2="${orbacusjava.required.version}"
                                trim="true"/>
                    </not>
                    <then>
                        <if>
                            <equals arg1="${require.tool.check.mode}"
                                    arg2="loose" trim="true"/>
                            <then>
                                <!-- issue a warning message -->
                                <echo>${s}</echo>
                            </then>
                            <else>
                                <!-- stop -->
                                <fail>${s2}</fail>
                            </else>
                        </if>
                    </then>
                </if>
            </then>
        </if>
    </target>


    <!-- =======================================================================
        The "-test2" target checks if the ORBacus JAVA libraries can be found.
    -->
    <target name="-test2">
        <echo message="Checking the ${tool.fullname} lib directory"/>

        <!-- the test is succefful if OB.jar is found in the lib directory -->
        <propertycopy property="orbacusjava.lib.dir"
                      from="config.${tool.name}.lib.dir"/>

        <available file="${orbacusjava.lib.dir}${FS}OB.jar" type="file"
                   property="orbacusjava.lib.dir.is.ok"/>

        <!-- stop checking if the file was not found -->
        <var name="my.var" value="Could not find the ${tool.fullname} JAR"/>
        <var name="my.var" value="${my.var} files in the directory"/>
        <var name="my.var" value="${my.var} ${orbacusjava.lib.dir}."/>
        <fail unless="orbacusjava.lib.dir.is.ok" message="${my.var}"/>
    </target>


    <!-- =======================================================================
        The "-test3" target checks if the ORBacus JAVA IDL compiler can compile
        a basic IDL file.
    -->
    <target name="-test3">
        <echo message="Checking if jidl can compile a basic IDL file"/>

        <!-- create a temporary file -->
        <tempfile property="orbacusjava.test3.idl.file" destdir="${TMP}"
                  prefix="${tmpfile.prefix}_ORBacusJAVA_test3_" suffix=".idl"/>

        <!-- write the code to compile into the file -->
        <echo message="module CHECK_IDL{ struct DataType { string id; }; };"
              file="${orbacusjava.test3.idl.file}"/>

        <!-- compile the file -->
        <exec executable="jidl" dir="${orbacusjava.bin.dir}"
              outputproperty="orbacusjava.test3.cmdline.output"
              resultproperty="orbacusjava.test3.return.code"
              vmlauncher="false">

            <arg line="--output-dir ${TMP}"/>
            <arg path="${orbacusjava.test3.idl.file}"/>
        </exec>

        <!-- the test is successful if the return code is 0 -->
        <condition property="orbacusjava.idl.compilation.is.ok">
            <equals arg1="${orbacusjava.test3.return.code}" arg2="0"/>
        </condition>

        <!-- clean up -->
        <delete>
            <fileset dir="${TMP}"
                     includes="${tmpfile.prefix}_ORBacusJAVA_test3_*"/>
        </delete>
        <delete dir="${TMP}${FS}CHECK_IDL"/>

        <!-- stop checking if the compilation was not ok -->
        <fail unless="orbacusjava.idl.compilation.is.ok"
              message="Error while compiling a basic IDL file."/>
    </target>


    <!-- =======================================================================
        The "-set-ORBacusJAVA-properties" target defines properties that will be
        saved into the site configuration file.
    -->
    <target name="-set-ORBacusJAVA-properties">
        <!-- classpath -->
        <findfile file="*.jar" dir="${orbacusjava.lib.dir}" recursive="true"
                  separator="${PS}" property="config.${tool.name}.classpath"/>

        <!-- naming.service.dir -->
        <propertycopy property="orbacusjava.bin.dir"
                      from="config.${tool.name}.bin.dir"/>
       
        <property name="config.${tool.name}.naming.service.dir"
                  location="${orbacusjava.bin.dir}"/>

        <!-- idlcompiler.dir -->
        <property name="config.${tool.name}.idlcompiler.dir"
                  location="${orbacusjava.bin.dir}"/>

        <!-- idlflags.incl.dirs -->
        <propertycopy property="orbacusjava.idl.dir"
                      from="config.${tool.name}.idl.dir"/>

        <var name="my.var" value="-I${orbacusjava.idl.dir}"/>
        <var name="my.var" value="${my.var} -I${orbacusjava.idl.dir}${FS}OB"/>

        <property name="config.${tool.name}.idlflags.incl.dirs"
                  value="${my.var}"/>

        <!-- code generation specific -->
        <property name="config.${tool.name}.codegen.defines" value="-DORBACUS"/>
    </target>


</project>


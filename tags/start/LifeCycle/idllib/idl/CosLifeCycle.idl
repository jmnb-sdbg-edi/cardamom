/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES 
 * and SELEX-SI. 
 * 
 * It is derivative work based on PERCO Copyright (C) THALES 2000-2003. 
 * All rights reserved.
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it under 
 * the terms of the GNU Library General Public License as published by the
 * Free Software Foundation; either version 2 of the License, or (at your 
 * option) any later version. 
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public 
 * License for more details. 
 * 
 * You should have received a copy of the GNU Library General 
 * Public License along with CARDAMOM; see the file COPYING. If not, write to 
 * the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */


#ifndef COS_LIFE_CYCLE_IDL
#define COS_LIFE_CYCLE_IDL

#ifdef ORBACUS
#include <OB/CosNaming.idl>
#elif defined(TAO)
#include <orbsvcs/CosNaming.idl>
#else
#include <CosNaming.idl>
#endif

#pragma prefix "omg.org"

module CosLifeCycle{
    typedef CosNaming::Name Key;
    typedef Object _Factory;
    typedef sequence <_Factory> Factories;
    typedef struct NVP {
        CosNaming::Istring name;
        any value;
    } NameValuePair;
    typedef sequence <NameValuePair> Criteria;
    exception NoFactory {
        Key search_key;
    };
    exception NotCopyable { string reason; };
    exception NotMovable { string reason; };
    exception NotRemovable { string reason; };
    exception InvalidCriteria{
        Criteria invalid_criteria;
    };
    exception CannotMeetCriteria {
        Criteria unmet_criteria;
    };
    interface FactoryFinder {
        Factories find_factories(in Key factory_key)
            raises(NoFactory);
    };
    interface LifeCycleObject {
        LifeCycleObject copy(in FactoryFinder there,
                in Criteria the_criteria)
            raises(NoFactory, NotCopyable, InvalidCriteria,
                CannotMeetCriteria);
        void move(in FactoryFinder there,
                in Criteria the_criteria)
            raises(NoFactory, NotMovable, InvalidCriteria,
                CannotMeetCriteria);
        void remove()
            raises(NotRemovable);
    };
    interface GenericFactory {

        boolean _supports(in Key k);
        Object create_object(
                in Key k,
                in Criteria the_criteria)
            raises (NoFactory, InvalidCriteria,
                CannotMeetCriteria);
    };
};

#endif


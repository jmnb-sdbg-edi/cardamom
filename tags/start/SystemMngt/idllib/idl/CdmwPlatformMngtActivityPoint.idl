/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES 
 * and SELEX-SI. 
 * 
 * It is derivative work based on PERCO Copyright (C) THALES 2000-2003. 
 * All rights reserved.
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it under 
 * the terms of the GNU Library General Public License as published by the
 * Free Software Foundation; either version 2 of the License, or (at your 
 * option) any later version. 
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public 
 * License for more details. 
 * 
 * You should have received a copy of the GNU Library General 
 * Public License along with CARDAMOM; see the file COPYING. If not, write to 
 * the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */


#ifndef CDMW_PLATFORM_MNGT_ACTIVITY_POINT_IDL_
#define CDMW_PLATFORM_MNGT_ACTIVITY_POINT_IDL_


#include <CdmwPlatformMngtCommon.idl>


#pragma prefix "thalesgroup.com"

module CdmwPlatformMngt
{

    /**
    * The iterator for ActivityPointNames.
    */
    interface ActivityPointNamesIterator
    {
        void reset();

        boolean next_one(out ActivityPointName point_name);

        boolean next_n(in unsigned long how_many,
           out ActivityPointNames point_names);

        void destroy();
    };


    /**
    * The iterator for ActivityPoints.
    */
    interface ActivityPointsIterator
    {
        void reset();

        boolean next_one(out ActivityPoint a_point);

        boolean next_n(in unsigned long how_many,
           out ActivityPoints n_points);

        void destroy();
    };


    /**
    * The container of activity points.
    */
    interface ActivityPointContainer
    {

        unsigned long get_number_of_activity_points();

        void get_all_activity_point_names(in unsigned long how_many,
            out ActivityPointNames point_names,
            out ActivityPointNamesIterator rest);

        ActivityPointStatus get_activity_point_status(
            in ActivityPointName point_name)
            raises(ActivityPointNotFound);

        boolean get_activity_points(in ActivityPointNames point_names,
            out ActivityPoints points);

        void get_all_activity_points(in unsigned long how_many,
            out ActivityPoints points,
            out ActivityPointsIterator rest);

    }; // End interface ActivityPointContainer


}; // End Module CdmwPlatformMngt

#endif // CDMW_PLATFORM_MNGT_ACTIVITY_POINT_IDL_


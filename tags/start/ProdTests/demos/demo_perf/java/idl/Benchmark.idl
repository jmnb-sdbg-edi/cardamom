/* =========================================================================== *
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI.
 * 
 * It is derivative work based on PERCO Copyright (C) THALES 2000-2003.
 * All rights reserved.
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Library General Public License as published by the
 * Free Software Foundation; either version 2 of the License, or (at your
 * option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General
 * Public License along with CARDAMOM; see the file COPYING. If not, write to
 * the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 * =========================================================================== */


#pragma prefix "thalesgroup.com"


module Benchmark {
      
    // to test exchange of object references
    interface I {
        void foo();
    };
      
      
    // Fixed-length struct
    struct FixedStruct {
        short s;
        long l;
    };
      
    // Variable-length struct
    struct VariableStruct {
        FixedStruct fStr;
        string s;
    };

    /* JacORB raises NumberFormatException when parsing these definitions.
    const unsigned long DECIMAL_256K =  256*1024;
    const unsigned long DECIMAL_512K =  512*1024;
    const unsigned long DECIMAL_1M   = 1024*1024;
    */
    const unsigned long DECIMAL_256K =  262144;
    const unsigned long DECIMAL_512K =  524288;
    const unsigned long DECIMAL_1M   = 1048576;
    
     
    // sequences
    typedef sequence<octet>               OctetSeq;  
    typedef sequence<octet, DECIMAL_256K> OctetSeq_256K;
    typedef sequence<octet, DECIMAL_1M>   OctetSeq_1M;
    
    typedef sequence<short>                ShortSeq;
    typedef sequence<short, DECIMAL_512K>  ShortSeq_1M;     // size of short = 2* size of octet
      
    typedef sequence<string>           StringSeq;
    
    typedef sequence<I>                ObjectSeq;
    
    typedef sequence<VariableStruct>   StructSeq;    
    
    
    // valuetype (with same member as VariableStruct)
    valuetype Value {
        public FixedStruct fStr;
        public string s;
    };
    
    
    
    interface Tester {
      
        // Without arguments
        void ping();
        
        // Basic types
        void short_in       (in short s);
        void short_out      (out short s);
        void short_inout    (inout short s);
        short short_ret     ();
    
        void long_in        (in long l);
        void long_out       (out long l);
        void long_inout     (inout long l);
        long long_ret       ();
        
        void double_in      (in double d);
        void double_out     (out double d);
        void double_inout   (inout double d);
        double double_ret   ();
        
        void string_in      (in string s);
        void string_out     (out string s);
        void string_inout   (inout string s);
        string string_ret   ();
            
        void any_in         (in any a);
        void any_out        (out any a);
        void any_inout      (inout any a);
        any any_ret         ();

        void interface_in     (in I interf);
        void interface_out    (out I interf);
        void interface_inout  (inout I interf);
        I interface_ret       ();        
        
        // Structures
        void fixStruct_in         (in FixedStruct fStruct);
        void fixStruct_out        (out FixedStruct fStruct);
        void fixStruct_inout      (inout FixedStruct fStruct);
        FixedStruct fixStruct_ret ();
        
        void varStruct_in            (in VariableStruct vStruct);
        void varStruct_out           (out VariableStruct vStruct);
        void varStruct_inout         (inout VariableStruct vStruct);
        VariableStruct varStruct_ret ();
        
        // Sequences
        void octet_seq_in      (in OctetSeq o_seq);
        void octet_seq_out     (out OctetSeq o_seq);
        void octet_seq_inout   (inout OctetSeq o_seq);
        OctetSeq octet_seq_ret ();
        
        void octet_seq_256K_in           (in OctetSeq_256K o_seq);
        void octet_seq_256K_out          (out OctetSeq_256K o_seq);
        void octet_seq_256K_inout        (inout OctetSeq_256K o_seq);
        OctetSeq_256K octet_seq_256K_ret ();
        
        void octet_seq_1M_in         (in OctetSeq_1M o_seq);
        void octet_seq_1M_out        (out OctetSeq_1M o_seq);
        void octet_seq_1M_inout      (inout OctetSeq_1M o_seq);
        OctetSeq_1M octet_seq_1M_ret ();
        
        void short_seq_in      (in ShortSeq s_seq);
        void short_seq_out     (out ShortSeq s_seq);
        void short_seq_inout   (inout ShortSeq s_seq);
        ShortSeq short_seq_ret ();
        
        void short_seq_1M_in         (in ShortSeq_1M s_seq);
        void short_seq_1M_out        (out ShortSeq_1M s_seq);
        void short_seq_1M_inout      (inout ShortSeq_1M s_seq);
        ShortSeq_1M short_seq_1M_ret ();
        
        void string_seq_in        (in StringSeq str_seq);
        void string_seq_out       (out StringSeq str_seq);
        void string_seq_inout     (inout StringSeq str_seq);
        StringSeq string_seq_ret  ();
        
        void object_seq_in        (in ObjectSeq obj_seq);
        void object_seq_out       (out ObjectSeq obj_seq);
        void object_seq_inout     (inout ObjectSeq obj_seq);
        ObjectSeq object_seq_ret  ();
        
        void struct_seq_in        (in StructSeq struct_seq);
        void struct_seq_out       (out StructSeq struct_seq);
        void struct_seq_inout     (inout StructSeq struct_seq);
        StructSeq struct_seq_ret  ();
        
        // Valuetype
        void valuetype_in     (in Value v);
        void valuetype_out    (out Value v);
        void valuetype_inout  (inout Value v);
        Value valuetype_ret   ();
        
    };
    
    
};
    



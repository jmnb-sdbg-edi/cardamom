/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI. It is derivative work based on PERCO Copyright (C) THALES
 * 2000-2003. All rights reserved.
 * 
 * Copyright (C) THALES 2004-2005. All rights reserved
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Library General Public License as published
 * by the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General Public
 * License along with CARDAMOM; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */


#ifndef CDMW_TRACE_COLLECTOR_IDL_
#define CDMW_TRACE_COLLECTOR_IDL_



#include <CdmwTraceCommon.idl>

#pragma prefix "thalesgroup.com"


/**
* This module describes interfaces and data types of the CDMW
* Trace service.
*/
module CdmwTrace
{


    interface TraceProducer;


    /**
    * This interface allows to received information produced by the
    * trace part located in a process. The implementer of this interface
    * must register itself in each process to receive data.
    */
    interface Collector {
								
        /**
        * This operation returns the trace filters.
        */
        TraceFilterSeq get_trace_filters ();

        /**
         * This operation activates the specified level of a domain.
         *
         * @param the_component_name the component name.
         * @param the_domain The domain
         * @param the_value  The value
         */
        // ECR-0123
        void
        activate_level(in ComponentName the_component_name,
                       in Domain the_domain,
                       in Value the_value);

        /**
         * This operation deactivates the specified level of a domain.
         *
         * @param the_component_name the component name.
         * @param the_domain The domain
         * @param the_value  The value
         */
        // ECR-0123
        void
        deactivate_level(in ComponentName the_component_name,
                         in Domain the_domain,
                         in Value the_value);

        /**
        * Method called by the trace service, when data are available.
        * A set of messages is passed during this call.
        *
        * @param the_messagesHeader the production context of the set of
        *   messages.
        * @param the_messages the set of messages.
        */
        void put_formatted_messages (in MessagesHeader the_messages_header, 
                                     in FormattedMessageSeq the_messages);


        /**
        * Methods called by a new process, when the TraceProducer object 
        * goes up.
        *
        * @param a_traceProducer the new TraceProducer.
        */
        void update (in TraceProducer a_traceProducer);

    };

}; // End module CdmwTrace

#endif // CDMW_TRACE_COLLECTOR_IDL_


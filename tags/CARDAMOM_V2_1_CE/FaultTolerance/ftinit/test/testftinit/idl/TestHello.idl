/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI. It is derivative work based on PERCO Copyright (C) THALES
 * 2000-2003. All rights reserved.
 * 
 * Copyright (C) THALES 2004-2005. All rights reserved
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Library General Public License as published
 * by the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General Public
 * License along with CARDAMOM; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */


#ifndef  TEST_HELLO_IDL_
#define  TEST_HELLO_IDL_

#include <FT.idl>
#include <CdmwFTCurrent.idl>

#pragma prefix "thalesgroup.com"


module CdmwFT {    


module Test { 

    typedef sequence<::TimeBase::TimeT> ResultsSeq;
  
    /** 
     * Hello interface
     */
    interface HelloInterface {

        exception NoContext { };

        /**
         * hello  
         */ 
        void hello();
        void init(in FT::ObjectGroup group_ref);  

        ::FT::FTDomainId get_ft_domain_id() raises (NoContext);

        ::FT::ObjectGroupId get_object_group_id() raises (NoContext);

        ::FT::ObjectGroupRefVersion get_object_group_ref_version() raises (NoContext);

        string get_client_id() raises (NoContext);

        long get_retention_id() raises (NoContext);

        ::TimeBase::TimeT get_expiration_time() raises (NoContext);

        /*
         * send_exception
         */
        long send_exception(in long exception_number, in long how_many);
        void send_TRANSIENT_exception(in long cycle);

        ResultsSeq get_results();

  };



}; 

}; 

#endif // TEST_HELLO_IDL_


/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI. It is derivative work based on PERCO Copyright (C) THALES
 * 2000-2003. All rights reserved.
 * 
 * Copyright (C) THALES 2004-2005. All rights reserved
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Library General Public License as published
 * by the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General Public
 * License along with CARDAMOM; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */


#ifndef CDMW_FTSYST_MNGT_PROPERTY_MANAGER_IDL_
#define CDMW_FTSYST_MNGT_PROPERTY_MANAGER_IDL_


#include <CosPropertyService.idl>

#include <CdmwPlatformMngtCommon.idl>
#include <CdmwPlatformMngtSupervisionObserver.idl>

#pragma prefix "thalesgroup.com"

module CdmwFTSystMngt
{  
    /**
    * The CDMW PropertyManager Accessor
    */
    interface PropertyManagerAccessor
    {

        /** facade to get the attribute:
        * @param attr_name : attribute name
        * @param ret_attr returned attribute
        */

        void get_attribute(in CdmwPlatformMngt::ElementPath target_element_path, in string attr_name, out any ret_attr , in char flag) raises(CdmwPlatformMngt::AttributeNotFound);

        /** facade to set the attribute:
        * @param attr_name : attribute name
        * @param attr attribute value for setting
        */

        void set_attribute(in CdmwPlatformMngt::ElementPath target_element_path, in string attr_name, in any attr, in char flag) raises(CdmwPlatformMngt::AttributeNotFound); 
	/**
        * Registers a SupervisionObserver for all properties change.
        *
        * @param target_element_path path of target element to access
        * @param observer_name the name used to identify the observer
        * @param observer the observer to be registered
        * @param deeply indicate that observer is registered for
        *        property change coming from child elements
        *
        * @return the observer that was previously registered with
        * observer_name if any.
        *
        * @exception ManagedElementNotFound if element not found
        */
        CdmwPlatformMngt::SupervisionObserver register_all_properties_observer (
            in CdmwPlatformMngt::ElementPath target_element_path,
            in string observer_name,
            in CdmwPlatformMngt::SupervisionObserver observer,
            in boolean deeply)
            raises (CdmwPlatformMngt::ManagedElementNotFound);

        /**
        * Unregisters a SupervisionObserver for all properties change.
        *
        * @param target_element_path path of target element to access
        * @param observer_name the name identifying the observer to unregister
        *
        * @return the observer.
        *
        * @exception ManagedElementNotFound if element not found
        * @exception ObserverNotFound if observer_name doesn't denote
        * a previously registered observer.
        */
        CdmwPlatformMngt::SupervisionObserver unregister_all_properties_observer (
             in CdmwPlatformMngt::ElementPath target_element_path,
             in string observer_name)
            raises(CdmwPlatformMngt::ManagedElementNotFound,
                   CdmwPlatformMngt::ObserverNotFound);
            
        /**
        * Registers a SupervisionObserver for a set of properties change.
        *
        * @param target_element_path path of target element to access
        * @param observer_name the name used to identify the observer
        * @param observer the observer to be registered
        * @param property_names the list of properties to register the observer
        *
        * @exception ManagedElementNotFound if element not found
        * @exception PropertyInListNotFound if property from the list cannot be found
        *
        */
        void register_property_observer (
            in CdmwPlatformMngt::ElementPath target_element_path,
            in string observer_name,
            in CdmwPlatformMngt::SupervisionObserver observer,
            in CosPropertyService::PropertyNames property_names)
            raises(CdmwPlatformMngt::ManagedElementNotFound,
                   CdmwPlatformMngt::PropertyInListNotFound);

        /**
        * Unregisters a SupervisionObserver for a set of property change.
        *
        * @param target_element_path path of target element to access
        * @param observer_name the name identifying the observer to unregister
        * @param property_names the list of properties to unregister the observer
        *
        * @exception ManagedElementNotFound if element not found
        * @exception PropertyInListNotFound if property from the list cannot be found
        * @exception PropertyObserverNotFound if observer_name doesn't denote
        *                             a previously registered observer.
        */
        void unregister_property_observer (
            in CdmwPlatformMngt::ElementPath target_element_path,
            in string observer_name,
            in CosPropertyService::PropertyNames property_names)
            raises(CdmwPlatformMngt::ManagedElementNotFound,
                   CdmwPlatformMngt::PropertyInListNotFound,
                   CdmwPlatformMngt::PropertyObserverNotFound);
                   
                   
        /**
        * CosProperty interface
        */
        
        /**
        * Get the allowed property types.
        *
        * @param target_element_path path of target element to access
        *
        * @param property_types the allowed types for property
        *
        * @exception ManagedElementNotFound if element not found
        *
        */
        void get_allowed_property_types(
                           in CdmwPlatformMngt::ElementPath target_element_path,
                           out CosPropertyService::PropertyTypes property_types)
            raises (CdmwPlatformMngt::ManagedElementNotFound);

        /**
        * Get the allowed properties.
        *
        * @param target_element_path path of target element to access
        *
        * @param property_defs the allowed property definitions
        *
        * @exception ManagedElementNotFound if element not found
        *
        */
        void get_allowed_properties(
                           in CdmwPlatformMngt::ElementPath target_element_path,
                           out CosPropertyService::PropertyDefs property_defs)
            raises (CdmwPlatformMngt::ManagedElementNotFound);

        /**
        * Add or modify a property with its mode.
        *
        * @param target_element_path path of target element to access
        * @param property_name  the name of the property
        * @param property_value the value of the property
        * @param property_mode  the mode of the property
        *
        * @exception ManagedElementNotFound if element not found
        * @exception InvalidPropertyName
        * @exception ConflictingProperty
        * @exception UnsupportedTypeCode
        * @exception UnsupportedProperty
        * @exception UnsupportedMode
        * @exception ReadOnlyProperty
        */
        void define_property_with_mode(
                           in CdmwPlatformMngt::ElementPath target_element_path,
                           in CosPropertyService::PropertyName property_name,
                           in any property_value,
                           in CosPropertyService::PropertyModeType property_mode)
            raises(CdmwPlatformMngt::ManagedElementNotFound,
                   CosPropertyService::InvalidPropertyName,
                   CosPropertyService::ConflictingProperty,
                   CosPropertyService::UnsupportedTypeCode,
                   CosPropertyService::UnsupportedProperty,
                   CosPropertyService::UnsupportedMode,
                   CosPropertyService::ReadOnlyProperty);

        /**
        * Add or modify a set of properties.
        *
        * @param target_element_path path of target element to access
        * @param property_defs  the definition of properties
        *
        * @exception ManagedElementNotFound if element not found
        * @exception MultipleExceptions
        */
        void define_properties_with_modes(
                           in CdmwPlatformMngt::ElementPath target_element_path,
                           in CosPropertyService::PropertyDefs property_defs)
            raises(CdmwPlatformMngt::ManagedElementNotFound,
                   CosPropertyService::MultipleExceptions);

        /**
        * Get the mode of a property.
        *
        * @param target_element_path path of target element to access
        * @param property_name  the name of the property
        *
        * @return the property mode
        *
        * @exception ManagedElementNotFound if element not found
        * @exception PropertyNotFound
        * @exception InvalidPropertyName
        */
        CosPropertyService::PropertyModeType get_property_mode(
                           in CdmwPlatformMngt::ElementPath target_element_path,
                           in CosPropertyService::PropertyName property_name)
            raises(CdmwPlatformMngt::ManagedElementNotFound,
                   CosPropertyService::PropertyNotFound, 
                   CosPropertyService::InvalidPropertyName);

        /**
        * Get the mode of properties.
        *
        * @param target_element_path path of target element to access
        * @param property_names  the name of the properties
        *
        * @return true if all requested properties contains valid value for mode
        *
        * @param property_modes  the name and mode of the properties
        *
        * @exception ManagedElementNotFound if element not found
        *
        */
        boolean get_property_modes(
                           in CdmwPlatformMngt::ElementPath target_element_path,
                           in CosPropertyService::PropertyNames property_names,
                           out CosPropertyService::PropertyModes property_modes)
            raises (CdmwPlatformMngt::ManagedElementNotFound);

        /**
        * Set the mode of a property.
        *
        * @param target_element_path path of target element to access
        * @param property_name  the name of the property
        * @param property_mode  the mode of the property
        *
        * @exception ManagedElementNotFound if element not found
        * @exception InvalidPropertyName
        * @exception PropertyNotFound        
        * @exception UnsupportedMode
        */
        void set_property_mode(
                            in CdmwPlatformMngt::ElementPath target_element_path,
                            in CosPropertyService::PropertyName property_name,
                            in CosPropertyService::PropertyModeType property_mode)
            raises(CdmwPlatformMngt::ManagedElementNotFound,
                   CosPropertyService::InvalidPropertyName, 
                   CosPropertyService::PropertyNotFound, 
                   CosPropertyService::UnsupportedMode);

        /**
        * Set the mode of a properties.
        *
        * @param target_element_path path of target element to access
        * @param property_modes  the name and mode of the properties
        *
        * @exception ManagedElementNotFound if element not found
        * @exception MultipleExceptions
        */
        void set_property_modes(
                            in CdmwPlatformMngt::ElementPath target_element_path,
                            in CosPropertyService::PropertyModes property_modes)
            raises(CdmwPlatformMngt::ManagedElementNotFound,
                   CosPropertyService::MultipleExceptions);
        
        /**
        * Add or Modify a property.
        *
        * @param target_element_path path of target element to access
        * @param property_name  the name of the property
        * @param property_value the value of the property
        *
        * @exception ManagedElementNotFound if element not found
        * @exception InvalidPropertyName
        * @exception ConflictingProperty
        * @exception UnsupportedTypeCode
        * @exception UnsupportedProperty
        * @exception ReadOnlyProperty
        */    
        void define_property(
                            in CdmwPlatformMngt::ElementPath target_element_path,
                            in CosPropertyService::PropertyName property_name,
                            in any property_value)
            raises(CdmwPlatformMngt::ManagedElementNotFound,
                   CosPropertyService::InvalidPropertyName,
                   CosPropertyService::ConflictingProperty,
                   CosPropertyService::UnsupportedTypeCode,
                   CosPropertyService::UnsupportedProperty,
                   CosPropertyService::ReadOnlyProperty);

        /**
        * Add or Modify a set of properties.
        *
        * @param target_element_path path of target element to access
        * @param nproperties  the properties to define (name and value)
        *
        * @exception ManagedElementNotFound if element not found
        * @exception MultipleExceptions
        */
        void define_properties(
                            in CdmwPlatformMngt::ElementPath target_element_path,
                            in CosPropertyService::Properties nproperties)
            raises(CdmwPlatformMngt::ManagedElementNotFound,
                   CosPropertyService::MultipleExceptions);

        /**
        * Get the number of properties.
        *
        * @param target_element_path path of target element to access
        *
        * @return the number of properties
        *
        * @exception ManagedElementNotFound if element not found
        *
        */
        unsigned long get_number_of_properties(
                            in CdmwPlatformMngt::ElementPath target_element_path)
            raises (CdmwPlatformMngt::ManagedElementNotFound);

        /**
        * Get the name of all properties.
        *
        * @param target_element_path path of target element to access
        * @param how_many the number of properties to get
        *
        * @param property_names  the name of the properties
        * @param rest            the iterator to get the rest
        *
        * @exception ManagedElementNotFound if element not found
        *
        */
        void get_all_property_names(
                            in CdmwPlatformMngt::ElementPath target_element_path,
                            in unsigned long how_many,
                            out CosPropertyService::PropertyNames property_names,
                            out CosPropertyService::PropertyNamesIterator rest)
            raises (CdmwPlatformMngt::ManagedElementNotFound);

        /**
        * Get the value of a property.
        *
        * @param target_element_path path of target element to access
        * @param property_name  the name of the property
        *
        * @return the property value
        *
        * @exception ManagedElementNotFound if element not found
        * @exception PropertyNotFound
        * @exception InvalidPropertyName
        */  
        any get_property_value(
                            in CdmwPlatformMngt::ElementPath target_element_path,
                            in CosPropertyService::PropertyName property_name)
            raises(CdmwPlatformMngt::ManagedElementNotFound,
                   CosPropertyService::PropertyNotFound, 
                   CosPropertyService::InvalidPropertyName);

        /**
        * Get the value of properties.
        *
        * @param target_element_path path of target element to access
        * @param property_names  the name of the properties
        *        
        * @param nproperties  the name and value of the properties
        *
        * @return true if all requested properties contains valid value
        *
        * @exception ManagedElementNotFound if element not found
        *
        */
        boolean get_properties(
                            in CdmwPlatformMngt::ElementPath target_element_path,
                            in CosPropertyService::PropertyNames property_names,
                            out CosPropertyService::Properties nproperties)
            raises (CdmwPlatformMngt::ManagedElementNotFound);

        /**
        * Get the value of all properties.
        *
        * @param target_element_path path of target element to access
        * @param how_many the number of properties to get
        *
        * @param nproperties     the name and value of the properties
        * @param rest            the iterator to get the rest
        *
        * @exception ManagedElementNotFound if element not found
        *
        */
        void get_all_properties(
                            in CdmwPlatformMngt::ElementPath target_element_path,
                            in unsigned long how_many,
                            out CosPropertyService::Properties nproperties,
                            out CosPropertyService::PropertiesIterator rest)
            raises (CdmwPlatformMngt::ManagedElementNotFound);

        /**
        * Delete a property.
        *
        * @param target_element_path path of target element to access
        * @param property_name  the name of the property
        *
        * @exception ManagedElementNotFound if element not found
        * @exception PropertyNotFound
        * @exception InvalidPropertyName
        * @exception FixedProperty
        */  
        void delete_property(
                            in CdmwPlatformMngt::ElementPath target_element_path,
                            in CosPropertyService::PropertyName property_name)
            raises(CdmwPlatformMngt::ManagedElementNotFound,
                   CosPropertyService::PropertyNotFound, 
                   CosPropertyService::InvalidPropertyName, 
                   CosPropertyService::FixedProperty);

        /**
        * Delete properties.
        *
        * @param target_element_path path of target element to access
        * @param property_names  the names of property
        *
        * @exception ManagedElementNotFound if element not found
        * @exception MultipleExceptions
        */
        void delete_properties(
                            in CdmwPlatformMngt::ElementPath target_element_path,
                            in CosPropertyService::PropertyNames property_names)
            raises(CdmwPlatformMngt::ManagedElementNotFound,
                   CosPropertyService::MultipleExceptions);

        /**
        * Delete all properties.
        *
        * @param target_element_path path of target element to access
        *
        * @return true if all properties are deleted
        *
        * @exception ManagedElementNotFound if element not found
        */
        boolean delete_all_properties(
                            in CdmwPlatformMngt::ElementPath target_element_path)
            raises (CdmwPlatformMngt::ManagedElementNotFound);

        /**
        * Check if property is defined.
        *
        * @exception ManagedElementNotFound if element not found
        *
        * @param target_element_path path of target element to access
        * @param property_name  the name of the property
        *
        * @exception InvalidPropertyName
        */
        boolean is_property_defined(
                            in CdmwPlatformMngt::ElementPath target_element_path,
                            in CosPropertyService::PropertyName property_name)
            raises(CdmwPlatformMngt::ManagedElementNotFound,
                   CosPropertyService::InvalidPropertyName);
        

    }; // End interface PropertyManagerAccessor


}; // End Module CdmwFTSystMngt

#endif //CDMW_FTSYST_MNGT_PROPERTY_MANAGER_IDL_


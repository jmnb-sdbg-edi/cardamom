<?xml version="1.0" encoding="utf-8"?>
<!-- ===================================================================== -->
<!--
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI. It is derivative work based on PERCO Copyright (C) THALES
 * 2000-2003. All rights reserved.
 * 
 * Copyright (C) THALES 2004-2005. All rights reserved
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Library General Public License as published
 * by the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General Public
 * License along with CARDAMOM; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-->
<!-- ===================================================================== -->


<!DOCTYPE project [
    <!ENTITY common_targets SYSTEM "file:../../data/CommonConfigTargets.xml">
]>


<project name="ConfigureGCC" default="-check-GCC" basedir=".">


    <description>
        This build file locates and checks the GNU C++ compiler.
    </description>


    <!-- Include XML fragments -->
    &common_targets;


    <!-- =======================================================================
        The "-check-GCC" target checks if the compiler is suitable for the
        build.

        It depends on the following targets:
            + "-initialize"
            + "-check-GCC-linux"
            + "-check-GCC-sunos"
            + "-check-GCC-windows"
    -->
    <target name="-check-GCC"
            depends="-initialize, -check-GCC-linux, -check-GCC-sunos,
                     -check-GCC-windows">
    </target>


    <!-- =======================================================================
        The "-check-GCC-linux" target checks if the compiler is suitable for
        the build on a Linux platform.

        It depends on the following targets:
            + "-test1-linux"
            + "-test2-linux"
            + "-test3-linux"
    -->
    <target name="-check-GCC-linux" if="is.linux">
        <antcallback target="-test1-linux"/>
        <antcallback target="-test2-linux" return="gcc.test2.cmdline.output"/>
        <antcallback target="-test3-linux"/>
    </target>


    <!-- =======================================================================
        The "-check-GCC-sunos" target checks if the compiler is suitable for
        the build on a SUN Solaris platform.

        It depends on the following targets:
            + "-test1-sunos"
            + "-test2-sunos"
            + "-test3-sunos"
    -->
    <target name="-check-GCC-sunos" if="is.sunos">
        <antcallback target="-test1-sunos"/>
        <antcallback target="-test2-sunos" return="gcc.test2.cmdline.output"/>
        <antcallback target="-test3-sunos"/>
    </target>


    <!-- =======================================================================
        The "-check-GCC-windows" target checks if the compiler is suitable for
        the build on a Windows platform.
    -->
    <target name="-check-GCC-windows" if="is.windows">
        <!-- TODO -->
    </target>


    <!-- =======================================================================
        The "-locate-GCC" target determines the installation directory of the
        GNU C++ compiler.
    -->
    <target name="-locate-GCC">
        <!--
            there is nothing to do here as we assume that the GCC compiler
            must be found in the PATH.
        -->
    </target>


    <!-- =======================================================================
        The "-initialize" target defines some properties for the build.

        It depends on the following targets:
            + "-check-global-aliases"
    -->
    <target name="-initialize" depends="-check-global-aliases">
        <!-- the required version for GCC -->
        <propertycopy property="gcc.required.version"
                      from="require.${my.os.name}.${tool.name}.version"/>

        <!--
            load properties from the temporary file so that next time the
            "echoproperties" task overwrites this file, the properties are not
            lost.
        -->
        <property file="${cb.tools.conf}"/>

        <property name="tool.fullname" value="GNU C++ Compiler"/>
    </target>


    <!-- =======================================================================
        The "-test1-linux" target checks if the compiler can compile a basic
        C++ program.
    -->
    <target name="-test1-linux">
        <echo>Checking if g++ can compile a basic C++ program</echo>

        <tempfile property="gcc.test1.source.file" destdir="${TMP}"
                  prefix="${tmpfile.prefix}_GCC_test1_" suffix=".cpp"/>

        <!-- write the code to compile into the file -->
        <echo file="${gcc.test1.source.file}">int main() {}</echo>

        <!--
            fix the crlf so that gcc/g++ won't throw the warning: "no newline
            at end of file" (this has to do with the "echo" task used
            previously).
        -->
        <fixcrlf srcdir="${TMP}"
                 includes="${tmpfile.prefix}_GCC_test*.cpp"/>

        <property name="gcc.test1.output.file" value="${TMP}${FS}maintest"/>

        <!-- compile the file -->
        <exec executable="g++" outputproperty="gcc.test1.compilation.messages"
              resultproperty="gcc.test1.return.code" vmlauncher="false">

            <arg value="${gcc.test1.source.file}"/>
            <arg line="-o ${gcc.test1.output.file}"/>
        </exec>

        <!-- the test is successful if the return code equals 0 -->
        <condition property="gcc.compilation.is.ok">
            <equals arg1="${gcc.test1.return.code}" arg2="0"/>
        </condition>

        <!-- clean up -->
        <delete file="${gcc.test1.source.file}"/>
        <delete file="${gcc.test1.output.file}"/>

        <!-- stop checking if the compilation was not ok -->
        <fail unless="gcc.compilation.is.ok"
              message="Error while compiling a basic C++ program."/>
    </target>


    <!-- =======================================================================
        The "-test1-sunos" target checks if the compiler can compile a basic
        C++ program.
    -->
    <target name="-test1-sunos" depends="-test1-linux"/>


    <!-- =======================================================================
        The "-test2-linux" target checks if the compiler version is ok.
    -->
    <target name="-test2-linux">
        <echo>Checking the g++ version</echo>

        <!-- make g++ print its version -->
        <exec executable="g++" vmlauncher="false"
              outputproperty="gcc.test2.cmdline.output"
              resultproperty="gcc.test2.return.code">

            <arg value="-v"/>
        </exec>

        <if>
            <not><equals arg1="${gcc.test2.return.code}" arg2="0"/></not>
            <then>
                <!-- should never happen -->
                <fail>could not obtain ${tool.fullname} version</fail>
            </then>
        </if>

        <!--
            the test is successful if the versions are equal (unless version
            checking is disabled or the check mode is set to "loose")
        -->
        <selecttoken string="${gcc.test2.cmdline.output}" tokenNumber="2"
                     property="gcc.current.ver">

            <filterchain>
                <linecontains>
                    <contains value="version"/>
                </linecontains>
            </filterchain>
        </selecttoken>

        <var name="s" value="warning: your version is ${gcc.current.ver},"/>
        <var name="s" value="${s} expected version is ${gcc.required.version}"/>

        <var name="s2" value="The required version for ${tool.fullname}"/>
        <var name="s2" value="${s2} is ${gcc.required.version}, your"/>
        <var name="s2" value="${s2} version is ${gcc.current.ver}."/>

        <if>
            <istrue value="${require.tool.version.checking}"/>
            <then>
                <if>
                    <not>
                        <equals arg1="${gcc.current.ver}"
                                arg2="${gcc.required.version}" trim="true"/>
                    </not>
                    <then>
                        <if>
                            <equals arg1="${require.tool.check.mode}"
                                    arg2="loose" trim="true"/>
                            <then>
                                <!-- issue a warning message -->
                                <echo>${s}</echo>
                            </then>
                            <else>
                                <!-- stop -->
                                <fail>${s2}</fail>
                            </else>
                        </if>
                    </then>
                </if>
            </then>
        </if>
    </target>


    <!-- =======================================================================
        The "-test2-sunos" target checks if the compiler version is ok.
    -->
    <target name="-test2-sunos" depends="-test2-linux"/>


    <!-- =======================================================================
        The "-test3-linux" target checks if the compiler has multithread
        support.
    -->
    <target name="-test3-linux">
        <echo>Checking if g++ has multithread support</echo>

        <!--
            the test is successful if the command 'g++ -v' returned
            either the string 'Thread model: posix'
                or the string 'Thread model: pthread'
        -->
        <condition property="gcc.is.multithreaded">
            <or>
                <contains string="${gcc.test2.cmdline.output}"
                          substring="posix"/>
                <contains string="${gcc.test2.cmdline.output}"
                          substring="pthread"/>
            </or>
        </condition>

        <!-- stop checking if g++ has no multithreading -->
        <fail unless="gcc.is.multithreaded"
              message="Missing multithread support."/>
    </target>

    
    <!-- =======================================================================
        The "-test3-sunos" target checks if the compiler has multithread
        support.
    -->
    <target name="-test3-sunos" depends="-test3-linux"/>


</project>

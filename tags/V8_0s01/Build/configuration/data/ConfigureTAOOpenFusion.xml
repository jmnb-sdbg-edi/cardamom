<?xml version="1.0" encoding="utf-8"?>
<!-- ===================================================================== -->
<!--
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI. It is derivative work based on PERCO Copyright (C) THALES
 * 2000-2003. All rights reserved.
 * 
 * Copyright (C) THALES 2004-2005. All rights reserved
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Library General Public License as published
 * by the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General Public
 * License along with CARDAMOM; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-->
<!-- ===================================================================== -->


<!DOCTYPE project [
    <!ENTITY common_targets SYSTEM "file:../../data/CommonConfigTargets.xml">
]>


<project name="ConfigureTAOOpenFusion" default="-check-TAO" basedir=".">


    <description>
        This build file locates and checks The TAO OpenFusion.
    </description>


    <!-- Include XML fragments -->
    &common_targets;


    <!-- =======================================================================
        The "-check-TAO" target checks if the ORB is suitable for the build.

        It depends on the following targets:
            + "-initialize"
            + "-check-TAO-linux"
            + "-check-TAO-sunos"
            + "-check-TAO-windows"
            + "-set-TAO-properties"
    -->
    <target name="-check-TAOOpenFusion"
            depends="-initialize, -check-TAOOpenFusion-linux, -check-TAOOpenFusion-sunos,
                     -check-TAOOpenFusion-windows, -set-TAOOpenFusion-properties">

        <!-- save TAO properties -->
        <echoproperties destfile="${cb.tools.conf}" prefix="config."/>
    </target>


    <!-- =======================================================================
        The "-check-TAOOpenFusion-linux" target checks if the ORB is suitable for the
        build on a Linux platform.

        It depends on the following targets:
            + "-test1-linux"
            + "-test2-linux"
            + "-test3-linux"
            + "-test4-linux"
            + "-test5-linux"
            + "-test6-linux"
            + "-test7-linux"
    -->
    <target name="-check-TAOOpenFusion-linux" if="is.linux">
        <antcallback target="-test1-linux"/>
        <antcallback target="-test2-linux"/>
        <antcallback target="-test3-linux"/>
        <antcallback target="-test4-linux"/>
        <antcallback target="-test5-linux"/>
        <antcallback target="-test6-linux"/>
        <antcallback target="-test7-linux"/>
    </target>


    <!-- =======================================================================
        The "-check-TAOOpenFusion-sunos" target checks if the ORB is suitable for the
        build on a SUN Solaris platform.

        It depends on the following targets:
            + "-test1-sunos"
            + "-test2-sunos"
            + "-test3-sunos"
            + "-test4-sunos"
            + "-test5-sunos"
            + "-test6-sunos"
            + "-test7-sunos"
    -->
    <target name="-check-TAOOpenFusion-sunos" if="is.sunos">
        <antcallback target="-test1-sunos"/>
        <antcallback target="-test2-sunos"/>
        <antcallback target="-test3-sunos"/>
        <antcallback target="-test4-sunos"/>
        <antcallback target="-test5-sunos"/>
        <antcallback target="-test6-sunos"/>
        <antcallback target="-test7-sunos"/>
    </target>


    <!-- =======================================================================
        The "-check-TAOOpenFusion-windows" target checks if the ORB is suitable for the
        build on a Windows platform.
    -->
    <target name="-check-TAOOpenFusion-windows">
        <!-- TODO -->
    </target>


    <!-- =======================================================================
        The "-locate-TAO" target determines the installation directory of TAO.
    -->
    <target name="-locate-TAOOpenFusion">
        <!--
            nothing to do here, we assume that the appropriate ACE/TAO
            environment variables are set.
        -->
    </target>


    <!-- =======================================================================
        The "-initialize" target defines some properties for the build.

        It depends on the following targets:
            + "-check-global-aliases"
    -->
    <target name="-initialize" depends="-check-global-aliases">
        <!-- the required version for ACE -->
        <propertycopy property="ace.required.version"
                      from="require.${my.os.name}.ACEOpenFusion.version"/>

        <!-- the required version for TAO -->
        <propertycopy property="tao.required.version"
                      from="require.${my.os.name}.${tool.name}.version"/>

        <!--
            load properties from the temporary file so that next time the
            "echoproperties" task overwrites this file, the properties are not
            lost.
        -->
        <property file="${cb.tools.conf}"/>

        <property name="tool.fullname" value="The ACE ORB"/>
    </target>


    <!-- =======================================================================
        The "-test1-linux" target checks if the ACE version is ok.
    -->
    <target name="-test1-linux">
        <echo>Checking the ACEOpenFusion version</echo>

        <!-- check the ACE_ROOT environment variable -->
        <condition property="ace.has.env.var">
            <isset property="env.ACE_ROOT"/>
        </condition>

        <fail unless="ace.has.env.var"
              message="Please set the ACE_ROOT environment variable."/>

        <!-- the file to read to check the ACE version -->
        <property name="ace.version.file"
                  location="${env.ACE_ROOT}${FS}ace${FS}Version.h"/>

        <available file="${ace.version.file}"
                   property="ace.version.file.present"/>

        <if>
            <isset property="ace.version.file.present"/>
            <then>
                <!-- read the content of the file -->
                <loadfile srcFile="${ace.version.file}"
                          property="ace.version.file.content"/>

                <!--
                    the test is successful if the file Version.h contains the
                    the required version or the version checking is disabled
                    or the check mode is set to "loose".
                -->
                <selecttoken string="${ace.version.file.content}"
                             tokenNumber="1" delimiter="#define ACE_VERSION "
                             property="ace.current.version"/>
                <selecttoken string="${ace.current.version}" tokenNumber="1"
                             delimiter="&quot;" property="ace.current.version"
                             override="true"/>

                <var name="s" value="warning: your version is"/>
                <var name="s" value="${s} ${ace.current.version}, expected"/>
                <var name="s" value="${s} version is ${ace.required.version}"/>

                <var name="s2" value="The required version for ACE is"/>
                <var name="s2" value="${s2} ${ace.required.version}, your"/>
                <var name="s2"
                     value="${s2} version is ${ace.current.version}."/>

                <if>
                    <istrue value="${require.tool.version.checking}"/>
                    <then>
                        <if>
                            <not>
                                <equals arg1="${ace.current.version}"
                                        arg2="${ace.required.version}"
                                        trim="true"/>
                            </not>
                            <then>
                                <if>
                                    <equals arg1="${require.tool.check.mode}"
                                            arg2="loose" trim="true"/>
                                    <then>
                                        <!-- issue a warning message -->
                                        <echo>${s}</echo>
                                    </then>
                                    <else>
                                        <!-- stop -->
                                        <fail>${s2}</fail>
                                    </else>
                                </if>
                            </then>
                        </if>
                    </then>
                </if>
            </then>
            <else>
                <fail>Could not find ${ace.version.file}.</fail>
            </else>
        </if>
    </target>


    <!-- =======================================================================
        The "-test1-sunos" target checks if the ACE version is ok.
    -->
    <target name="-test1-sunos" depends="-test1-linux"/>


    <!-- =======================================================================
        The "-test2-linux" target checks if the ACE libraries can be found.
    -->
    <target name="-test2-linux">
        <echo>Checking the ACEOpenFusion libraries</echo>

        <!-- the test is successful if libACE.* can be located -->
        <condition property="ace.lib.dir.is.ok">
            <or>
                <available file="${env.ACE_ROOT}${FS}ace${FS}libACE.so"/>
                <available file="${env.ACE_ROOT}${FS}ace${FS}libACE.a"/>
            </or>
        </condition>

        <!-- stop checking if none of the libraries were found -->
        <fail unless="ace.lib.dir.is.ok"
              message="Could not find the ACEOpenFusion libraries."/>
    </target>


    <!-- =======================================================================
        The "-test2-sunos" target checks if the ACE libraries can be found.
    -->
    <target name="-test2-sunos" depends="-test2-linux"/>


    <!-- =======================================================================
        The "-test3-linux" target checks if the TAO version is ok.
    -->
    <target name="-test3-linux">
        <echo>Checking the TAOOpenFusion version</echo>

        <!-- check the TAO_ROOT environment variable -->
        <condition property="tao.has.env.var">
            <isset property="env.TAO_ROOT"/>
        </condition>

        <fail unless="tao.has.env.var"
              message="Please set the TAO_ROOT environment variable."/>

        <!-- the file to read to check the TAO version -->
        <property name="tao.version.file"
                  location="${env.TAO_ROOT}${FS}tao${FS}Version.h"/>

        <available file="${tao.version.file}"
                   property="tao.version.file.present"/>

        <if>
            <isset property="tao.version.file.present"/>
            <then>
                <!-- read the content of the file -->
                <loadfile srcFile="${tao.version.file}"
                          property="tao.version.file.content"/>

                <!--
                    the test is successful if the file Version.h contains the
                    the required version or the version checking is disabled
                    or the check mode is set to "loose".
                -->
                <selecttoken string="${tao.version.file.content}"
                             tokenNumber="1" delimiter="#define TAO_VERSION "
                             property="tao.current.version"/>
                <selecttoken string="${tao.current.version}" tokenNumber="1"
                             delimiter="&quot;" property="tao.current.version"
                             override="true"/>

                <var name="s" value="warning: your version is"/>
                <var name="s" value="${s} ${tao.current.version}, expected"/>
                <var name="s" value="${s} version is ${tao.required.version}"/>

                <var name="s2" value="The required version for TAOOpenFusion is"/>
                <var name="s2" value="${s2} ${tao.required.version}, your"/>
                <var name="s2"
                     value="${s2} version is ${tao.current.version}."/>

                <if>
                    <istrue value="${require.tool.version.checking}"/>
                    <then>
                        <if>
                            <not>
                                <equals arg1="${tao.current.version}"
                                        arg2="${tao.required.version}"
                                        trim="true"/>
                            </not>
                            <then>
                                <if>
                                    <equals arg1="${require.tool.check.mode}"
                                            arg2="loose" trim="true"/>
                                    <then>
                                        <!-- issue a warning message -->
                                        <echo>${s}</echo>
                                    </then>
                                    <else>
                                        <!-- stop -->
                                        <fail>${s2}</fail>
                                    </else>
                                </if>
                            </then>
                        </if>
                    </then>
                </if>
            </then>
            <else>
                <fail>Could not find ${tao.version.file}.</fail>
            </else>
        </if>
    </target>


    <!-- =======================================================================
        The "-test3-sunos" target checks if the TAO version is ok.
    -->
    <target name="-test3-sunos" depends="-test3-linux"/>


    <!-- =======================================================================
        The "-test4-linux" target checks if the TAO libraries can be found.
    -->
    <target name="-test4-linux">
        <echo>Checking the TAOOpenFusion libraries</echo>

        <!-- the test is successful if libTAO.* can be located -->
        <condition property="tao.lib.dir.is.ok">
            <or>
                <available file="${env.ACE_ROOT}${FS}ace${FS}libTAO.so"/>
                <available file="${env.ACE_ROOT}${FS}ace${FS}libTAO.a"/>
            </or>
        </condition>

        <!-- stop checking if none of the libraries were found -->
        <fail unless="tao.lib.dir.is.ok"
              message="Could not find the TAO libraries."/>
    </target>


    <!-- =======================================================================
        The "-test4-sunos" target checks if the TAO libraries can be found.
    -->
    <target name="-test4-sunos" depends="-test4-linux"/>


    <!-- =======================================================================
        The "-test5-linux" target checks if the TAO IDL compiler can be found
        and its version is ok.
    -->
    <target name="-test5-linux">
        <echo>Checking the TAO IDL compiler version</echo>

       <available
            file="${env.TAO_ROOT}${FS}TAO_IDL${FS}tao_idl"
            type="file"
            property="tao.idl.present"
        />

        <var name="s" value="Could not find the TAO IDL compiler at" />
        <var name="s" value="${s} ${env.TAO_ROOT}${FS}TAO_IDL${FS}tao_idl" />
        <fail unless="tao.idl.present" message="${s}" />


        <!-- get the TAO IDL compiler version -->
        <exec executable="tao_idl" dir="${env.TAO_ROOT}${FS}TAO_IDL"
              resolveExecutable="true" vmlauncher="false"
              outputproperty="tao.test5.cmdline.output"
              resultproperty="tao.test5.return.code">

            <arg value="-V"/>
        </exec>

        <!--
            the test is successful if the return code equals 0 and tao_idl
            returned the required version (unless version checking is
            disabled).
        -->
        <selecttoken string="${tao.test5.cmdline.output}" tokenNumber="2"
                     delimiter="version "
                     property="current.tao.idl.version"/>

        <condition property="tao.idl.compiler.version.is.ok">
            <or>
                <and>
                    <equals arg1="${tao.test5.return.code}" arg2="0"/>
                    <equals arg1="${current.tao.idl.version}"
                            arg2="${tao.required.version}"/>
                </and>
                <equals arg1="${require.tool.version.checking}" arg2="false"/>
            </or>
        </condition>

        <!-- stop checking if the tao_idl version is not ok -->
        <var name="my.var" value="The required version for the TAOOpenFusion IDL"/>
        <var name="my.var" value="${my.var} compiler is "/>
        <var name="my.var" value="${my.var} ${tao.required.version}, your"/>
        <var name="my.var" value="${my.var} version is "/>
        <var name="my.var" value="${my.var} ${current.tao.idl.version}"/>
        <fail unless="tao.idl.compiler.version.is.ok" message="${my.var}"/>
    </target>


    <!-- =======================================================================
        The "-test5-sunos" target checks if the TAO IDL compiler can be found
        and its version is ok.
    -->
    <target name="-test5-sunos" depends="-test5-linux"/>


    <!-- =======================================================================
        The "-test6-linux" target checks if the TAO IDL compiler can compile a
        basic IDL file.
    -->
    <target name="-test6-linux">
        <echo>Checking if tao_idl can compile a basic IDL file</echo>

        <tempfile property="tao.test6.idl.file" destdir="${TMP}"
                  prefix="${tmpfile.prefix}_TAO_test6_" suffix=".idl"/>

        <!-- write the code to compile into the file -->
        <echo message="module CHECK_IDL{ struct DataType { string id; }; };"
              file="${tao.test6.idl.file}"/>

        <!-- compile the file -->
        <exec executable="tao_idl"
              outputproperty="tao.test6.compilation.messages"
              resultproperty="tao.test6.return.code"
              dir="${env.TAO_ROOT}${FS}TAO_IDL"
              resolveExecutable="true"
              vmlauncher="false">

            <arg line="-o ${TMP}"/>
            <arg value="${tao.test6.idl.file}"/>
        </exec>

        <!-- the test is successful if the return code equals 0 -->
        <condition property="tao.idl.compilation.is.ok">
            <equals arg1="${tao.test6.return.code}" arg2="0"/>
        </condition>

        <!-- clean up -->
        <delete>
            <fileset dir="${TMP}"
                     includes="${tmpfile.prefix}_TAO_test6_*"/>
        </delete>

        <!-- stop checking if the compilation was not ok -->
        <fail unless="tao.idl.compilation.is.ok"
              message="Error while compiling a basic IDL file."/>
    </target>


    <!-- =======================================================================
        The "-test6-sunos" target checks if the TAO IDL compiler can compile a
        basic IDL file.
    -->
    <target name="-test6-sunos" depends="-test6-linux"/>


    <!-- =======================================================================
        The "-test7-linux" target checks if the TAO patches have been applied.
    -->
    <target name="-test7-linux">
        <!-- TODO -->
    </target>


    <!-- =======================================================================
        The "-test7-sunos" target checks if the TAO patches have been applied.
    -->
    <target name="-test7-sunos" depends="-test7-linux"/>


    <!-- =======================================================================
        The "-set-TAO-properties" target defines properties that will be saved
        into the site configuration file.
    -->
    <target name="-set-TAOOpenFusion-properties">
        <!-- install.dir -->
        <property name="config.${tool.name}.install.dir"
                  location="${env.TAO_ROOT}"/>

        <!-- lib.dir -->
        <property name="config.${tool.name}.lib.dir"
                  location="${env.ACE_ROOT}${FS}ace"/>

        <!-- idlcompiler.dir -->
        <property name="tao_idl.dir" location="${env.TAO_ROOT}${FS}TAO_IDL"/>

        <property name="config.${tool.name}.idlcompiler.dir"
                  location="${tao_idl.dir}"/>

        <!-- idlflags.ami -->
        <property name="config.orbcpp.idlflags.ami"
                  value="-GC"/>
                  
        <!-- naming.service.dir -->
        <property name="config.${tool.name}.naming.service.dir"
                  location="${env.TAO_ROOT}${FS}orbsvcs${FS}Naming_Service"/>

        <!-- idlflags.incl.dirs -->
        <property name="idl_specs.dir" value="-I${tao_idl.dir}${FS}idl_specs"/>

        <property name="tao.dir" location="${env.TAO_ROOT}${FS}tao"/>

        <property name="orbsvcs.dir"
                  location="${env.TAO_ROOT}${FS}orbsvcs"/>

        <var name="my.var" value="-I${env.TAO_ROOT} ${idl_specs.dir}"/>
        <var name="my.var" value="${my.var} -I${tao.dir} -I${orbsvcs.dir}"/>
        <var name="my.var" value="${my.var} -I${tao.dir}${FS}IFR_Client"/>

        <property name="config.${tool.name}.idlflags.incl.dirs"
                  value="${my.var}"/>

        <property name="config.${tool.name}.idlflags.extra.incl.dirs"
                  value="-I${orbsvcs.dir}${FS}orbsvcs"/>

        <!-- cflags.incl.dirs -->
        <var name="my.var" value="-I${env.ACE_ROOT} -I${env.TAO_ROOT}"/>
        <var name="my.var" value="${my.var} -I${orbsvcs.dir}"/>
        <var name="my.var" value="${my.var} -I${tao.dir}${FS}IFR_Client"/>
        <var name="my.var"
             value="${my.var} -I${orbsvcs.dir}${FS}orbsvcs${FS}IFRService"/>

        <property name="config.${tool.name}.cflags.incl.dirs"
                  value="${my.var}"/>

        <!-- ldflags.lib.dirs -->
        <property name="config.${tool.name}.ldflags.lib.dirs"
                  value="-L${env.ACE_ROOT}${FS}ace"/>

        <!-- ORB.Lib.Prefix -->
        <property name="config.${tool.name}.ORB.Lib.Prefix" 
                  value="TAO_"/>

        <!-- ORB.lib (package dependent) -->
        <var name="my.var" value=" -lTAO_IORManip -lTAO_FTORB"/>
        <var name="my.var" value="${my.var} -lTAO_PortableGroup"/>
        <var name="my.var" value="${my.var} -lTAO_DynamicInterface"/>

        <property name="config.${tool.name}.FaultTolerance.ORB.Libs"
                  value="${my.var}"/>

        <property name="config.${tool.name}.Time.ORB.Libs"
            value="-lTAO_FTORB"/>


        <var name="my.var" value="-lTAO_IORManip "/>
        <var name="my.var" value="${my.var} -lTAO_PortableGroup"/>
        <var name="my.var" value="${my.var} -lTAO_FaultTolerance"/>
        <var name="my.var" value="${my.var} -lTAO_CosNotification"/>
        <var name="my.var" value="${my.var} -lTAO_DynamicInterface"/>
        <var name="my.var" value="${my.var} -luuid"/>
        
        <property name="config.${tool.name}.LoadBalancing.ORB.Libs"
                  value="${my.var}"/>

        <property name="config.${tool.name}.CCMContainer.ORB.Libs"
                  value="-lTAO_IFR_Client"/>

        <property name="config.${tool.name}.CCMContainer.ORB.Libs"
                  value="-lTAO_IFR_Client"/>

        <property name="config.${tool.name}.SystemMngt.ORB.Libs"
                  value="-lTAO_CosProperty"/>

        <property name="config.${tool.name}.Time.ORB.incl"
            value="-I${orbsvcs.dir}${FS}orbsvcs"/>


        <property name="config.${tool.name}.LoadBalancing.ORB.incl"
            value="-I${env.TAO_ROOT}${FS}tao -I${orbsvcs.dir}${FS}orbsvcs"/>

        <!-- code generation specific -->
        <property name="config.${tool.name}.codegen.defines" value=""/>

        <!-- fault tolerance specific -->
        <property name="config.FaultTolerance.multicast.cflags"  value=""/>
        <property name="config.FaultTolerance.multicast.ldflags" value=""/>

        <!-- stub extension -->
        <property name="config.${tool.name}.stub.ext"
                  value=".cpp"/>
        <!-- skel extension -->
        <property name="config.${tool.name}.skel.ext"
                  value="_skel.cpp"/>


    </target>


</project>


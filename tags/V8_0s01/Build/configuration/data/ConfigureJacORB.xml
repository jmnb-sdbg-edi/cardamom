<?xml version="1.0" encoding="utf-8"?>
<!-- ===================================================================== -->
<!--
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI. It is derivative work based on PERCO Copyright (C) THALES
 * 2000-2003. All rights reserved.
 * 
 * Copyright (C) THALES 2004-2005. All rights reserved
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Library General Public License as published
 * by the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General Public
 * License along with CARDAMOM; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-->
<!-- ===================================================================== -->


<!DOCTYPE project [
    <!ENTITY common_targets SYSTEM "file:../../data/CommonConfigTargets.xml">
]>


<project name="ConfigureJacORB" default="-check-JacORB" basedir=".">


    <description>
        This build file locates and checks JacORB.
    </description>


    <!-- Include XML fragments -->
    &common_targets;


    <!-- =======================================================================
        The "check-JacORB" target checks if JacORB is suitable for the build.

        It depends on the following targets:
            + "-initialize"
            + "-test1"
            + "-set-JacORB-properties"
    -->
    <target name="-check-JacORB"
            depends="-initialize, -test1, -set-JacORB-properties">

        <!-- save JacORB properties -->
        <echoproperties destfile="${cb.tools.conf}" prefix="config."/>
    </target>


    <!-- =======================================================================
        The "-locate-JacORB" target determines the installation directory of
        JacORB.

        It depends on the following targets:
            + "-initialize"
    -->
    <target name="-locate-JacORB" depends="-initialize">
        <!-- determine the JacORB installation directory -->
        <var name="my.var"
             value="Enter the ${tool.fullname} installation directory"/>

        <propertycopy property="jacorb.default.install.dir" silent="true"
                      from="${mb.prev}.config.${tool.name}.install.dir"/>

        <if>
            <isset property="jacorb.default.install.dir"/>
            <then>
                <if>
                    <isfalse value="${passive.mode}"/>
                    <then>
                        <xinput message="${my.var}" dirPathOnly="true"
                                addproperty="config.${tool.name}.install.dir"
                                default="${jacorb.default.install.dir}"/>
                    </then>
                    <else>
                        <propertycopy property="config.${tool.name}.install.dir"
                                      from="jacorb.default.install.dir"/>
                    </else>
                </if>
            </then>
            <else>
                <xinput message="${my.var}" dirPathOnly="true"
                        addproperty="config.${tool.name}.install.dir"/>
            </else>
        </if>

        <propertycopy property="jacorb.install.dir"
                      from="config.${tool.name}.install.dir"/>

        <!-- save some properties temporarily -->
        <propertyfile file="${tmpconfig.cache}">
            <entry key="config.${tool.name}.install.dir"
                   value="${jacorb.install.dir}"/>
        </propertyfile>

        <!-- determine the bin directory -->
        <propertycopy property="jacorb.default.bin.dir" silent="true"
                      from="${mb.prev}.config.${tool.name}.bin.dir"/>

        <if>
            <not>
                <isset property="jacorb.default.bin.dir"/>
            </not>
            <then>
                <!-- try to guess the bin directory -->
                <findfile file="idl"
                          dir="${jacorb.install.dir}" findFirst="true"
                          recursive="true" property="jacorb.imr"/>

                <dirname property="jacorb.default.bin.dir"
                         file="${jacorb.imr}"/>
            </then>
        </if>

        <if>
            <isfalse value="${passive.mode}"/>
            <then>
                <xinput message="Enter the ${tool.fullname} bin directory"
                        addproperty="config.${tool.name}.bin.dir"
                        default="${jacorb.default.bin.dir}" dirPathOnly="true"/>
            </then>
            <else>
                <propertycopy property="config.${tool.name}.bin.dir"
                              from="jacorb.default.bin.dir"/>
            </else>
        </if>

        <propertycopy property="jacorb.bin.dir"
                      from="config.${tool.name}.bin.dir"/>

        <!-- save some properties temporarily -->
        <propertyfile file="${tmpconfig.cache}">
            <entry key="config.${tool.name}.bin.dir"
                   value="${jacorb.bin.dir}"/>
        </propertyfile>

        <!-- determine the lib directory -->
        <propertycopy property="jacorb.default.lib.dir" silent="true"
                      from="${mb.prev}.config.${tool.name}.lib.dir"/>

        <if>
            <not>
                <isset property="jacorb.default.lib.dir"/>
            </not>
            <then>
                <!-- try to guess the lib directory -->
                <findfile file="jacorb.jar"
                          dir="${jacorb.install.dir}" findFirst="true"
                          recursive="true" property="jacorb.jacorb.jar"/>

                <dirname property="jacorb.default.lib.dir"
                         file="${jacorb.jacorb.jar}"/>
            </then>
        </if>

        <if>
            <isfalse value="${passive.mode}"/>
            <then>
                <xinput message="Enter the ${tool.fullname} lib directory"
                        addproperty="config.${tool.name}.lib.dir"
                        default="${jacorb.default.lib.dir}" dirPathOnly="true"/>
            </then>
            <else>
                <propertycopy property="config.${tool.name}.lib.dir"
                              from="jacorb.default.lib.dir"/>
            </else>
        </if>

        <propertycopy property="jacorb.lib.dir"
                      from="config.${tool.name}.lib.dir"/>

        <!-- save some properties temporarily -->
        <propertyfile file="${tmpconfig.cache}">
            <entry key="config.${tool.name}.lib.dir"
                   value="${jacorb.lib.dir}"/>
        </propertyfile>

        <!-- determine the idl directory -->
        <propertycopy property="jacorb.default.idl.dir" silent="true"
                      from="${mb.prev}.config.${tool.name}.idl.dir"/>

        <if>
            <not>
                <isset property="jacorb.default.idl.dir"/>
            </not>
            <then>
                <!-- try to guess the idl directory -->
                <findfile file="Corba.idl"
                          dir="${jacorb.install.dir}" findFirst="true"
                          recursive="true" property="jacorb.imr.idl"/>

                <!--
                    we need to run the "dirname" task twice because the JacORB
                    IDLs are stored in .../idl/jacorb
                -->
                <dirname property="jacorb.imr.idl.dirname"
                         file="${jacorb.imr.idl}"/>
                <dirname property="jacorb.default.idl.dir"
                         file="${jacorb.imr.idl.dirname}"/>
            </then>
        </if>

        <if>
            <isfalse value="${passive.mode}"/>
            <then>
                <xinput message="Enter the ${tool.fullname} idl directory"
                        addproperty="config.${tool.name}.idl.dir"
                        default="${jacorb.default.idl.dir}" dirPathOnly="true"/>
            </then>
            <else>
                <propertycopy property="config.${tool.name}.idl.dir"
                              from="jacorb.default.idl.dir"/>
            </else>
        </if>

        <propertycopy property="jacorb.idl.dir"
                      from="config.${tool.name}.idl.dir"/>

        <!-- save some properties temporarily -->
        <propertyfile file="${tmpconfig.cache}">
            <entry key="config.${tool.name}.idl.dir"
                   value="${jacorb.idl.dir}"/>
        </propertyfile>

        <!-- save the properties -->
        <echoproperties destfile="${cb.tools.conf}" prefix="config."/>
    </target>


    <!-- =======================================================================
        The "-initialize" target defines some properties for the build.

        It depends on the following targets:
            + "-check-global-aliases"
    -->
    <target name="-initialize" depends="-check-global-aliases">
        <!-- the required version for JacORB -->
        <propertycopy property="jacorb.required.version"
                      from="require.${my.os.name}.${tool.name}.version"/>

        <!--
            load properties from the temporary file so that next time the
            "echoproperties" task overwrites this file, the properties are not
            lost.
        -->
        <property file="${cb.tools.conf}"/>

        <property name="tool.fullname" value="JacORB"/>
    </target>


    <!-- =======================================================================
        The "-test1" target checks if the version of JacORB is ok.
    -->
    <target name="-test1">
        <echo>Checking the ${tool.fullname} version</echo>

        <!-- look for the release note file -->
        <propertycopy property="jacorb.install.dir"
                      from="config.${tool.name}.install.dir"/>

        <property name="jacorb.release.note"
            location="${jacorb.install.dir}${FS}src${FS}org${FS}jacorb${FS}util${FS}Version.java"/>

        <if>
            <available file="${jacorb.release.note}"/>
            <then>
                <!-- grep the line which contains the version -->
                <loadfile srcFile="${jacorb.release.note}"
                          property="jacorb.release.note.content">

                    <filterchain>
                        <linecontains>
                            <contains value="String version ="/>
                        </linecontains>
                    </filterchain>
                </loadfile>

                <!-- extract the version from that line -->
                <stringmanip action="trim" property="jacorb.current.ver"
                             string="${jacorb.release.note.content}"/>

                <selecttoken string="${jacorb.current.ver}" 
                             delimiter="&quot;"
                             override="true"
                             tokenNumber="1" property="jacorb.current.ver"/>

                <!--
                    the test is successful if the versions are equal (unless
                    version checking is disabled or the check mode is set to
                    "loose")
                -->
                <var name="s"
                     value="warning: your version is ${jacorb.current.ver},"/>
                <var name="s"
                value="${s} expected version is {jacorb.required.version}"/>

                <var name="s2"
                     value="The required version for ${tool.fullname}"/>
                <var name="s2"
                     value="${s2} is ${jacorb.required.version}, your"/>
                <var name="s2" value="${s2} version is ${jacorb.current.ver}."/>

                <if>
                    <istrue value="${require.tool.version.checking}"/>
                    <then>
                        <if>
                            <not>
                                <equals arg1="${jacorb.current.ver}"
                                        arg2="${jacorb.required.version}"
                                        trim="true"/>
                            </not>
                            <then>
                                <if>
                                    <equals arg1="${require.tool.check.mode}"
                                            arg2="loose" trim="true"/>
                                    <then>
                                        <!-- issue a warning message -->
                                        <echo>${s}</echo>
                                    </then>
                                    <else>
                                        <!-- stop -->
                                        <fail>${s2}</fail>
                                    </else>
                                </if>
                            </then>
                        </if>
                    </then>
                </if>
            </then>
            <else>
                <var name="s" value="could not find ${jacorb.release.note},"/>
                <var name="s" value="${s} skipping version checking"/>
                <echo>${s}</echo>
            </else>
        </if>
    </target>


    <!-- =======================================================================
        The "-set-JacORB-properties" target defines properties that will be
        saved into the site configuration file.
    -->
    <target name="-set-JacORB-properties">
        <!-- classpath -->
        <propertycopy property="jacorb.lib.dir" silent="true"
                      from="config.${tool.name}.lib.dir"/>

        <if>
            <isset property="jacorb.lib.dir"/>
            <then>
                <findfile file="*.jar" dir="${jacorb.lib.dir}"
                          recursive="true" separator="${PS}"
                          property="config.${tool.name}.classpath"/>
            </then>
        </if>

        <propertycopy property="jacorb.bin.dir"
                      from="config.${tool.name}.bin.dir"/>

        <!-- naming.service.dir -->
        <property name="config.${tool.name}.naming.service.dir"
                  location="${jacorb.bin.dir}"/>

        <!-- idlcompiler.dir -->
        <property name="config.${tool.name}.idlcompiler.dir"
                  location="${jacorb.bin.dir}"/>

        <!-- idlflags.incl.dirs -->
        <propertycopy property="jacorb.idl.dir" silent="true"
                      from="config.${tool.name}.idl.dir"/>

        <if>
            <isset property="jacorb.idl.dir"/>
            <then>
                <property name="config.${tool.name}.idlflags.incl.dirs"
                          value="-I${jacorb.idl.dir}${FS}omg"/>
            </then>
        </if>

        <!-- idlflags.extra -->
        <var name="my.var" value="-i2jpackagefile ${config.Build.location}"/>
        <var name="my.var" value="${my.var}${FS}configuration${FS}data${FS}"/>
        <var name="my.var" value="${my.var}package.txt"/>
        <var name="my.var" value="${my.var} -sloppy_forward"/>

        <property name="config.${tool.name}.idlflags.extra"
                  value="${my.var}"/>

	
	<!-- code generation specific -->
        <property name="config.${tool.name}.codegen.defines" value="-DJACORB"/>

    </target>

    
</project>


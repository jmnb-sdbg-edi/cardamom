/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI. It is derivative work based on PERCO Copyright (C) THALES
 * 2000-2003. All rights reserved.
 * 
 * Copyright (C) THALES 2004-2005. All rights reserved
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Library General Public License as published
 * by the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General Public
 * License along with CARDAMOM; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */


#ifndef CDMW_PLATFORM_MNGT_HOST_IDL_
#define CDMW_PLATFORM_MNGT_HOST_IDL_


#include <CdmwPlatformMngtCommon.idl>
#include <CdmwPlatformMngtElementBase.idl>
#include <CdmwPlatformMngtManagedElement.idl>
#include <CdmwPlatformMngtMonitoring.idl>
#include <CdmwPlatformMngtEntityContainer.idl>

#pragma prefix "thalesgroup.com"

module CdmwPlatformMngt
{
    // forward declarations
    interface ProcessesIterator;
    

    /**
     * Host managed element
     */
    interface Host : ManagedElement, RWEntityContainer
    {

        /**
        * The status of the host.
        */
        readonly attribute HostStatus status;

        /**
        * The full path to the platform application executable.
        */
        readonly attribute string platform_application_exe;

	//status additional info ...
        readonly attribute string host_status_info ;

        /**
        * Returns the processes belonging to the host.
        * The first how_many processes will be returned at most and the
        * rest of the processes may be retrieved thanks to the iterator.
        *
        * @param how_many the number of processes to return
        * @param processes_iterator the iterator to the rest of processes.
        * @return At most the number of processes requested
        */
        Processes get_processes(in unsigned long how_many,
                                out ProcessesIterator processes_iterator);
        
       /**     
        * Return a host name
        *
        * @param  in string  host_name
        * @return : ElementName
        */
         
        CdmwPlatformMngt::ElementName get_host_name();

       /**     
        * Returns a process.
        *
        * @param process_name : the name of process
        * @return : a Process
        */
         
        Process get_process (in string process_name, in string application_name)
             raises (ProcessNotFound);


       /**     
        * Returns the CompleteMonitoringInfo struct
        *
        * @param 
        * @return : CompleteMonitoringInfo
        */
        CompleteMonitoringInfo get_monitoring_parameters() ;
       /**     

        * set CompleteMonitoringInfo attribute
        *
        * @param CompleteMonitoringInfo
        * @return : void
        */
        void set_monitoring_parameters( in CompleteMonitoringInfo monitoring_parameters) ;
        
       /**     
        * Returns the global_supervision_indicator
        *
        * @param 
        * @return : boolean
        */
        boolean get_global_supervision_indicator() ;

       /**     
        * to set the global_supervision_indicator
        *
        * @param: boolean 
        * @return : 
        */
        void set_global_supervision_indicator(in boolean global_supervision_indicator) ;            
            
            
        /**
        * Shutdowns the host.
        */
        void shutdown ();


        /**
        * Cold Reboots the host.
        */
        void cold_reboot ();
        
        /**
        * Hot Reboots the host.
        */
        void hot_reboot ();

    };


    typedef sequence<Host> Hosts;


    /**
    * The iterator for HostsProxies.
    */
    interface HostsIterator
    {
        void reset();

        boolean next_one(out Host a_host);

        boolean next_n(in unsigned long how_many,
           out Hosts n_hosts);

        void destroy();

    }; // End interface HostsIterator


    /**
    * The container of known hosts.
    */
    interface HostContainer
    {

        unsigned long get_number_of_hosts();

        void get_all_host_names(in unsigned long how_many,
            out ElementNames host_names,
            out ElementNamesIterator rest);

        Host get_host(in ElementName host_name)
            raises(HostNotFound);

        boolean get_hosts(
            in ElementNames host_names,
            out Hosts hosts);

        void get_all_hosts(in unsigned long how_many,
            out Hosts hosts,
            out HostsIterator rest);

    }; // End interface HostContainer


}; // End Module CdmwPlatformMngt


#endif // CDMW_PLATFORM_MNGT_HOST_IDL_


/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI. It is derivative work based on PERCO Copyright (C) THALES
 * 2000-2003. All rights reserved.
 * 
 * Copyright (C) THALES 2004-2005. All rights reserved
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Library General Public License as published
 * by the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General Public
 * License along with CARDAMOM; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */


#ifndef CDMW_PLATFORM_MNGT_PROCESS_DELEGATE_IDL_
#define CDMW_PLATFORM_MNGT_PROCESS_DELEGATE_IDL_


#include <CdmwPlatformMngtBase.idl>
#include <CdmwPlatformMngtCommonBase.idl>
#include <CdmwPlatformMngtCommandBase.idl>
#include <CdmwPlatformMngtMonitoring.idl>
#include <FTPullMonitorable.idl>

#pragma prefix "thalesgroup.com"

module CdmwPlatformMngt
{
    /**
     * The managed process delegate interface.
     */
    interface ProcessDelegate
    {

        /**
        * The order of the requested operation is invalid.
        */
        exception BadOrder {};

        /**
        * There's actually no other step to perform.
        */
        exception InvalidStep {};

        /**
        * The process is not ready to run.
        */
        exception NotReadyToRun {};

        /**
        * The requested operation has already been done.
        */
        exception AlreadyDone {};

        /**
        * The number of initialisation steps of this managed process.
        */
        readonly attribute unsigned long nb_steps;

        /**
        * Returns the service embedded in this managed process
        * (which is in fact a service provider).
        *
        * @return NIL if no service is available.
        */
        Object get_service();

        /**
        * Returns the pull monitorable interface.
        *
        * @return NIL if the managed process doesn't support the pull model
        * of monitoring.
        */
        ::FT::PullMonitorable get_pull_monitorable();

        /**
        * Returns the push monitorable interface.
        *
        * @return NIL if the managed process doesn't support the push model
        * of monitoring.
        */
        PushMonitorable get_push_monitorable();

        /**
        * Requests the process to initialise or to perform its first step
        * of initialisation.
        *
        * @param startup_kind the startup kind of the whole system.
        *
        * @exception BadOrder if the initialisation or the first step of
        * initialisation has already been performed.
        */
        void initialise(in CdmwPlatformMngtBase::StartupKind startup_kind)
            raises(BadOrder);
        
        /**
        * Requests the process to perform its next step of initialisation.
        *
        * @exception BadOrder if the first step of initialisation has not
        * been performed yet.
        * @exception InvalidStep if there is no other step to perform.
        */
        void next_step()
            raises(BadOrder, InvalidStep);

        /**
        * Requests the process to run.
        *
        * @exception NotReadyToRun if the process has not been requested
        * to perform all its necessary initialisation steps.
        * @exception AlreadyDone if the process is already running.
        */
        void run()
            raises(NotReadyToRun, AlreadyDone);

        /**
        * Requests the process to stop properly.
        */
        void stop();
        
        
        /**
        * Call command on Process.
        *
        * @param command_name the name of the command
        * @param command_args the arguments of the command
        * @param result_info info about result of command
        *
        * @return failed or ok
        *
        * @exception CommandCallBackNotFound if the command 
        *            associated callback is not found
        */
        CommandResponse call_command(in string command_name,
                          in CmdParameterValues command_args,
                          out string result_info)
              raises(CommandCallBackNotFound);
              
        /**
        * Call command on Entity of Process.
        *
        * @param entity_name the name of the entity
        * @param command_name the name of the command
        * @param command_args the arguments of the command
        * @param result_info info about result of command
        *
        * @return failed or ok
        *
        * @exception CommandCallBackNotFound if the command 
        *            associated callback is not found
        */
        CommandResponse call_entity_command(
                          in ElementName entity_name,
                          in string command_name,
                          in CmdParameterValues command_args,
                          out string result_info)
              raises(CommandCallBackNotFound);

    }; // End interface ProcessDelegate


}; // End Module CdmwPlatformMngt

#endif // CDMW_PLATFORM_MNGT_PROCESS_DELEGATE_IDL_


/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI. It is derivative work based on PERCO Copyright (C) THALES
 * 2000-2003. All rights reserved.
 * 
 * Copyright (C) THALES 2004-2005. All rights reserved
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Library General Public License as published
 * by the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General Public
 * License along with CARDAMOM; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */


#ifndef CDMW_PLATFORM_MNGT_COMMON_IDL_
#define CDMW_PLATFORM_MNGT_COMMON_IDL_

#include <CosPropertyService.idl>

#include <CdmwPlatformMngtBase.idl>
#include <CdmwPlatformMngtCommonBase.idl>
#include <CdmwPlatformMngtService.idl>



#pragma prefix "thalesgroup.com"


/**
 * Module defining the CDMW Platform Management service.
 */
module CdmwPlatformMngt
{
    /////////////////////////
    // forward declarations
    /////////////////////////
    
    interface Process;
    interface ProcessObserver;
        
    ////////////////////
    // type definition
    ////////////////////
    

    ///////////////
    // structures
    //////////////
    
    /**
     * The identifier of a Process.
     */
    struct ProcessID
    {
        /**
         * The name of the application owning the process.
         */
        ElementName application_name;

        /**
         * The name of the process.
         */
        ElementName process_name;
        
        /**
         * The name of the host.
         */
        ElementName host_name;
    };



    /////////////////
    // enumerations
    /////////////////
    
    /**
    * The different modes of the system and its applications.
    */
    enum FunctioningMode
    {
        /**
        * The system or the application is functioning normally
        */
        NORMAL_MODE,

        /**
        * The functioning of the system or the application is degraded 
        */
        DEGRADED_MODE
    };


    //enum. for the process_mode attribute of Process
    /* The process mode denotes whether the process is:
       Primary, First Backup, Backup (group a fault-tolerant processes); 
       Single (if it does not belong to any group of fault-tolerant processes).*/

 
    enum ProcessMode
    {
    PRIMARY,
    FIRST_BACKUP,
    BACKUP,
    SINGLE
    };
    
    ///////////////
    // Exceptions
    ///////////////
    
    /**
     * Exception raised when an attribute name is not found 
     * during the use of facade to set (or to get) an attribute
     */
    exception AttributeNotFound{};

    /**
     * Exception raised when an operation invocation
     * is not allowed due to the status of the callee interface.
     */
    exception IncompatibleStatus {};

    /**
     * Exception raised when an operation cannot be invoked again.
     */
    exception AlreadyDone {};

    
    
    // service
    
    /**
    * There's a duplicate service among a list of services.
    */
    exception DuplicateService
    {
        CdmwPlatformMngtService::ServiceName service_name;
    };

    /**
    * There's a duplicate service among the services of the process.
    */
    exception DuplicateProcessService
    {
        ElementName process_name;
        ElementName host_name;
        CdmwPlatformMngtService::ServiceName service_name;
    };

    
    
    
    
    
    // property
    
    /**
    * The property defined in the list cannot be found.
    */
    exception PropertyInListNotFound
    {
        CosPropertyService::PropertyName property_name;
    };
    
    /**
    * The specified observer has not been found for the properties.
    */
    exception PropertyObserverNotFound 
    {
        CosPropertyService::PropertyNames property_names;
    };
        
    /**
    * Property exception in specified host
    */
    exception HostPropertyExceptions
    {
        ElementName host_name;
        CosPropertyService::PropertyExceptions exceptions;
    };
    
    /**
    * Property exception in specified process
    */
    exception ProcessPropertyExceptions
    {
        ElementName process_name;
        ElementName host_name;
        CosPropertyService::PropertyExceptions exceptions;
    };
    
    
  


    // command
        
    /**
    * There's a duplicate command.
    */
    exception DuplicateCommand
    {
        string command_name;
    };

    /**
    * There's a duplicate command among the processes.
    */
    exception DuplicateProcessCommand
    {
        ElementName process_name;
        ElementName host_name;
        string command_name;
    };
    
    /**
    * There's a duplicate command among the entities.
    */
    exception DuplicateEntityCommand
    {
        ElementName entity_name;
        string command_name;
    };
    
    /**
    * There's a duplicate command.
    */
    exception DuplicateCommandArg
    {
        string command_name;
        string parameter_name;
    };

    /**
    * There's a duplicate command among the processes.
    */
    exception DuplicateProcessCommandArg
    {
        ElementName process_name;
        ElementName host_name;
        string command_name;
        string parameter_name;
    };
    
    /**
    * There's a duplicate command among the entities.
    */
    exception DuplicateEntityCommandArg
    {
        ElementName entity_name;
        string command_name;
        string parameter_name;
    };
    
    
    
    // entity
    
    /**
    * There's a duplicate entity among a list of entities.
    */
    exception DuplicateEntity
    {
        ElementName entity_name;
    };

    /**
    * There's a duplicate entity among the entities of the host.
    */
    exception DuplicateHostEntity
    {
        ElementName host_name;
        ElementName entity_name;
    };
    
    /**
    * There's a duplicate entity among the entities of the process.
    */
    exception DuplicateProcessEntity
    {
        ElementName process_name;
        ElementName host_name;
        ElementName entity_name;
    };
    
    
    
    
    
    
    // host
    
    /**
    * The specified host already exists.
    */
    exception HostAlreadyExists {};

    /**
    * There's a duplicate host among a list of hosts.
    */
    exception DuplicateHost
    {
        ElementName host_name;
    };


    
    // process
    
    /**
    * There's a duplicate process among a list of processes.
    */
    exception DuplicateProcess
    {
        ElementName process_name;
        ElementName host_name;
    };

    /**
    * There's a duplicate step label among the steps.
    */
    exception DuplicateStep
    {
        string step_label;
    };

    /**
    * There's a duplicate step label among the steps of the process.
    */
    exception DuplicateProcessStep
    {
        ElementName process_name;
        ElementName host_name;
        string step_label;
    };
        
    /**
    * There's actually no other step to perform.
    */
    exception InvalidStep {};

    /**
    * The process is not ready to run.
    */
    exception NotReadyToRun {};

    /**
    * The process is still active.
    * See ProcessStatus.
    */
    exception ProcessStillActive {};
    
    
    /**
    * The host where a process must run has not been found.
    */
    exception ProcessHostNotFound
    {
        ElementName process_name;
        ElementName host_name;
    };
    
    // application
    
    /**
    * The application is still active.
    * See ApplicationStatus.
    */
    exception ApplicationStillActive {};

    /**
    * Exception indicating that the managed process is either 
    * already monitored when trying to start the monitoring of it
    * or is not monitored when trying to stop the monitoring of it.
    */
    exception IncompatibleMonitoringCommand {};

    /**
    * Exception indicating that the monitoring interval is incompatible with the monitoring timeout.
    */
    exception IncompatibleMonitoringValue {};


    // runset
    
    /**
    * The specified runset has not been found.
    */
    exception RunSetNotFound {};
    
    /**
    * The element already exists in the runset or among existing runsets.
    */
    exception DuplicateRunSetElement
    {
        string element;
    };





    
    // system
    
    



    ///////////////////
    // graph elements
    ///////////////////
    
    /**
     * The graph element.
     * A graph element is used to represent a process or an application.
     */
    valuetype GraphElement;

    /**
     * The sequence of graph elements.
     */
    typedef sequence<GraphElement> GraphElements;


    valuetype GraphElement
    {
        /**
         * The name identifying the element.
         * It refers in fact to a process name or an application name.
         */
        public string name;

        /**
         * The lifecycle step of the process.
         * Meaningful only for an element representing a managed process.
         */
        public unsigned short step;

        /**
         * The successors of the element.
         */
        public GraphElements successors;

        /**
         * The factory method.
         */
        factory create(in string name, in unsigned short step);

    };

    /**
    * The name of the element doesn't refer to an existing process or
    * application.
    */
    exception ReferenceNotFound
    {
        string name;
    };

    /**
    * The step of the process is out of bound.
    */
    exception StepOutOfBound
    {
        string name;
        unsigned short step;
    };

    /**
     * The graph contains a circular reference.
     */
    exception CircularReference
    {
        string name;
        unsigned short step;
    };

    /**
     * A path of the graph contains a jump between steps of the same process.
     */
    exception StepJump
    {
        string name;
        unsigned short origin_step;
        unsigned short target_step;
    };


    ///////////
    // runset
    ///////////
        
    /**
     * The name identifying a run set.
     */
    typedef string RunSetName;

  
    /**
     * The elements composing a runset.
     */
    typedef sequence<string> RunSet;

    /**
     * The runset definition.
     */
    struct RunSetDef
    {

        /**
         * The name identifying the runset.
         */
        RunSetName set_name;

        /**
         * The elements composing the runset.
         */
        RunSet run_set;
    };
    
    

    //////////////
    // property
    //////////////
    
    
    /**
     * The different types of property mode.
     */
    enum PropertyModeType
    {
        /**
        * read write property
        */
        RW_MODE,
	
	                                                                                                   
 	/**
        * read only property
        */
        RO_MODE
	  
    };
    
    
    /**
     * The different types of property value.
     */
    enum PropertyValueType
    {
        INT_PROPERTY,
        FLOAT_PROPERTY,
        STRING_PROPERTY,
        INT_LIST_PROPERTY,
        FLOAT_LIST_PROPERTY,
        STRING_LIST_PROPERTY
    };
    
    /**
     * The definition of a property.
     */
    struct PropertyDef
    {
        /**
         * The name of the property.
         */
        CosPropertyService::PropertyName property_name;
        
        /**
         * The mode of the property.
         */
        PropertyModeType mode_type;
        
        /**
         * The type of the property value.
         */
        PropertyValueType value_type;
        
        /**
         * The initial value of the property.
         */
        any initial_value;
    };

    
    typedef sequence<PropertyDef> PropertyDefs;
    typedef sequence<any> Anys; 
    
    

    ////////////
    // command
    ////////////
    
    
    
    /**
     * The different types of command arguments.
     */
    enum CmdParameterType
    {
        INTEGER_CMD_ARG,
        FLOAT_CMD_ARG,
        STRING_CMD_ARG
    };
    
    /**
    * The Command parameter descriptor.
    */
    struct CmdParameterDescriptor
    {
        /**
         * The name of the parameter
         */
        string parameter_name;

        /**
         * The type of the parameter.
         */
        CmdParameterType parameter_type;
    };

    typedef sequence<CmdParameterDescriptor> CmdParameterDescriptors;
    
    
    
    /**
     * The definition of a command.
     */
    struct CommandDef
    {
        /**
         * The name of the command.
         */
        string command_name;
        
        /**
         * The timeout of the command.
         */
        Timeout command_timeout;
        
        /**
         * The parameters of the command.
         */
        CmdParameterDescriptors command_parameters;
    };

    
    typedef sequence<CommandDef> CommandDefs;
    
    

    ////////////
    // entity
    ////////////    
    
    /**
     * The definition of an entity.
     */
    struct EntityDef
    {
        /**
         * The name of the entity.
         */
        string entity_name;
        
        /**
         * The available status values.
         */
        EntityStatusValues status_values;
        
        /**
        * The properties of the entity.
        */
        PropertyDefs properties;
        
        /**
        * The commands of the entity.
        */
        CommandDefs commands;
    };

    
    typedef sequence<EntityDef> EntityDefs;
    
    

    /////////
    // host
    /////////
    
    
    /**
     * The different status of a host.
     */
    enum HostStatus
    {
        /**
        * The host is responding
        */
        HOST_RESPONDING,

        /**
        * The host is not responding
        */
        HOST_UNREACHABLE
    };



    /**
     * The definition of a host.
     */
    struct HostDef
    {

        /**
         * The name of the host.
         */
        ElementName host_name;

        /**
        * The full path to the platform application executable of this host.
        */
        string platform_application_exe;

        /**
        * The full path to the application agent executable of this host.
        */
        string application_agent_exe;

        /**
         * The monitoring information about the daemon running on the host.
         */
        MonitoringInfo daemon_monitoring_info;
        
	//complete monitoring info .
        CompleteMonitoringInfo monitoring_parameters;

        /**
        * The entities of the host.
        */
        EntityDefs entities;
        
        /**
        * The properties of the host.
        */
        PropertyDefs properties;

        /**
        * global supervision indicator
        */

        boolean global_supervision_indicator;
    };

    
    typedef sequence<HostDef> HostDefs;


    ////////////
    // process
    ////////////
    
    /**
    * The sequence of Process.
    */
    typedef sequence<Process> Processes;


    

    /**
     * The different types of process.
     */
    enum ProcessType
    {
        /**
        * Process not managed by the Platform Management
        * (except for the creation and the kill)
        */
        UNMANAGED_PROCESS,

        /**
        * Process managed by the Platform Management
        */
        MANAGED_PROCESS,

        /**
        * Special kind of managed process embedding a service
        */
        SERVICE_PROVIDER,

        /**
        * Special kind of managed process embedding CCM components
        */
        COMPONENT_SERVER
    };

    /**
     * The different status of a process.
     * The actual status of a process is the combination
     * of its status and the relevant step within this status.
     *
     * A process is considered as inactive if it has the following status :
     * INITIAL, STOPPED, ENDED, FAILED_*
     */
    enum ProcessStatus
    {
        /**
        * The initial status
        */
        PROCESS_INITIAL,

        /**
        * The initialisation is in progress
        */
        PROCESS_INITIALISING,

        /**
        * An initialisation step has been performed
        */
        PROCESS_STEP_PERFORMED,

        /**
        * The initialisation is completed
        * (All initialisation steps has been performed)
        */
        PROCESS_INITIALISED,

        /**
        * A request for run has been performed
        */
        PROCESS_RUN_REQUEST,

        /**
        * The process is running
        */
        PROCESS_RUNNING,

        /**
        * The stop is in progress
        */
        PROCESS_STOPPING,

        /**
        * The application is stopped
        */
        PROCESS_STOPPED,

        /**
        * The process has ended itself normally
        */
        PROCESS_ENDED,

        /**
        * The process has reported an applicative error
        */
        PROCESS_FAILED_ERROR,

        /**
        * The timeout allowed for a request has expired
        */
        PROCESS_FAILED_TIMEOUT,

        /**
        * The lifecycle definition of the process doesn't correspond to the
        * actual lifecycle of the process.
        */
        PROCESS_FAILED_DISCREPANCY,

        /**
        * The process is invalid. Possible reasons are :
        * - the process executable is invalid
        * - the application agent managing the process has crashed...
        */
        PROCESS_FAILED_INVALID,

        /**
        * The process doesn't respond
        */
        PROCESS_FAILED_NO_RESPONSE,

        /**
        * The process is dead
        */
        PROCESS_FAILED_DEATH

    };


    /**
     * The status of a short request.
     */
    enum RequestStatus
    {
        /**
        * The request has succeeded
        */
        REQUEST_SUCCEED,

        /**
        * The timeout allowed has expired
        */
        REQUEST_TIMEOUT,

        /**
        * The request has returned an error
        */
        REQUEST_ERROR
    };


    /**
     * The status of a long request.
     */
    enum LongRequestStatus
    {
        /**
        * The request has been performed and is considered as completed.
        */
        LONG_REQUEST_COMPLETED,

        /**
        * The request has been performed and is not considered as completed.
        */
        LONG_REQUEST_NOT_COMPLETED,

        /**
        * The request has been suspended
        */
        LONG_REQUEST_SUSPENDED,

        /**
        * The request has been aborted
        */
        LONG_REQUEST_ABORTED
    };

    /**
     * The process restart types.
     */
    enum RestartType
    {
        /**
        * COLD RESTART.
        */
        COLD_RESTART,
        
        /**
        * HOT RESTART.
        */
        HOT_RESTART
    };
    
    

    /**
     * The different results for the process commands.
     */
    enum ProcessCommandResult
    {
        /**
        * The command has succeeded
        */
        PROCESS_CMD_SUCCEED,
        
        /**
        * The command has thrown an exception
        */
        PROCESS_CMD_EXCEPTION,

        /**
        * The timeout allowed has expired
        */
        PROCESS_CMD_TIMEOUT,

        /**
        * Error reported by process during its creation
        */
        PROCESS_CREATION_ERR,
        
        /**
        * The process already exist
        */
        PROCESS_ALREADY_EXIST,
        
        /**
        * The process info are invalid
        */
        PROCESS_INVALID_INFO,
        
        /**
        * Bad Order in command processing
        */
        PROCESS_CMD_BAD_ORDER,
        
        /**
        * Step invalid in processing
        */
        PROCESS_CMD_INVALID_STEP,
        
        /**
         * Init already done
         */
        PROCESS_INIT_ALREADY_DONE,

        /**
         * Step already done
         */
        PROCESS_STEP_ALREADY_DONE,

        /**
        * Process not ready to run
        */
        PROCESS_NOT_READY_TO_RUN,
        
        /**
        * Process run already done
        */
        PROCESS_RUN_ALREADY_DONE,
        
        /**
         * Stop already done
         */ 
        PROCESS_STOP_ALREADY_DONE
    };

    /**
     * A process step.
     * Currently, steps are only used for the initialisation of a process.
     */
    struct Step
    {
        /**
         * The label of the step.
         */
        string step_label;

        /**
         * The timeout allowed for performing the step.
         */
        Timeout step_timeout;
    };

    typedef sequence<Step> Steps;

    /**
     * The definition of the lifecycle of a process.
     */
    struct LifeCycleDef
    {

        /**
         * The steps of the initialisation.
         */
        Steps init_steps;

        /**
         * The timeout allowed for the run of the process.
         */
        Timeout run_timeout;

        /**
         * The timeout allowed for the stop of the process.
         */
        Timeout stop_timeout;
        
        /**
         * The flag indicate the process is started automatically at system startup.
         */
        boolean auto_start;

    };


    

    /**
     * The definition of a process.
     */
    valuetype ProcessDef
    {

        /**
        * The name identifying the process.
        */
        public ElementName name;
        
        /**
        * The name of the host where the process should run.
        */
        public ElementName host_name;

        /**
        * The type of the process.
        */
        public ProcessType type;

       /**
        * The properties of the process.
        */
        public PropertyDefs properties;

        /**
        * Indicates if the process is started manually.
        */
        public boolean manual_starting;

        /**
        * Indicates if the process mode
        */
        public ProcessMode process_mode;
        
        /**
        * Indicates whether the process ends itself.
        */
        public boolean auto_ending;

        /**
        * The information for creating the associated Operating System Process.
        */
        public ProcessInfo process_info;
        
        /**
        * The information about the exit/autorestart of process.
        */
        public ExitAutoRestartInfo exit_autorestart_info;

        /*
	* indicator denoting whether the process must be memory resident
	*/
        public boolean memory_resident;

        /*
	* core dump size
	*/
	public long core_dump_size;

        /**
        * The factory method.
        */
        factory create(in ElementName name);
    };

    /**
     * The definition of a managed process.
     */
    valuetype ManagedProcessDef : ProcessDef
    {
        /**
        * The entities of the process.
        */
        public EntityDefs entities;
        
        /**
        * The commands of the process.
        */
        public CommandDefs commands;

        /**
        * The service definitions of the process.
        */
        public CdmwPlatformMngtService::ServiceDefs service_definitions;
        
        /**
        * The lifecycle of the process.
        */
        public LifeCycleDef life_cycle;

	/**
        * The properties of the process.
        */
        //public PropertyDefs properties;


        /**
        * The monitoring information for the process.
        */
        public CompleteMonitoringInfo monitoring_info;


        factory create(in ElementName name, in ProcessType type);
    };


    typedef sequence<ProcessDef> ProcessDefs;
    
    
    

    ////////////////
    // Application
    ////////////////
    
    /**
     * The different status of an application.
     * The actual status of an application is the combination
     * of its mode and its status.
     *
     * An application is considered as inactive if it has the following status :
     * INITIAL, STOPPED
     */
    enum ApplicationStatus
    {

        /**
        * The initial status
        */
        APPLICATION_INITIAL,

        /**
        * The initialisation is in progress
        */
        APPLICATION_INITIALISING,

        /**
        * The initialisation is suspended due to a process failure
        */
        APPLICATION_INITIALISATION_SUSPENDED,

        /**
        * The initialisation is incomplete due to the incomplete
        * initialisation of a process
        */
        APPLICATION_INITIALISATION_INCOMPLETE,

        /**
        * The application is initialised
        */
        APPLICATION_INITIALISED,

        /**
        * A request for run has been performed
        */
        APPLICATION_RUN_REQUEST,

        /**
        * The application is running
        */
        APPLICATION_RUNNING,

        /**
        * The application is stopping
        */
        APPLICATION_STOPPING,

        /**
        * The application is stopped
        */
        APPLICATION_STOPPED,

        /**
        * The application has failed
        * (Failure of application agents ...)
        */
        APPLICATION_FAILED

    };

    /**
     * The definition of a platform application.
     */
    struct PlatformApplicationDef
    {
        /**
        * The name identifying the application.
        */
        ElementName application_name;

        /**
        * The name of the host where the platform application should run.
        */
        ElementName host_name;

        /**
        * The light information about the platform application.
        */
        ProcessLightInfo platform_application_info;

        /**
        * The light information about the application agents.
        */
        ProcessLightInfo application_agent_info;

        /**
        * The monitoring information for the platform application and its agents.
        */
        MonitoringInfo monitoring_info;

    };


    /**
     * The definition of the application autorestart info.
     */
    struct ApplicationAutoRestartInfo
    {
        /**
         * Indicate if the application must be restarted.
         */
        boolean  auto_restart;
         
        /**
         * The maximum number of restart attempt.
         */
        long max_nbr_of_restart_attempt;        
    };

    /**
     * The definition of an application.
     */
    struct ApplicationDef
    {
        /**
        * Indicates if the application is started manually.
        */
        boolean manual_starting;
        
        /**
        * The information about the autorestart of application.
        */
        ApplicationAutoRestartInfo autorestart_info;
        
        /**
        * The processes of the application.
        */
        ProcessDefs processes;

        /**
        * The entities of the application.
        */
        EntityDefs entities;
        
        /**
        * The properties of the application.
        */
        PropertyDefs properties;

        /**
        * The service definitions of the application.
        */
        CdmwPlatformMngtService::ServiceDefs service_definitions;

    };


    ////////////
    // System
    ////////////
    
    
    /**
     * The different status of a system.
     * The actual status of the system is the combination
     * of its mode and its status.
     */
    enum SystemStatus
    {
        /**
        * The initial status
        */
        SYSTEM_INITIAL,

        /**
        * The system is starting
        */
        SYSTEM_STARTING,

        /**
        * The startup of the system is suspended
        */
        SYSTEM_STARTUP_SUSPENDED,

        /**
        * The system is started
        */
        SYSTEM_STARTED,

        /**
        * The system is stopping
        */
        SYSTEM_STOPPING,

        /**
        * The system is stopped
        */
        SYSTEM_STOPPED
    };



    /**
     * The definition of the system.
     */
    struct SystemDef
    {

        /**
        * The name identifying the system.
        */
        ElementName system_name;


	/** 
	* a user-defined value which, for example, allows to define
	* whether the system is 
	* running as operational, simulation, training, test, etc…
	*/

        string system_mission;

	/** 
	* host on which the master supervision service is running
	* added on 22-7-2055 
	* 
	*/

        string master_host;

        /**
        * The port used by the whole system for contacting hosts' daemon.
        */
        Port system_port;

        /**
        * The entities of the system.
        */
        EntityDefs entities;
        
        /**
        * The properties of the system.
        */
        PropertyDefs properties;

        /**
        * The service definitions of the system.
        */
        CdmwPlatformMngtService::ServiceDefs service_definitions;

        /**
        * The hosts used by the system.
        */
        HostDefs hosts;
    };


    /**
     * The kind of event.
     */
    enum EventKind
    {
        /**
         * A mode change of the system.
         */
        SYSTEM_MODE_CHANGE,

        /**
         * A status change of the system.
         */
        SYSTEM_STATUS_CHANGE,

        /**
         * A status change of a host.
         */
        HOST_STATUS_CHANGE,

        /**
         * An application agent has crashed on a host.
         */
        APPLICATION_AGENT_DEATH,

        /**
         * A mode change of an application.
         */
        APPLICATION_MODE_CHANGE,

        /**
         * A status change of an application.
         */
        APPLICATION_STATUS_CHANGE,

        /**
         * A message of a process.
         */
        PROCESS_MESSAGE,

        /**
         * A status change of a process.
         */
        PROCESS_STATUS_CHANGE,

        /**
         * A status change of an entity of the system.
         */
        SYSTEM_ENTITY_STATUS_CHANGE,
        
        /**
         * A status change of an entity of a host.
         */
        HOST_ENTITY_STATUS_CHANGE,

        /**
         * A status change of an entity of an application.
         */
        APPLICATION_ENTITY_STATUS_CHANGE,

        /**
         * A status change of an entity of a process.
         */
        PROCESS_ENTITY_STATUS_CHANGE,

        /**
         * A configuration change.
         */
        CONFIGURATION_CHANGE,

        /**
         * A user event of a process.
         */
        USER_EVENT,
        
        /**
         * A property change.
         */
        PROPERTY_CHANGE
    };


    /////////////
    // snapshot
    /////////////
   
	/*
	*	Property Snapshot 	
	*/
     struct PropertySnapshot 
	{
		string 	property_name;
		any  property_value;
		string	property_type;
		string 	property_mode;
	};	
    typedef sequence<PropertySnapshot> PropertiesSnapshot; 
	
 
    /*
     * Snapshots are used for reporting the configuration and the state
     * of the whole system or of a part of the system.
     */

    /**
     * The snapshot of an entity.
     */
    struct EntitySnapshot
    {
        ElementName entity_name;
        EntityStatus entity_status;
        string entity_info;
	PropertiesSnapshot entity_properties;
    };
    
    typedef sequence<EntitySnapshot> EntitiesSnapshot;
    
    
    /**
     * The snapshot of a host.
     */
    struct HostSnapshot
    {
        ElementName host_name;
        HostStatus host_status;
	string host_status_info;
        
        EntitiesSnapshot host_entities;
	CompleteMonitoringInfo monitoring_parameters;
        /**
        * global supervision indicator
        */

        boolean global_supervision_indicator;
	PropertiesSnapshot host_properties;
    };

    typedef sequence<HostSnapshot> HostsSnapshot;

    /**
     * The snapshot of a process.
     */
    struct ProcessSnapshot
    {
        ElementName process_name;
        ElementName host_name;
	ProcessMode process_mode;
        ProcessStatus process_status;
        /*
	* indicator denoting whether the process must be memory resident
	*/
        boolean memory_resident;

        string process_status_info;
	long core_dump_size;
        EntitiesSnapshot process_entities;
	PropertiesSnapshot process_properties;
    };

    typedef sequence<ProcessSnapshot> ProcessesSnapshot;

    /**
     * The snapshot of an application.
     */
    struct ApplicationSnapshot
    {
        ElementName application_name;

        ApplicationStatus application_status;
        string status_info;

        FunctioningMode application_mode;
        string mode_info;

        ProcessesSnapshot application_processes;
        EntitiesSnapshot application_entities;
	PropertiesSnapshot application_properties;
    };

    typedef sequence<ApplicationSnapshot> ApplicationsSnapshot;

    /**
     * The snapshot of the system.
     */
    struct SystemSnapshot
    {
        ElementName system_name;

        /** 
        * host on which the master supervision service is running
        * added on 22-7-2005
        * 
        */

        string master_host;

        
        SystemStatus system_status;
        string status_info;

        FunctioningMode system_mode;
        string mode_info;

        HostsSnapshot system_hosts;
        ApplicationsSnapshot system_applications;
        EntitiesSnapshot system_entities;
	PropertiesSnapshot system_properties;
    };

  

}; // End Module CdmwPlatformMngt

#endif // CDMW_PLATFORM_MNGT_COMMON_IDL_


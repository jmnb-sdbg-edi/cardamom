/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI. It is derivative work based on PERCO Copyright (C) THALES
 * 2000-2003. All rights reserved.
 * 
 * Copyright (C) THALES 2004-2005. All rights reserved
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Library General Public License as published
 * by the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General Public
 * License along with CARDAMOM; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */


#ifndef CDMW_FTSYST_MNGT_HOST_IDL_
#define CDMW_FTSYST_MNGT_HOST_IDL_


#include <CdmwPlatformMngtCommon.idl>
#include <CdmwPlatformMngtCommonBase.idl>
#include <CdmwPlatformMngtElementBase.idl>
#include <CdmwFTSystMngtManagedElement.idl>
#include <CdmwFTSystMngtEntityContainer.idl>

#pragma prefix "thalesgroup.com"

module CdmwFTSystMngt
{

    /**
     * The CDMW Host accessor
     */
    interface HostAccessor : ManagedElementAccessor,
        RWEntityContainerAccessor
    {

        /**
        * Get the status of the host.
        *
        * @param target_element_path path of target element to access
        *
        * @exception ManagedElementNotFound if element not found
        *
        */
        CdmwPlatformMngt::HostStatus get_status(in CdmwPlatformMngt::ElementPath target_element_path)
            raises(CdmwPlatformMngt::ManagedElementNotFound);

        /**
        * Get the host status info . of the host.
        *
        * @param target_element_path path of target element to access
        *
        * @exception ManagedElementNotFound if element not found
        */

        string get_host_status_info(in CdmwPlatformMngt::ElementPath target_element_path)  raises(CdmwPlatformMngt::ManagedElementNotFound);

        /**
        * Get the host monitoring parameters
        *
        * @param target_element_path path of target element to access
        *
        * @exception ManagedElementNotFound if element not found
        */

         CdmwPlatformMngt::CompleteMonitoringInfo get_monitoring_parameters(in CdmwPlatformMngt::ElementPath target_element_path)  raises(CdmwPlatformMngt::ManagedElementNotFound);

        /**
        * Set the host monitoring parameters
        *
        * @param target_element_path path of target element to access
        *
        * @exception ManagedElementNotFound if element not found
        */

        void set_monitoring_parameters(in  CdmwPlatformMngt::CompleteMonitoringInfo
	monitoring_parameters, in CdmwPlatformMngt::ElementPath target_element_path )  raises(CdmwPlatformMngt::ManagedElementNotFound);

        /**
        * Get the full path to the platform application executable.
        *
        * @param target_element_path path of target element to access
        *
        * @exception ManagedElementNotFound if element not found
        *
        */

       /**     
        * Returns the global_supervision_indicator
        *
        * @param in CdmwPlatformMngt::ElementPath
        * @return : boolean
        */
        boolean get_global_supervision_indicator(in CdmwPlatformMngt::ElementPath target_element_path)  raises(CdmwPlatformMngt::ManagedElementNotFound);

        /**     
        * Return a host name
        *
        * @param  in string  host_name
        * @return : ElementName
        */
         
        CdmwPlatformMngt::ElementName get_host_name(in CdmwPlatformMngt::ElementPath target_element_path)raises(CdmwPlatformMngt::ManagedElementNotFound);

       /**     
        * to set the global_supervision_indicator
        *
        * @param: boolean , in CdmwPlatformMngt::ElementPath
        * @return : 
        */
        void set_global_supervision_indicator(in boolean global_supervision_indicator, in CdmwPlatformMngt::ElementPath target_element_path )  raises(CdmwPlatformMngt::ManagedElementNotFound);


        string get_platform_application_exe(in CdmwPlatformMngt::ElementPath target_element_path)
            raises(CdmwPlatformMngt::ManagedElementNotFound);

        
        /**
        * Returns the processes belonging to the host.
        * The first how_many processes will be returned at most and the
        * rest of the processes may be retrieved thanks to the iterator.
        *
        * @param target_element_path path of target element to access
        * @param how_many the number of processes to return
        * @param processes_iterator the iterator to the rest of process paths.
        *
        * @return At most the number of process paths requested
        *
        * @exception ManagedElementNotFound if element not found
        */
        CdmwPlatformMngt::ElementPaths get_processes(
            in CdmwPlatformMngt::ElementPath target_element_path,
            in unsigned long how_many,
            out CdmwPlatformMngt::ElementPathsIterator processes_iterator)
            raises(CdmwPlatformMngt::ManagedElementNotFound);
        
            
        /**
        * Shutdowns the host.
        *
        * @param target_element_path path of target element to access
        *
        * @exception ManagedElementNotFound if element not found
        *
        */
        void shutdown (in CdmwPlatformMngt::ElementPath target_element_path)
            raises(CdmwPlatformMngt::ManagedElementNotFound);


        /**
        * Cold Reboots the host.
        *
        * @param target_element_path path of target element to access
        *
        * @exception ManagedElementNotFound if element not found
        *
        */
        void cold_reboot (in CdmwPlatformMngt::ElementPath target_element_path)
            raises(CdmwPlatformMngt::ManagedElementNotFound);
        
        /**
        * Hot Reboots the host.
        *
        * @param target_element_path path of target element to access
        *
        * @exception ManagedElementNotFound if element not found
        *
        */
        void hot_reboot (in CdmwPlatformMngt::ElementPath target_element_path)
            raises(CdmwPlatformMngt::ManagedElementNotFound);

    };


    

    /**
    * The container of known hosts.
    */
    interface HostContainerAccessor
    {

        unsigned long get_number_of_hosts(
            in CdmwPlatformMngt::ElementPath target_element_path)
            raises(CdmwPlatformMngt::ManagedElementNotFound);

        void get_all_host_names(
            in CdmwPlatformMngt::ElementPath target_element_path,
            in unsigned long how_many,
            out CdmwPlatformMngt::ElementNames host_names,
            out CdmwPlatformMngt::ElementNamesIterator rest)
            raises(CdmwPlatformMngt::ManagedElementNotFound);

        CdmwPlatformMngt::ElementPath get_host(
            in CdmwPlatformMngt::ElementPath target_element_path,
            in CdmwPlatformMngt::ElementName host_name)
            raises(CdmwPlatformMngt::ManagedElementNotFound,
                   CdmwPlatformMngt::HostNotFound);
                   
        boolean get_hosts(
            in CdmwPlatformMngt::ElementPath target_element_path,
            in CdmwPlatformMngt::ElementNames host_names,
            out CdmwPlatformMngt::ElementPaths hosts)
            raises(CdmwPlatformMngt::ManagedElementNotFound);

        void get_all_hosts(
            in CdmwPlatformMngt::ElementPath target_element_path,
            in unsigned long how_many,
            out CdmwPlatformMngt::ElementPaths hosts,
            out CdmwPlatformMngt::ElementPathsIterator rest)
            raises(CdmwPlatformMngt::ManagedElementNotFound);

    }; // End interface HostContainerAccessor


}; // End Module CdmwFTSystMngt


#endif // CDMW_FTSYST_MNGT_HOST_IDL_


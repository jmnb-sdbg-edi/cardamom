/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI. It is derivative work based on PERCO Copyright (C) THALES
 * 2000-2003. All rights reserved.
 * 
 * Copyright (C) THALES 2004-2005. All rights reserved
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Library General Public License as published
 * by the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General Public
 * License along with CARDAMOM; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */


#ifndef CDMW_PLATFORM_MNGT_PROCESS_CALLBACK_IDL_
#define CDMW_PLATFORM_MNGT_PROCESS_CALLBACK_IDL_


#include <CdmwPlatformMngtBase.idl>
#include <CdmwPlatformMngtCommonBase.idl>
#include <CdmwPlatformMngtManagedElement.idl>
#include <CdmwPlatformMngtService.idl>

#pragma prefix "thalesgroup.com"


module CdmwPlatformMngt
{

    interface ProcessDelegate;
    interface ProcessMessageBroker;


    /**
    * The callback used by a managed process to notify its creation
    * or a fatal error during its creation to the application agent.
    */
    interface ProcessCallback
    {
        /**
        * Information needed by the managed process 
        * to start.
        */
        struct ProcessStartingData
        {
            /**
            * The name of the application owning the process.
            */
            string application_name;

            /**
            * The process name.
            */
            string process_name;

            /**
            * The broker used by the managed process to notify its
            * applicative messages and fatal errors.
            */
            ProcessMessageBroker process_message_broker;
            
            /**
            * The configuration data needed by the managed process..
            */
            ProcessConfigurationData process_configuration_data;
        };
        
        /**
        * Notifies creation to the application agent.
        * !!!! For Backward compatibility !!!!
        *
        * @param the_process the managed process notifying its creation.
        * @return the acknowlegement from the application agent containing
        * information needed by the process.
        */
        ProcessStartingData set_ready (in ProcessDelegate the_process);

        /**
        * Notifies process creation is started to the application agent.
        *
        * @param the_process the managed process notifying its creation.
        * @return the starting data from the application agent containing
        * information needed by the process.
        */
        ProcessStartingData get_starting_info (in ProcessDelegate the_process);
        
        
        /**
        * Notifies process creation is done to the application agent.
        *
        */
        void set_creation_done ();
        
        
        /**
        * Notifies a fatal error during the creation.
        *
        * @param issuer the issuer of the error.
        * @param error_info the information about the error
        */
        void notify_error (in CdmwPlatformMngtBase::EventIssuer issuer,
            in string error_info);

    }; // End interface ProcessCallback


    /**
    * The interface used by a managed process to notify applicative
    * messages and fatal errors once it has been created.
    */
    interface ProcessMessageBroker
    {

        /**
        * Notifies a message.
        *
        * @param header the header of the message.
        * @param issuer the issuer of the message.
        * @param message the message to notify.
        */
        void notify_message(in CdmwPlatformMngtBase::EventHeader header,
            in CdmwPlatformMngtBase::EventIssuer issuer,
            in string message);

        /**
        * Notifies a fatal error.
        *
        * @param time_stamp the time stamp of the error.
        * @param issuer the issuer of the error.
        * @param error_info the information about the error.
        */
        void notify_error(in CdmwPlatformMngtBase::TimeStamp time_stamp,
            in CdmwPlatformMngtBase::EventIssuer issuer,
            in string error_info);
            
        /**
        * Notifies a process fatal error.
        *
        * @param failed process_name the faulty process name.
        * @param time_stamp the time stamp of the error.
        * @param issuer the issuer of the error.
        * @param error_info the information about the error.
        *
        * @exception ProcessNotFound if process name has not been found
        */
        void notify_process_error(in ElementName failed_process_name,
            in CdmwPlatformMngtBase::TimeStamp time_stamp,
            in CdmwPlatformMngtBase::EventIssuer issuer,
            in string error_info)
            raises(ProcessNotFound);

        /**
        * Notifies a user event.
        *
        * @param issuer the issuer of the event.
        * @param data the data of the event.
        */
        void notify_user_event(in CdmwPlatformMngtBase::EventIssuer issuer,
            in any data);
            
        /**
        * Returns the actual specified service.
        *
        * @param service_name the name identifying the service.
        * @exception CdmwPlatformMngtService::ServiceNotFound if service_name doesn't denote
        * an existing service.
        * @exception CdmwPlatformMngtService::ServiceUnavailable if the service is unavailable.
        */
        Object get_service(in CdmwPlatformMngtService::ServiceName service_name)
            raises(CdmwPlatformMngtService::ServiceNotFound, 
                   CdmwPlatformMngtService::ServiceUnavailable);
                   
                   
        /**
        * Returns the element object reference defined by its absolute path
        * @exception ElementPathInvalid if element path is invalid
        * @exception ManagedElementNotFound if element not found
        */
        ManagedElement get_managed_element (in ElementPath element_path)
            raises (ElementPathInvalid,
                    ManagedElementNotFound);

        /**
        * Get the status of an entity of the system.
        *
        * @param entity_name the name identifying the entity
        * @param entity_info the additional status information
        * @return the status of the entity
        * @exception EntityNotFound if entity has not been found
        */
        EntityStatus get_system_entity_status(in ElementName entity_name,
                                              out string entity_info)
            raises(EntityNotFound);
                    
        /**
        * Get the status of a host entity.
        *
        * @param host_name the name of the host.
        * @param entity_name the name identifying the entity
        * @param entity_info the additional status information
        * @return the status of the entity
        * @exception HostNotFound if host has not been found
        * @exception EntityNotFound if entity has not been found
        */
        EntityStatus get_host_entity_status(in ElementName host_name,
                                            in ElementName entity_name,
                                            out string entity_info)
            raises(HostNotFound,
                   EntityNotFound);
                    
        /**
        * Get the status of an entity of the application.
        *
        * @param application_name the name of the application.
        * @param entity_name the name identifying the entity
        * @param entity_info the additional status information
        * @return the status of the entity
        * @exception ApplicationNotFound if application has not been found
        * @exception EntityNotFound if entity has not been found
        */
        EntityStatus get_application_entity_status(in ElementName application_name,
                                                   in ElementName entity_name,
                                                   out string entity_info)
            raises(ApplicationNotFound,
                   EntityNotFound);
                    
        /**
        * Get the status of a process entity.
        *
        * @param application_name the name of the application.
        * @param process_name the name of the process.
        * @param host_name the name of the host.
        * @param entity_name the name identifying the entity
        * @param entity_info the additional status information
        * @return the status of the entity
        * @exception ProcessNotFound if process has not been found
        * @exception EntityNotFound if entity has not been found
        */
        EntityStatus get_process_entity_status(in ElementName application_name,
                                               in ElementName process_name,
                                               in ElementName host_name,
                                               in ElementName entity_name,
                                               out string entity_info)
            raises(ProcessNotFound,
                   EntityNotFound);
        
        
        /**
        * Changes the status of an entity of the system.
        *
        * @param entity_name the name identifying the entity
        * @param entity_status the new status of the entity
        * @param entity_info the additional information about the status change
        * @exception EntityNotFound if entity has not been found
        */
        void set_system_entity_status(in ElementName entity_name,
                                      in EntityStatus entity_status, 
                                      in string entity_info)
            raises(EntityNotFound);
            
                        
        /**
        * Changes the status of a host entity.
        *
        * @param host_name the name of the host.
        * @param entity_name the name identifying the entity
        * @param entity_status the new status of the entity
        * @param entity_info the additional information about the status change
        * @exception HostNotFound if host has not been found
        * @exception EntityNotFound if entity has not been found
        */
        void set_host_entity_status(in ElementName host_name,
                                    in ElementName entity_name,
                                    in EntityStatus entity_status, 
                                    in string entity_info)
            raises(HostNotFound,
                   EntityNotFound);
                   
        /**
        * Changes the status of an entity of the application.
        *
        * @param application_name the name of the application.
        * @param entity_name the name identifying the entity
        * @param entity_status the new status of the entity
        * @param entity_info the additional information about the status change
        * @exception ApplicationNotFound if application has not been found
        * @exception EntityNotFound if entity has not been found
        */
        void set_application_entity_status(in ElementName application_name,
                                           in ElementName entity_name,
                                           in EntityStatus entity_status, 
                                           in string entity_info)
            raises(ApplicationNotFound,
                   EntityNotFound);
                   
                       
        /**
        * Changes the status of a process entity.
        *
        * @param application_name the name of the application.
        * @param process_name the name of the process.
        * @param host_name the name of the host.
        * @param entity_name the name identifying the entity
        * @param entity_status the new status of the entity
        * @param entity_info the additional information about the status change
        * @exception ProcessNotFound if process has not been found
        * @exception EntityNotFound if entity has not been found
        */
        void set_process_entity_status(in ElementName application_name,
                                       in ElementName process_name,
                                       in ElementName host_name,
                                       in ElementName entity_name,
                                       in EntityStatus entity_status, 
                                       in string entity_info)
            raises(ProcessNotFound,
                   EntityNotFound);

    }; // End interface ProcessMessageBroker

    
}; // End Module CdmwPlatformMngt

#endif // CDMW_PLATFORM_MNGT_PROCESS_CALLBACK_IDL


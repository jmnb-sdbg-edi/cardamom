/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI. It is derivative work based on PERCO Copyright (C) THALES
 * 2000-2003. All rights reserved.
 * 
 * Copyright (C) THALES 2004-2005. All rights reserved
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Library General Public License as published
 * by the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General Public
 * License along with CARDAMOM; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */


#ifndef CDMW_PLATFORM_MNGT_OBSERVABLE_IDL_
#define CDMW_PLATFORM_MNGT_OBSERVABLE_IDL_


#include <CdmwPlatformMngtCommon.idl>

#pragma prefix "thalesgroup.com"


module CdmwPlatformMngt
{

    interface SupervisionObserver;


    /**
     * The element of a supervised system that is observable.
     */
    interface Observable
    {

        /**
        * Registers a SupervisionObserver.
        *
        * @param observer_name the name used to identify the observer
        * @param observer the observer to be registered
        *
        * @return the observer that was previously registered with
        * observer_name if any.
        */
        SupervisionObserver register_observer(
            in string observer_name,
            in SupervisionObserver observer);
            
        /**
        * Registers a Proxy SupervisionObserver.
        * If the host is declared failed, the observer is automatically
        * unregistered
        *
        * @param observer_name the name used to identify the observer
        * @param host_name the name of the host
        * @param observer the observer to be registered
        *
        * @return the observer that was previously registered with
        * observer_name if any.
        */
        SupervisionObserver register_proxy_observer(
            in string observer_name,
            in ElementName host_name,
            in SupervisionObserver observer);

        /**
        * Unregisters a SupervisionObserver.
        *
        * @param observer_name the name identifying the observer to unregister
        *
        * @return the observer.
        *
        * @exception ObserverNotFound if observer_name doesn't denote
        * a previously registered observer.
        */
        SupervisionObserver unregister_observer(in string observer_name)
            raises(ObserverNotFound);

    };


}; // End Module CdmwPlatformMngt

#endif // CDMW_PLATFORM_MNGT_OBSERVABLE_IDL_


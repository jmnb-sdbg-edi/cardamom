/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI. All rights reserved.
 * 
 * Copyright (C) SELEX-SI 2004-2005. All rights reserved
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Library General Public License as published
 * by the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General Public
 * License along with CARDAMOM; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */

#ifndef _CDMW_TIME_CLOCK_STATE_IDL_
#define _CDMW_TIME_CLOCK_STATE_IDL_

#include <CosClockService.idl>

module Cdmw { module clock {

	//! Identity of Controller
    typedef long  Ident;
    
    //! Type of command to execute
    typedef octet CommandCode;

    //! Status of a Clock
    typedef short Status;

    /**
     * Data required to have an internal status of a Timer.
     */
    struct TimerInfo
    {
        TimeBase::TimeT  period;
        TimeBase::TimeT  interval;
        TimeBase::TimeT  next_expiration_time;
        long             execution_limit;
        any              data;
        Status      	 timer_status; 
    };
    
    // Angelo 3 feb 2005> This could be changed from a struct to an
    // union so that we always send the minimum amount of data needed
    // on the wire.
    struct ControlledClockData
    {
        Ident            id;
        CommandCode      cmd;
        Status           clock_status;
        TimeBase::TimeT  x0;
        TimeBase::TimeT  y0;
        float            rate;
        TimeBase::TimeT  frozen_time;
    };
    
    struct ControllerData
    {
        Ident                                         id;
        TimerInfo                                     timer_info; 
        CosClockService::PeriodicExecution::Periodic  target; 
    };

    /**
     * Identifiers of event that can be observed by a
     *  <code>ControllerObserver<\code>.
     */
    typedef unsigned  long  ControlledClockEvent;
    const   ControlledClockEvent    NONE           = 0x00000000;
    const   ControlledClockEvent    SET_TIME       = 0x00000001;
    const   ControlledClockEvent    SET_RATE       = 0x00000002;
    const   ControlledClockEvent    PAUSE          = 0x00000004;
    const   ControlledClockEvent    RESUME         = 0x00000008;
    const   ControlledClockEvent    TERMINATE      = 0x00000010;
    const   ControlledClockEvent    ALIGN_REQUEST  = 0x00000020;
    const   ControlledClockEvent    ALIGN_RESPONSE = 0x00000040;
    const   ControlledClockEvent    ALL            = 0xFFFFFFFF;
            
}; /* Cdmw */ }; /* clock */

#endif /* _CDMW_TIME_CLOCK_STATE_IDL_ */

/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES 
 * and SELEX-SI. 
 * 
 * It is derivative work based on PERCO Copyright (C) THALES 2000-2003. 
 * All rights reserved.
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it under 
 * the terms of the GNU Library General Public License as published by the
 * Free Software Foundation; either version 2 of the License, or (at your 
 * option) any later version. 
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public 
 * License for more details. 
 * 
 * You should have received a copy of the GNU Library General 
 * Public License along with CARDAMOM; see the file COPYING. If not, write to 
 * the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */



#ifndef OBEventChannelFactory_idl
#define OBEventChannelFactory_idl

#include <CosEventChannelAdmin.idl>
#include <OBEventReceiver.idl>

#pragma prefix "ooc.com"

/**
  *
  * This module contains the interface for an event channel factory
  * object as well as the common data types used by all
  * event channel factories.
  *
  **/
module OBEventChannelFactory
{

/**
  * 
  * Alias for a channel identifier.  The identified event channel is a
  * persistent object reference.
  *
  **/
typedef string ChannelId;

/**
  *
  * Alias for a sequence of channel identifiers.
  *
  **/
typedef sequence<ChannelId> ChannelIdSeq;

/**
  *
  * An event channel already exists.
  *
  **/
exception ChannelAlreadyExists
{
};

/**
  *
  * The requested event channel does not exist.
  *
  **/
exception ChannelNotAvailable
{
};

/**
  *
  * The interface for an event channel factory object, which provides
  * operations for the creation and retrieval of event channels.
  *
  **/
interface EventChannelFactory
{ 
    /**
      *
      * Creates and returns an event channel, which is a persistent
      * object reference.
      *
      * @param id The channel identifier identifying the new event channel.
      *
      * @return The event channel.
      *
      * @exception ChannelAlreadyExists An event channel identified by
      * <code>id</code> already exists.
      *
      **/
    CosEventChannelAdmin::EventChannel create_channel(in ChannelId id)
    raises(ChannelAlreadyExists);

    /**
      *
      * Creates and returns an event channel, which is a persistent
      * object reference.
      *
      * @param id The channel identifier identifying the new event channel.
      *
      * @param receiver The event receiver associated with the new event
      * channel.
      *
      * @return The event channel.
      *
      * @exception ChannelAlreadyExists An event channel identified by
      * <code>id</code> already exists.
      *
      **/
    CosEventChannelAdmin::EventChannel create_channel_with_receiver(
        in ChannelId id,
        in OB::EventReceiver receiver)
    raises(ChannelAlreadyExists);

    /**
      *
      * Retrieves an event channel object, which is a persistent
      * object reference.
      *
      * @param id The channel identifier of the event channel to retrieve.
      *
      * @return The event channel.
      *
      * @exception ChannelNotAvailable The requested event channel
      * identified by the <code>id</code> doesn't exist.
      *
      **/
    CosEventChannelAdmin::EventChannel get_channel_by_id(in ChannelId id)
        raises(ChannelNotAvailable);

    /**
      *
      * Returns a sequence of channel identifiers identifying available
      * event channels.
      *
      * @return The sequence of channel identifiers.
      *
      **/
    ChannelIdSeq get_channels();

    /**
      *
      * Shutdown the event service.
      *
      **/
    void shutdown();
};

};

#endif



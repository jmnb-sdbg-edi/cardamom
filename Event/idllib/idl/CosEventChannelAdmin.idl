/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES 
 * and SELEX-SI. 
 * 
 * It is derivative work based on PERCO Copyright (C) THALES 2000-2003. 
 * All rights reserved.
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it under 
 * the terms of the GNU Library General Public License as published by the
 * Free Software Foundation; either version 2 of the License, or (at your 
 * option) any later version. 
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public 
 * License for more details. 
 * 
 * You should have received a copy of the GNU Library General 
 * Public License along with CARDAMOM; see the file COPYING. If not, write to 
 * the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */

 
#ifndef CosEventChannelAdmin_idl
#define CosEventChannelAdmin_idl

#include <CosEventComm.idl>

#pragma prefix "omg.org"

module CosEventChannelAdmin
{

exception AlreadyConnected {};

exception TypeError {};

interface ProxyPushConsumer : CosEventComm::PushConsumer
{
    void connect_push_supplier(in CosEventComm::PushSupplier push_supplier)
    raises(AlreadyConnected);
};

interface ProxyPullSupplier : CosEventComm::PullSupplier
{
    void connect_pull_consumer(in CosEventComm::PullConsumer pull_consumer)
    raises(AlreadyConnected);
};

interface ProxyPullConsumer : CosEventComm::PullConsumer
{
    void connect_pull_supplier(in CosEventComm::PullSupplier pull_supplier)
    raises(AlreadyConnected, TypeError);
};

interface ProxyPushSupplier : CosEventComm::PushSupplier
{
    void connect_push_consumer(in CosEventComm::PushConsumer push_consumer)
    raises(AlreadyConnected, TypeError);
};

interface ConsumerAdmin
{
    ProxyPushSupplier obtain_push_supplier();
    ProxyPullSupplier obtain_pull_supplier();
};

interface SupplierAdmin
{
    ProxyPushConsumer obtain_push_consumer();
    ProxyPullConsumer obtain_pull_consumer();
};

interface EventChannel
{
    ConsumerAdmin for_consumers();
    SupplierAdmin for_suppliers();
    void destroy();
};

};

#endif



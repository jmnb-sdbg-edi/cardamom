/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES 
 * and SELEX-SI. 
 * 
 * It is derivative work based on PERCO Copyright (C) THALES 2000-2003. 
 * All rights reserved.
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it under 
 * the terms of the GNU Library General Public License as published by the
 * Free Software Foundation; either version 2 of the License, or (at your 
 * option) any later version. 
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public 
 * License for more details. 
 * 
 * You should have received a copy of the GNU Library General 
 * Public License along with CARDAMOM; see the file COPYING. If not, write to 
 * the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */


#ifndef CDMW_EVENT_IDL_
#define CDMW_EVENT_IDL_


// ORB include files

#ifdef __OpenCCM__

#ifndef __CORBA_Imported__
#define __CORBA_Imported__
import CORBA;
#endif

#elif defined(ORBACUS)
#include <OB/orb.idl>
#else
#ifndef _ORBRIVER_ADA_
#include <orb.idl>
#endif
#endif

#include <CosEventChannelAdmin.idl>
#include <CosTypedEventChannelAdmin.idl>

// Cdmw include files
#include <CdmwLifeCycle.idl>

#pragma prefix "thalesgroup.com"

/**
* This module describes interfaces and data types of the Cdmw
* Event service.
*/
module CdmwEvent {    
    /**
    * Exception to be raised whenever an error occured during the creation of 
    * an event channel.
    */
    exception CreationError {
        /**
        * The reason of the exception (may give more information).
        */
        string reason;
    };
     
    /**
    * The EventChannelFactory supports operation to create generic event channel.
    */
    interface EventChannelFactory : CdmwLifeCycle::FactoryBase {
        /**
        * This operation create a new generic event channel.
        *
        * @param name The event channel name as declared in the Cdmw 
        * Naming&Repository.
        *
        * @return A reference on a new generic event channel.
        *
        * @exception CdmwLifeCycle::AlreadyExistant If a channel with the same 
        * name already exists.
        * @exception CdmwLifeCycle::InvalidName If channel name has a bad format
        * @exception CreationError If an error occurred during channel creation
        */ 
        CosEventChannelAdmin::EventChannel create_event_channel(in CdmwLifeCycle::Key name)
           raises (CdmwLifeCycle::AlreadyExistant, CdmwLifeCycle::InvalidName, CreationError);
    };

    /**
    * The TypedEventChannelFactory supports operation to create typed event channel.
    */
    interface TypedEventChannelFactory : CdmwLifeCycle::FactoryBase {
        /**
        * This operation create a new typed event channel.
        *
        * @param name The event channel name as declared in the Cdmw 
        * Naming&Repository.
        * @param supported_interface The interface repository ID supported by the
        * new event channel.
        *
        * @return A reference on a new typed event channel.
        *
        * @exception CdmwLifeCycle::AlreadyExistant If a channel with the same 
        * name already exists.
        * @exception CdmwLifeCycle::InvalidName If channel name has a bad format
        * @exception CreationError If an error occurred during channel creation
        */ 
        CosTypedEventChannelAdmin::TypedEventChannel 
        create_event_channel(in CdmwLifeCycle::Key name)
           raises (CdmwLifeCycle::AlreadyExistant, CdmwLifeCycle::InvalidName, CreationError);
    };

}; 

#endif // CDMW_EVENT_IDL_



/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI. It is derivative work based on PERCO Copyright (C) THALES
 * 2000-2003. All rights reserved.
 * 
 * Copyright (C) THALES 2004-2005. All rights reserved
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Library General Public License as published
 * by the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General Public
 * License along with CARDAMOM; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */

#ifndef CDMW_NAMING_AND_REPOSITORY_STORAGE_DATA_IDL_
#define CDMW_NAMING_AND_REPOSITORY_STORAGE_DATA_IDL_


#ifdef ORBACUS
#include <OB/CosNaming.idl>
#elif defined(TAO)
#include <orbsvcs/CosNaming.idl>
#else
#include <CosNaming.idl>
#endif

#include <orbsvcs/TimeBase.idl>
#include <CdmwLifeCycle.idl>
#include <CdmwLifeCycle.idl>
#include <CdmwNamingAndRepository.idl>

#pragma prefix "thalesgroup.com"

module CdmwNamingAndRepository {

    struct DomainInfo {
	string   the_name;
    };

    struct RegistrationInfo {
	string                 the_name;
	string                 the_registration_id;
	TimeBase::TimeT        the_expiration_time; 
   };

    struct DomainRegistrationInfo {
	string   the_name;
       	string   the_registration_id;
	string   the_domain;         /* CdmwNamingAndRepository::NameDomain */
	string   the_factory_finder; /* CdmwLifeCycle::FactoryFinder  */
	/* FIXME string   the_context; */ /* CosNaming::NamingContextExt */ 
	boolean  is_user_supplied;   
    };

    struct ObjectRegistrationInfo {
	string   the_name;
	string   the_registration_id;
    };

    struct FactoryRegistrationInfo {
	string   the_name;
	string   the_registration_id;
    };


    struct ContextInfo {
	string   the_name;
    };

    struct ObjectBindingInfo {
	string   the_name;
	string   the_object; /* Object */ 
    };

//     struct ContextBindingInfo {
// 	string   the_name;
// 	string   the_id;             /* CosNaming::NamingContextExt */
//     };

    struct ContextBindingInfo {
	string   the_name;
	string   the_object; /* CosNaming::NamingContextExt */
    };


    enum BindingType {NAR_DOMAIN,
		      NAR_REGISTRATION,         /* activated=false */
		      NAR_DOMAIN_REGISTRATION,  /* activated=true  */
		      NAR_FACTORY_REGISTRATION, /* activated=true  */
		      NAR_OBJECT_REGISTRATION,  /* activated=true  */

		      NAR_CONTEXT, 
		      NAR_OBJECT_BINDING, 
		      NAR_CONTEXT_BINDING};

    union StorageData switch (BindingType) {
    case NAR_DOMAIN:
	DomainInfo       domain_info;
    case NAR_REGISTRATION:  
	RegistrationInfo registration_info;
    case NAR_DOMAIN_REGISTRATION:
	DomainRegistrationInfo domain_registration_info;
    case NAR_FACTORY_REGISTRATION:
 	FactoryRegistrationInfo factory_registration_info;
    case NAR_OBJECT_REGISTRATION:
	ObjectRegistrationInfo object_registration_info;
	
    case NAR_CONTEXT:
	ContextInfo        context_info;
    case NAR_OBJECT_BINDING:  
	ObjectBindingInfo  object_binding_info;
    case NAR_CONTEXT_BINDING:
	ContextBindingInfo context_binding_info;
    };        
};

#endif

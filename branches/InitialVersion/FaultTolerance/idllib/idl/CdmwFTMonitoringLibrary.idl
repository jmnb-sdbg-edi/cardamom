/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI. It is derivative work based on PERCO Copyright (C) THALES
 * 2000-2003. All rights reserved.
 * 
 * Copyright (C) THALES 2004-2005. All rights reserved
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Library General Public License as published
 * by the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General Public
 * License along with CARDAMOM; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */

#ifndef _CdmwFTMonitoringLibrary_IDL
#define _CdmwFTMonitoringLibrary_IDL

#include "CdmwFTMutualMonitoring.idl"
#include "CdmwFTSimpleMonitoring.idl"

#pragma prefix "thalesgroup.com"

/**
 * This module describes interfaces and data types of the Monitoring Library.
 */
module CdmwFT {
module MonitoringLibrary {
    /**
     * Interface to be supported by factory of monitoring objects.
     */ 
    local interface MonitoringLibraryInterface
    {
        /**
         * Factory of mutual monitoring objects.
         *
         * @param the_locations A sequence of all the locations that will
         * monitor each other.
         *
         * @return PrimaryBackup::MutualMonitoring object.
         * A call to start_monitoring on the object is needed to start
         * the monitoring.
         */ 
        PrimaryBackup::MutualMonitoring
        create_mutual_monitoring(in Locations the_locations);

        /**
         * Factory of simple monitoring objects with interrogating role.
         *
         * @param the_locations A sequence of all the locations with
         * interrogating role.
         *
         * @return SimpleMonitoring::InterrogatingSimpleMonitoring object.
         * A call to start_monitoring on the object is needed to start
         * the monitoring.
         */ 
        SimpleMonitoring::InterrogatingSimpleMonitoring
        create_interrogating_simple_monitoring(in Locations the_locations);

        /**
         * Factory of simple monitoring objects with acknowledging role.
         *
         * @return SimpleMonitoring::AcknowledgingSimpleMonitoring object.
         * A call to start_monitoring on the object is needed to start
         * the acknowledging.
         */ 
        SimpleMonitoring::AcknowledgingSimpleMonitoring
        create_acknowledging_simple_monitoring();
      };
};
};
#endif 

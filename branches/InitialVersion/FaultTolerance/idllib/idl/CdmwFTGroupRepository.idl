/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI. It is derivative work based on PERCO Copyright (C) THALES
 * 2000-2003. All rights reserved.
 * 
 * Copyright (C) THALES 2004-2005. All rights reserved
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Library General Public License as published
 * by the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General Public
 * License along with CARDAMOM; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */


#ifndef __CDMW_FT_GROUP_REPOSITORY_IDL__
#define __CDMW_FT_GROUP_REPOSITORY_IDL__

#include <CdmwFTReplicationManager.idl>

#pragma prefix "thalesgroup.com"

/**
* This module describes interfaces and data types of the CDMW Fault Tolerance
* service.
*/
module CdmwFT {
/**
* This module describes local interfaces and data types available for
* a CDMW location (process).
*/
module Location {
        
    /** 
    * The GroupRepository is a local object providing access to group related
    * information needed locally by the ActivationManager or any other object
    * that needs object group information for a local member.
    * <p>NOTA: Applications can retrieve its object reference by calling
    *  ORB::resolve_initial_references("FTGroupRepository").
    */
    local interface GroupRepository
    {
        /**
        * This operation returns the object group reference using the reference
        * of its local member.
        *
        * @param member Object reference of a local object group member.
        *
        * @return The object group reference the local member belongs to.
        *
        * @exception FT::MemberNotFound Raised when <i>member</i> is not known
        * as a local member of an object group.
        */
        FT::ObjectGroup get_object_group(in Object member)
            raises (FT::MemberNotFound);
        /**
        * This operation returns object references and locations of other group
        * members of the object group <i>member</i> belongs to.
        *
        * @param member Object reference of a local object group member.
        *
        * @return a sequence of (reference,location) of the other group members.
        *
        * @exception FT::MemberNotFound Raised when <i>member</i> is not known
        * as a local member of an object group.
        */
        MemberInfos get_other_group_members(in Object member)
            raises (FT::MemberNotFound);    
        /**
        * This operation returns the object reference and version of the object group
        * <i>member</i> belongs to.
        *
        * @param member Object reference of a local object group member.
        *
        * @return Object Group reference and version of the object group
        * <i>member</i> belongs to.
        *
        * @exception FT::MemberNotFound Raised when <i>member</i> is not known
        * as a local member of an object group.
        */
        FT::ObjectGroupRefVersion get_object_group_version(in Object member)
            raises (FT::MemberNotFound);

        /**
        * This operation returns the object group reference using the object group
        * id. This object group shall have a local member.
        *
        * @param object_group_id Object group Id of the object group.
        *
        * @return The object group reference with <i>object_group_id</i> id.
        *
        * @exception FT::ObjectGroupNotFound Raised when there is no local member
        * for the object group.
        */
        FT::ObjectGroup get_object_group_from_gid(
                in ::FT::ObjectGroupId object_group_id)
            raises (FT::ObjectGroupNotFound);
        /**
        * This operation returns object references and locations of other group
        * members of the object group using the object group id.
        * This object group shall have a local member.
        *
        * @param object_group_id Object group Id of the object group.
        *
        * @return a sequence of (reference,location) of the other group members.
        *
        * @exception FT::ObjectGroupNotFound Raised when there is no local member
        * for the object group.
        */
        MemberInfos get_other_group_members_from_gid(
                in ::FT::ObjectGroupId object_group_id)
            raises (FT::ObjectGroupNotFound);
        /**
        * This operation returns the object reference and version of the object
        * group using the object group id.
        * This object group shall have a local member.
        *
        * @param object_group_id Object group Id of the object group.
        *
        * @return Object Group reference and version of the object group.
        *
        * @exception FT::ObjectGroupNotFound Raised when there is no local member
        * for the object group.
        */
        FT::ObjectGroupRefVersion get_object_group_version_from_gid(
                in ::FT::ObjectGroupId object_group_id)
            raises (FT::ObjectGroupNotFound);

        /**
        * The Replication Manager reference
        */
        readonly attribute CdmwFT::ReplicationManager the_replication_manager;

        /**
        * The current location
        */
        readonly attribute FT::Location the_location;

        /**
        * The current location as string
        */
        readonly attribute string the_slocation;
    };

    /** 
    * This local interface extends the GroupRepository interface for
    * primary/backup replication style.
    */
    local interface PrimaryBackupGroupRepository : GroupRepository
    {
        /**
        * This operation indicates whether the local member is a primary replica.
        *
        * @param member Object reference of a local object group member.
        *
        * @return <b>true</b> if the local member is a primary replica,
        * <b>false<b> otherwise.
        *
        * @exception FT::MemberNotFound Raised when <i>member</i> is not known
        * as a local member of an object group.
        */
        boolean is_primary(in Object member)
            raises (FT::MemberNotFound);

        /**
        * This operation indicates whether the local member is a primary replica
        * using the object group id. This object group shall have a local member.
        *
        * @param object_group_id Object group Id of the object group.
        *
        * @return <b>true</b> if the local member is a primary replica,
        * <b>false<b> otherwise.
        *
        * @exception FT::ObjectGroupNotFound Raised when there is no local member
        * for the object group.
        */
        boolean is_primary_from_gid(
                in ::FT::ObjectGroupId object_group_id)
            raises (FT::ObjectGroupNotFound);
    };
    
}; // Location
}; // CdmwFT

#endif // __CDMW_FT_GROUP_REPOSITORY_IDL__


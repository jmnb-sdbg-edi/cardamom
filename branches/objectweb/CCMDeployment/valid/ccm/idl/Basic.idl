/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES 
 * and SELEX-SI. 
 * 
 * It is derivative work based on PERCO Copyright (C) THALES 2000-2003. 
 * All rights reserved.
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it under 
 * the terms of the GNU Library General Public License as published by the
 * Free Software Foundation; either version 2 of the License, or (at your 
 * option) any later version. 
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public 
 * License for more details. 
 * 
 * You should have received a copy of the GNU Library General 
 * Public License along with CARDAMOM; see the file COPYING. If not, write to 
 * the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */


#ifndef  BASIC_DEMO_IDL_
#define BASIC_DEMO_IDL_

#include <Components.idl>

#pragma prefix "acme.com"

module BasicDemo
{

  /*
   * hands out name for Client
   */
  interface Registration {
    string register ();
  };

  /**
   **  The Event valuetype published by the Server component
   **  and consumed by its Consumer components.
   **/
  valuetype Event
  {
      /**
       **  Just contains a string.
       **/
       public string text;
  };

  struct Event2
  {
      /**
       **  Just contains a string.
       **/
       string text;
  };

  /*
   * print a text
   */
  interface Display {
     void print(in string text);
     void print_event(in Event event);
  };

  /**
   **  The Client component type.
   **/
  component Client
  {
      /**
       **  The identifier name property.
       **/
       readonly attribute string name;
       attribute Event2 event;

      /**
       **  The receptable to_server to connect the Client component
       **  to a Display object or facet reference.
       **/ 
       uses Display to_server;

      /**
       **  The receptable to_server to connect the Client component
       **  to a Registration object or facet reference.
       **/ 
       uses Registration to_register;
  };

  /**
   **  Simple home for instantiating Client components.
   **/
  home ClientHome manages Client 
  {
  };

  /**
   **  A base type for named components.
   **/
  component NamedComponent
  {
     /**
      **  The identifier name property.
      **/
      attribute string name;
  };

  /**
   **  Simple home for instantiating Server components.
   **/
  home NamedComponentHome manages NamedComponent 
  {
     /**
      **  The identifier home_name property.
      **/
     attribute string home_name; 
      
     /**
      **  To create a new Consumer identified by the name.
      **/
      factory create_named_component(in string name);
  };

  /**
   **  The Server component type.
   **/
  component Server : NamedComponent supports Registration 
  {
     /**
      **  The facet for Clients components.
      **/
      provides Display for_clients;
  };

  /**
   **  Simple home for instantiating Server components.
   **/
  home ServerHome : NamedComponentHome manages Server 
  {
  };
};

#endif // BASIC_DEMO_IDL_


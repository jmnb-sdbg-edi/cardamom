<?xml version="1.0" encoding="utf-8"?>
<!-- ===================================================================== -->
<!--
 * This file is part of CARDAMOM (R) which is jointly developed by THALES 
 * and SELEX-SI. 
 * 
 * It is derivative work based on PERCO Copyright (C) THALES 2000-2003. 
 * All rights reserved.
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it under 
 * the terms of the GNU Library General Public License as published by the
 * Free Software Foundation; either version 2 of the License, or (at your 
 * option) any later version. 
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public 
 * License for more details. 
 * 
 * You should have received a copy of the GNU Library General 
 * Public License along with CARDAMOM; see the file COPYING. If not, write to 
 * the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-->
<!-- ===================================================================== -->


<!DOCTYPE project [
    <!ENTITY common_config_targets
             SYSTEM "file:../data/CommonConfigTargets.xml">
]>


<project name="RunTest" default="-runtest" basedir=".">


    <description>
        This build file executes the test applications and produces a report.
    </description>


    <!-- Include XML fragments -->
    &common_config_targets;


    <!-- =======================================================================
        The "-runtest" target runs the test applications.

        It depends on the following targets:
            + "-initialize"
            + "-define-runtest-macros"
            + "-print-info"
            + "-check-options"
            + "-construct-target-cscs-list"
            + "-start-self-testing"
    -->
    <target name="-runtest"
            depends="-initialize, -define-runtest-macros, -print-info,
                     -check-options, -construct-target-cscs-list,
                     -start-self-testing">
    </target>


    <!-- =======================================================================
        The "-initialize" target defines some properties.

        It depends on the following targets:
            + "-check-global-aliases"
    -->
    <target name="-initialize" depends="-check-global-aliases">

        <!-- store the output of a test -->
        <tempfile property="test.out" destdir="${TMP}"
                  prefix="${tmpfile.prefix}_test_" suffix=".log"/>

        <!--
            when a test is completed, a check is performed on its log,
            this file stores the result of the check.
        -->
        <tempfile property="testlog.check" destdir="${TMP}"
                  prefix="${tmpfile.prefix}_check_" suffix=".log"/>

        <!-- report -->
        <var name="p" value="${user.home}${FS}Runtest-"/>
        <var name="p" value="${p}${config.site.csn}#${site.id}.log"/>
        <property name="runtest.log" location="${p}"/>

        <!-- clean up -->
        <delete file="${runtest.log}" quiet="true"/>

        <property name="sloppy.check" value="false"/>

        <!-- load filter tokens -->
        <xloadproperties srcFile="${mb.site.properties}" 
                         filtersetid="my.site.tokens"/>

        <if>
            <available file="${dev.tokens.file}" type="file"/>
            <then>
                <xloadproperties srcFile="${dev.tokens.file}" 
                                 filtersetid="my.dev.tokens"/>
            </then>
        </if>
    </target>


    <!-- =======================================================================
        The "-define-runtest-macros" target defines some macros.
    -->
    <target name="-define-runtest-macros" unless="rt.macros.defined">
        <!--
            The "constructldlibrarypath" macro constructs the LD_LIBRARY_PATH
            for the C++ and JNI libraries.
        -->
        <macrodef name="constructldlibrarypath">
            <attribute name="test.name"/>
            <attribute name="libs"/>
            <attribute name="property"/>

            <sequential>
                <basename property="test.basename"
                          file="@{test.name}" suffix=".xml"/>

                <!-- forget about the LD_LIBRARY_PATH if it's an XML file -->
                <if>
                    <and>
                        <equals arg1="@{test.name}" arg2="${test.basename}"
                                trim="true"/>
                        <isset property="rt.csc.@{test.name}.@{libs}"/>
                    </and>
                    <then>
                        <propertycopy property="rt.libs"
                                      from="rt.csc.@{test.name}.@{libs}"/>

                        <var name="ld.lib.path" value=""/>

                        <for list="${rt.libs}" delimiter=" " param="rt.lib">
                            <sequential>
                                <!-- keep the parent directory only -->
                                <dirname property="lib.path" file="@{rt.lib}"/>

                                <if>
                                    <not>
                                        <contains string="${ld.lib.path}"
                                                  substring="${lib.path}"/>
                                    </not>
                                    <then>
                                        <var name="ld.lib.path"
                                         value="${ld.lib.path}${PS}${lib.path}"/>
                                    </then>
                                </if>

                                <!-- unset properties -->
                                <xvar name="lib.path" unset="true"/>
                            </sequential>
                        </for>

                        <property name="@{property}" value="${ld.lib.path}"/>
                    </then>
                </if>

                <!-- unset properties -->
                <xvar name="test.basename" unset="true"/>
                <xvar name="rt.libs"       unset="true"/>
                <xvar name="ld.lib.path"   unset="true"/>
            </sequential>
        </macrodef>

        <!--
            The "filtercopy" macro copies a data file to the target directory
            and replace the tokens on the fly.
        -->
        <macrodef name="filtercopy">
            <attribute name="file"/>
            <attribute name="target.dir"/>

            <sequential>
                <echo level="verbose">Copying @{file} to @{target.dir}</echo>

                <!--
                    the "file" might be stored in a sub-directory of the CSC
                    data directory, in that case we need to recreate the same
                    directory tree into "dir".
                -->
                <var name="p1" value="${FS}${config.delivery.dir}${FS}"/>
                <var name="p1" value="${p1}${config.delivery.data.dir}${FS}"/>

                <var name="p2" value="${FS}${config.csc.data.dir}${FS}"/>

                <basename property="file.basename" file="@{file}"/>

                <if>
                    <and>
                        <not>
                            <contains string="@{file}" substring="${p1}"/>
                        </not>
                        <contains string="@{file}" substring="${p2}"/>
                    </and>
                    <then>
                        <selecttoken string="@{file}" delimiter="${p2}"
                            tokenNumber="1" property="data.subdir"/>

                        <if>
                            <not>
                                <equals arg1="${data.subdir}"
                                        arg2="${file.basename}" trim="true"/>
                            </not>
                            <then>
                                <selecttoken override="true"
                                    string="${data.subdir}"
                                    delimiter="${file.basename}"
                                    tokenNumber="0" property="data.subdir"/>
                            </then>
                            <else>
                                <xvar name="data.subdir" unset="true"/>
                                <property name="data.subdir" value=""/>
                            </else>
                        </if>
                    </then>
                </if>

                <if>
                    <not>
                        <equals arg1="${data.subdir}" arg2="" trim="true"/>
                    </not>
                    <then>
                        <property name="data.subdir" value="."/>
                    </then>
                </if>

                <!-- create the sub-directory if necessary -->
                <property name="copy.todir"
                          location="@{target.dir}${FS}${data.subdir}"/>

                <mkdir dir="${copy.todir}"/>

                <!-- do not apply any filters on binary files -->
                <isbinary file="@{file}" property="is.binary"/>

                <if>
                    <isset property="is.binary"/>
                    <then>
                        <if>
                            <os family="unix"/>
                            <then>
                                <exec executable="cp"
                                      outputproperty="copy.output">

                                    <arg value="-f"/>
                                    <arg value="@{file}"/>
                                    <arg value="${copy.todir}"/>
                                </exec>
                            </then>
                            <else>
                                <copy file="@{file}" todir="${copy.todir}"
                                      verbose="false" overwrite="true"/>
                            </else>
                        </if>
                    </then>
                    <else>
                        <if>
                            <available file="${dev.tokens.file}" type="file"/>
                            <then>
                                <copy overwrite="true" file="@{file}"
                                      todir="${copy.todir}">

                                    <filterset refid="my.site.tokens"/>
                                    <filterset refid="my.dev.tokens"/>
                                </copy>
                            </then>
                            <else>
                                <copy overwrite="true" file="@{file}"
                                      todir="${copy.todir}">

                                    <filterset refid="my.site.tokens"/>
                                </copy>
                            </else>
                        </if>

                        <!--
                            it may not be a binary file but it may be a shell
                            script file
                        -->
                        <chmod file="${copy.todir}${FS}${file.basename}"
                               perm="ugo+x"/>
                    </else>
                </if>

                <!-- unset properties -->
                <xvar name="file.basename" unset="true"/>
                <xvar name="is.binary"     unset="true"/>
                <xvar name="data.subdir"   unset="true"/>
                <xvar name="copy.todir"    unset="true"/>
            </sequential>
        </macrodef>

        <!--
            The "constructlibjniossupportpath" macro generates the path to the
            JNI ossupport library.
        -->
        <macrodef name="constructlibjniossupportpath">
            <attribute name="property"/>

            <sequential>
                <var name="p" value="${config.Foundation.location}${FS}"/>
                <var name="p" value="${p}${config.delivery.dir}${FS}"/>
                <var name="p" value="${p}${config.delivery.library.dir}${FS}"/>
                <var name="p" value="${p}${config.site.csn}-"/>
                <var name="p" value="${p}${config.Foundation.cpp.compiler}-"/>
                <var name="p" value="${p}${config.Foundation.cpp.compiler.ver}${FS}"/>
                <var name="p" value="${p}lib${config.lowercase.product.name}jni"/>
                <var name="p" value="${p}ossupport"/>
                <if>
                    <equals arg1="${config.cpp.shared}" arg2="y"/>
                    <then>
                        <var name="p" value="${p}.so"/>
                    </then>
                    <else>
                        <var name="p" value="${p}.a"/>
                    </else>
                </if>
                <var name="@{property}" value="${p}"/>
            </sequential>
        </macrodef>

        <property name="rt.macros.defined" value="true"/>
    </target>


    <!-- =======================================================================
        The "-print-info" target prints the self-testing welcome message.
    -->
    <target name="-print-info">
        <echo>
+--------------------------------------------------------------------+
 CARDAMOM SELF-TESTING
+--------------------------------------------------------------------+

CARDAMOM is about to run the test applications to ensure that the
executables and libraries are built and that they function correctly.
Hence, it assumes that you did run the compilation of the product at
least once.

The tests are verbose on purpose. You can most probably ignore most of
the logs. A summary will be shown when all the tests are run.

+--------------------------------------------------------------------+
        </echo>
    </target>


    <!-- =======================================================================
        The "-check-options" target checks the command line arguments.
    -->

    <target name="-check-options">
        <var name="rt.cscs.list" value=""/>

        <for list="${runtest.options}" delimiter=" " param="rt.option">
            <sequential>
                <switch value="@{rt.option}">
                    <case value="c++">
                       <property name="rt.cpp.itf.is.required" value="true"/>
                    </case>

                    <case value="java">
                       <property name="rt.java.itf.is.required" value="true"/>
                    </case>

                    <case value="ada">
                       <property name="rt.ada.itf.is.required" value="true"/>
                    </case>

                    <default>
                        <if>
                            <contains casesensitive="true" string="@{rt.option}"
                                      substring="timescale="/>
                            <then>
                                <!-- extract the timescale value -->
                                <selecttoken property="rt.timescale.value"
                                             string="@{rt.option}"
                                             delimiter="=" tokenNumber="1"/>
                            </then>
                            <else>
                                <!--
                                    should be a CSCI name or a path to the
                                    unit test CSC
                                -->
                                <var name="rt.cscs.list"
                                     value="${rt.cscs.list} @{rt.option}"/>
                            </else>
                        </if>
                    </default>
                </switch>
            </sequential>
        </for>

        <!-- list of programming languages -->
        <var name="rt.tests.langs" value=""/>
        <if>
            <or>
                <isset property="rt.cpp.itf.is.required"/>
                <isset property="rt.java.itf.is.required"/>
                <isset property="rt.ada.itf.is.required"/>
            </or>
            <then>
                <if>
                    <isset property="rt.cpp.itf.is.required"/>
                    <then>
                        <var name="rt.tests.langs"
                             value="${rt.tests.langs} c++"/>
                    </then>
                </if>
                <if>
                    <isset property="rt.java.itf.is.required"/>
                    <then>
                        <var name="rt.tests.langs"
                             value="${rt.tests.langs} java"/>
                    </then>
                </if>
                <if>
                    <isset property="rt.ada.itf.is.required"/>
                    <then>
                        <var name="rt.tests.langs"
                             value="${rt.tests.langs} ada"/>
                    </then>
                </if>
            </then>
            <else>
                <var name="rt.tests.langs" value="c++ java ada"/>
            </else>
        </if>

        <condition property="rt.no.specified.cscs">
            <equals arg1="${rt.cscs.list}" arg2="" trim="true"/>
        </condition>

        <if>
            <not>
                <isset property="rt.timescale.value"/>
            </not>
            <then>
                <property name="rt.timescale.value" value="1"/>
            </then>
        </if>

        <!-- unset properties -->
        <xvar name="rt.cpp.itf.is.required"  unset="true"/>
        <xvar name="rt.java.itf.is.required" unset="true"/>
        <xvar name="rt.ada.itf.is.required"  unset="true"/>
    </target>


    <!-- =======================================================================
        The "-construct-target-cscs-list" constructs the list of CSCs which will
        be tested.

        It depends on the following targets:
            + "-find-target-cscs"
    -->
    <target name="-construct-target-cscs-list" depends="-find-target-cscs">
        <!-- define the initial list of CSCs -->
        <if>
            <isset property="rt.no.specified.cscs"/>
            <then>
                <property name="rt.target.cscs.list" value="${rt.target.cscs}"/>
            </then>
            <else>
                <property name="rt.target.cscs.list" value="${rt.cscs.list}"/>
            </else>
        </if>

        <var name="rt.final.cscs.list" value=""/>
        <var name="rt.csc.props.file"
             value="${config.csc.data.dir}${FS}${config.csc.properties.file}"/>

        <!-- clean the list from unwanted CSCs -->
        <for list="${rt.target.cscs.list}" delimiter=" " param="rt.csc1">
        <sequential>
            <for list="${rt.target.cscs}" delimiter=" " param="rt.csc2">
            <sequential>
                <if>
                    <contains string="@{rt.csc2}" substring="@{rt.csc1}"
                              casesensitive="true"/>
                    <then>
                        <if>
                            <equals arg1="${rt.tests.langs}"
                                    arg2="c++ java ada" trim="true"/>
                            <then>
                                <var name="rt.final.cscs.list"
                                     value="${rt.final.cscs.list} @{rt.csc2}"/>
                            </then>
                            <else>
                                <!-- path to the CSC properties file -->
                                <var name="p" value="@{rt.csc2}${FS}"/>
                                <var name="p" value="${p}${rt.csc.props.file}"/>

                                <!-- load the properties -->
                                <xmlproperty file="${p}" prefix="rt.check"
                                             collapseAttributes="true"
                                             keepRoot="false"/>

                                <!-- check the CSC lang attribute -->
                                <if>
                                    <contains string="${rt.tests.langs}"
                                              substring="${rt.check.csc.lang}"/>
                                    <then>
                                        <var name="s"
                                             value="${rt.final.cscs.list}"/>
                                        <var name="s"
                                             value="${s} @{rt.csc2}"/>
                                        <var name="rt.final.cscs.list"
                                             value="${s}"/>
                                    </then>
                                </if>

                                <!-- unset properties -->
                                <propertyselector property="rt.check.props"
                                          match="^rt\.check\.(.*)" select="\1"/>

                                <for list="${rt.check.props}" param="p">
                                    <sequential>
                                        <xvar name="rt.check.@{p}"
                                              unset="true"/>
                                    </sequential>
                                </for>

                                <xvar name="rt.check.props" unset="true"/>
                            </else>
                        </if>
                    </then>
                </if>
            </sequential>
            </for>
        </sequential>
        </for>

        <!-- unset properties -->
        <xvar name="rt.target.cscs"      unset="true"/>
        <xvar name="rt.target.cscs.list" unset="true"/>
        <xvar name="rt.csc.props.file"   unset="true"/>
    </target>


    <!-- =======================================================================
        The "-find-target-cscs" target constructs the list of tests to run.

        It depends on the following targets:
            + "-check-description-file"
    -->
    <target name="-find-target-cscs" depends="-check-description-file">
        <if>
            <and>
                <isset property="config.sel.min.cscis"/>
                <isset property="config.sel.interfaces"/>
                <isset property="config.sel.packages"/>
            </and>
            <then>
                <findcscs pkgdesc="${rt.pkg.desc}" addProperty="rt.target.cscs"
                          cscis="${config.sel.min.cscis}"
                          interfaces="${config.sel.interfaces}"
                          packages="${config.sel.packages}"
                          cscType="unit-test"/>

                <if>
                    <not><isset property="rt.target.cscs" /></not>
                    <then>
                        <property name="rt.target.cscs" value="" />
                    </then>
                </if>

                <!-- unset properties -->
                <xvar name="rt.pkg.desc" unset="true"/>
            </then>
        </if>
    </target>


    <!-- =======================================================================
        The "-check-description-file" target checks if the package description
        file exists and validates it against its XML schema.
    -->
    <target name="-check-description-file">
        <!-- set the file name -->
        <property name="rt.pkg.desc"
                  location="${config.csc.data.dir}${FS}PkgDesc.xml"/>

        <!-- check -->
        <checkxmlpropertiesfile
            my.properties.file="${rt.pkg.desc}"
            my.xsd.dir="${xsd.dir}"/>
    </target>


    <!-- =======================================================================
        The "-start-self-testing" target starts the self-testing process.
    -->
    <target name="-start-self-testing">
        <echo file="${testlog.check}" append="false">
+--------------------------------------------------------------------+
 SELF-TESTING REPORT
+--------------------------------------------------------------------+
        </echo>

        <foreach list="${rt.final.cscs.list}" delimiter=" " param="rt.csc.test"
                 target="-run-unit-tests" inheritall="true" inheritrefs="true"/>

        <!-- now that all the tests were run, print the results -->
        <loadfile srcFile="${testlog.check}" property="testlog.content"/>
        <echo message="${testlog.content}"/>

        <!-- and append the results to the report -->
        <echo message="${testlog.content}" file="${runtest.log}" append="true"/>
    </target>


    <!-- =======================================================================
        The "-run-unit-tests" target runs all the tests described in the CSC
        properties file.
    -->
    <target name="-run-unit-tests">
        <echo>[CSC] ${rt.csc.test}</echo>

        <!-- load the CSC properties -->
        <var name="p" value="${rt.csc.test}${FS}${config.csc.data.dir}"/>
        <property name="rt.csc.props.file"
                  location="${p}${FS}${config.csc.properties.file}"/>

        <var name="p" value="${config.Build.location}${FS}configuration${FS}"/>
        <var name="p" value="${p}${config.csc.data.dir}${FS}DepsInfo.properties"/>
        <property file="${p}"/>

        <if>
            <available file="${dev.tokens.file}" type="file"/>
            <then>
                <loadcscproperties file="${rt.csc.props.file}" prefix="rt"
                                   includetests="true">

                    <filterset>
                        <filterset refid="my.site.tokens"/>
                        <filterset refid="my.dev.tokens"/>
                    </filterset>
                </loadcscproperties>
            </then>
            <else>
                <loadcscproperties file="${rt.csc.props.file}" prefix="rt"
                                   includetests="true">

                    <filterset>
                        <filterset refid="my.site.tokens"/>
                    </filterset>
                </loadcscproperties>
            </else>
        </if>

        <!-- run the tests -->
        <if>
            <isset property="rt.csc.all.tests"/>
            <then>
            <switch value="${rt.csc.lang}">
                <!-- C++ -->
                <case value="c++">
                    <foreach list="${rt.csc.all.tests}" target="-exec-test-c++"
                             delimiter=" " param="rt.test" inheritall="true"
                             inheritrefs="true"/>
                </case>

                <!-- JAVA -->
                <case value="java">
                    <foreach list="${rt.csc.all.tests}" target="-exec-test-java"
                             delimiter=" " param="rt.test" inheritall="true"
                             inheritrefs="true"/>
                </case>

                <!-- ADA -->
                <case value="ada">
                    <!-- TODO -->
                </case>
            </switch>
            </then>
        </if>
    </target>


    <!-- =======================================================================
        The "-exec-test-c++" target executes a test application written in C++.

        It depends on the following targets:
            + "-set-cpp-properties"
            + "-clean-core-file"
            + "-construct-ld-library-path"
            + "-get-naming-service-dir"
            + "-create-runtest-dir"
            + "-copy-cpp-test-executable"
            + "-create-test-env"
            + "-exec-test"
    -->
    <target name="-exec-test-c++"
            depends="-set-cpp-properties, -clean-core-file,
                     -construct-ld-library-path, -get-naming-service-dir,
                     -create-runtest-dir, -copy-cpp-test-executable,
                     -create-test-env, -exec-test">
    </target>


    <!-- =======================================================================
        The "-exec-test-java" target executes a test application written in JAVA

        It depends on the following targets:
            + "-set-java-properties"
            + "-construct-ld-library-path"
            + "-get-naming-service-dir"
            + "-create-runtest-dir"
            + "-copy-java-test-executable"
            + "-create-test-env"
            + "-exec-test"
    -->
    <target name="-exec-test-java"
            depends="-set-java-properties, -construct-ld-library-path,
                     -get-naming-service-dir, -create-runtest-dir,
                     -copy-java-test-executable, -create-test-env,
                     -exec-test">
    </target>


    <!-- =======================================================================
        The "-set-cpp-properties" defines properties for the C++ environment.
    -->
    <target name="-set-cpp-properties">
        <propertycopy property="compiler.name" silent="true"
                      from="config.${rt.csc.owner}.cpp.compiler"/>

        <propertycopy property="compiler.ver" silent="true"
                      from="config.${rt.csc.owner}.cpp.compiler.ver"/>

        <propertycopy property="orb.name" silent="true"
                      from="config.${rt.csc.owner}.cpp.orb"/>

        <propertycopy property="orb.ver" silent="true"
                      from="config.${rt.csc.owner}.cpp.orb.ver"/>

        <!-- set the classpath for the tools -->
        <propertycopy property="rt.tools.list" silent="true"
                      from="config.${rt.csc.owner}.tools"/>

        <var name="tools.classpath" value=""/>
        <var name="tools.ld.library.path" value=""/>
        <if>
            <isset property="rt.tools.list"/>
            <then>
                <for list="${rt.tools.list}" delimiter=" " param="rt.tool">
                    <sequential>
                        <if>
                            <isset property="config.@{rt.tool}.classpath"/>
                            <then>
                                <propertycopy property="cp"
                                    from="config.@{rt.tool}.classpath"/>

                                <if>
                                    <equals arg1="@{rt.tool}"
                                            arg2="XercesJAVA"/>
                                    <then>
                                        <var name="tools.classpath"
                                             value="${cp}${PS}${tools.classpath}"/>
                                    </then>
                                    <else>
                                        <var name="tools.classpath"
                                             value="${tools.classpath}${PS}${cp}"/>
                                    </else>
                                </if>
                            </then>
                        </if>

                        <if>
                            <isset property="config.@{rt.tool}.lib.dir" />
                            <then>
                                <propertycopy property="lp"
                                    from="config.@{rt.tool}.lib.dir" />

                                <var name="tools.ld.library.path"
                                     value="${tools.ld.library.path}${PS}${lp}" />
                            </then>
                        </if>

                        <!-- unset properties -->
                        <xvar name="cp" unset="true"/>
                        <xvar name="lp" unset="true"/>
                    </sequential>
                </for>
            </then>
        </if>
    </target>


    <!-- =======================================================================
        The "-set-java-properties" defines properties for the JAVA environment.
    -->
    <target name="-set-java-properties">
        <propertycopy property="orb.name" silent="true"
                      from="config.${rt.csc.owner}.java.orb"/>

        <propertycopy property="orb.ver" silent="true"
                      from="config.${rt.csc.owner}.java.orb.ver"/>

        <!-- set the classpath for the tools -->
        <propertycopy property="rt.tools.list" silent="true"
                      from="config.${rt.csc.owner}.tools"/>

        <var name="tools.classpath" value=""/>
        <var name="tools.ld.library.path" value=""/>
        <if>
            <isset property="rt.tools.list"/>
            <then>
                <for list="${rt.tools.list}" delimiter=" " param="rt.tool">
                    <sequential>
                        <if>
                            <isset property="config.@{rt.tool}.classpath"/>
                            <then>
                                <propertycopy property="cp"
                                    from="config.@{rt.tool}.classpath"/>

                                <if>
                                    <equals arg1="@{rt.tool}"
                                            arg2="XercesJAVA"/>
                                    <then>
                                        <var name="tools.classpath"
                                             value="${cp}${PS}${tools.classpath}"/>
                                    </then>
                                    <else>
                                        <var name="tools.classpath"
                                             value="${tools.classpath}${PS}${cp}"/>
                                    </else>
                                </if>
                            </then>
                        </if>

                        <if>
                            <isset property="config.@{rt.tool}.lib.dir" />
                            <then>
                                <propertycopy property="lp"
                                    from="config.@{rt.tool}.lib.dir" />

                                <var name="tools.ld.library.path"
                                     value="${tools.ld.library.path}${PS}${lp}" />
                            </then>
                        </if>

                        <!-- unset properties -->
                        <xvar name="cp" unset="true"/>
                        <xvar name="lp" unset="true"/>
                    </sequential>
                </for>
            </then>
        </if>

        <!-- set the classpath for the required libraries -->
        <propertycopy property="my.classpath" silent="true"
                      from="rt.csc.${rt.test}.requiredlibs"/>

        <if>
            <not><isset property="my.classpath"/></not>
            <then>
                <var name="my.classpath" value=""/>
            </then>
            <else>
                <if>
                    <contains string="${my.classpath}"
                              substring="ossupport" />
                    <then>
                        <constructlibjniossupportpath
                            property="jni.ld.library.path_" />

                        <dirname property="jni.ld.library.path"
                            file="${jni.ld.library.path_}" />

                        <xvar name="jni.ld.library.path_" unset="true" />
                    </then>
                </if>
            </else>
        </if>

        <!-- unset properties -->
        <xvar name="rt.tools.list" unset="true"/>
    </target>


    <!-- =======================================================================
        The "-clean-core-file" target deletes all the core files found in a CSC.
    -->
    <target name="-clean-core-file">
        <delete quiet="true">
            <fileset dir="${rt.csc.test}" includes="**/core*"/>
        </delete>
    </target>


    <!-- ======================================================================
        The "-construct-ld-library-path" target constructs the LD_LIBRARY_PATH.
    -->
    <target name="-construct-ld-library-path">
        <switch value="${rt.csc.lang}">
            <case value="c++">
                <constructldlibrarypath
                    property="ld.library.path"
                    test.name="${rt.test}"
                    libs="requiredlibs"/>
            </case>

            <case value="java">
                <constructldlibrarypath
                    property="ld.library.path"
                    test.name="${rt.test}"
                    libs="requiredjnilibs"/>
            </case>

            <case value="ada">
                <!-- TODO -->
            </case>
        </switch>

        <if>
            <not><isset property="ld.library.path"/></not>
            <then>
                <property name="ld.library.path" value=""/>
            </then>
        </if>
    </target>


    <!-- ======================================================================
        The "-get-naming-service-dir" target returns the path to the naming
        service directory.
    -->
    <target name="-get-naming-service-dir">
        <propertycopy property="naming.service.dir" silent="true"
                      from="config.${orb.name}.naming.service.dir"/>
    </target>


    <!-- =======================================================================
        The "-create-runtest-dir" target creates the runtest directory.

        It depends on the following targets:
            + "-construct-runtest-dir-path"
    -->
    <target name="-create-runtest-dir" depends="-construct-runtest-dir-path"
            if="runtest.dir">

        <mkdir dir="${runtest.dir}"/>
    </target>


    <!-- =======================================================================
        The "-construct-runtest-dir-path" target constructs the path to the
        runtest directory.
    -->
    <target name="-construct-runtest-dir-path">
        <var name="p" value="${rt.csc.test}${FS}"/>
        <var name="p" value="${p}${config.csc.runtest.dir}${FS}"/>
        <var name="p" value="${p}${rt.test}${FS}${config.site.csn}"/>

        <if>
            <isset property="compiler.name"/>
            <then>
                <var name="p" value="${p}-${compiler.name}-${compiler.ver}"/>
            </then>
        </if>

        <if>
            <isset property="orb.name"/>
            <then>
                <var name="p" value="${p}-${orb.name}-${orb.ver}"/>
            </then>
        </if>

        <property name="runtest.dir" location="${p}"/>
    </target>


    <!-- =======================================================================
        The "-copy-cpp-test-executable" target copies the C++ test executable
        into the runtest directory.
    -->
    <target name="-copy-cpp-test-executable">
        <basename property="test.basename" file="${rt.test}" suffix=".xml"/>

        <if>
            <equals arg1="${rt.test}" arg2="${test.basename}" trim="true"/>
            <then>
                <propertycopy property="csci.orb" silent="true"
                              from="config.${rt.csc.owner}.cpp.orb"/>

                <propertycopy property="csci.orb.ver" silent="true"
                              from="config.${rt.csc.owner}.cpp.orb.ver"/>

                <!-- look into the delivery bin directory -->
                <var name="p" value="${rt.csc.test}${FS}"/>
                <var name="p" value="${p}${config.delivery.dir}${FS}"/>
                <var name="p" value="${p}${config.delivery.executable.dir}"/>
                <var name="p" value="${p}${FS}${config.site.csn}-"/>

                <propertycopy property="csci.compiler"
                              from="config.${rt.csc.owner}.cpp.compiler"/>

                <propertycopy property="csci.compiler.ver"
                              from="config.${rt.csc.owner}.cpp.compiler.ver"/>

                <var name="p"
                     value="${p}${csci.compiler}-${csci.compiler.ver}"/>

                <!-- unset properties -->
                <xvar name="csci.compiler"     unset="true"/>
                <xvar name="csci.compiler.ver" unset="true"/>

                <if>
                    <isset property="csci.orb"/>
                    <then>
                        <var name="p"
                             value="${p}-${csci.orb}-${csci.orb.ver}"/>

                        <!-- unset properties -->
                        <xvar name="csci.orb"     unset="true"/>
                        <xvar name="csci.orb.ver" unset="true"/>
                    </then>
                </if>
            </then>
            <else>
                <!-- look into the CSC data directory -->
                <var name="p" value="${rt.csc.test}${FS}"/>
                <var name="p" value="${p}${config.csc.data.dir}"/>
            </else>
        </if>

        <findfile dir="${p}" file="${rt.test}" property="rt.fqn.test"
                  recursive="true"/>

        <fail unless="rt.fqn.test"
              message="cannot find file ${rt.test} in ${p}"/>

        <!-- copy to the runtest dir -->
        <filtercopy file="${rt.fqn.test}" target.dir="${runtest.dir}"/>

        <!-- unset properties -->
        <xvar name="test.basename" unset="true"/>
    </target>


    <!-- =======================================================================
        The "-copy-java-test-executable" target copies the JAVA test executable
        into the runtest directory.
    -->
    <target name="-copy-java-test-executable">
        <basename property="test.basename" file="${rt.test}" suffix=".xml"/>

        <if>
            <equals arg1="${rt.test}" arg2="${test.basename}" trim="true"/>
            <then>
                <propertycopy property="csci.orb" silent="true"
                              from="config.${rt.csc.owner}.java.orb"/>

                <propertycopy property="csci.orb.ver" silent="true"
                              from="config.${rt.csc.owner}.java.orb.ver"/>

                <!-- look into the delivery bin directory -->
                <var name="p" value="${rt.csc.test}${FS}"/>
                <var name="p" value="${p}${config.delivery.dir}${FS}"/>
                <var name="p" value="${p}${config.delivery.executable.dir}"/>

                <if>
                    <isset property="csci.orb"/>
                    <then>
                        <var name="p"
                             value="${p}${FS}${csci.orb}-${csci.orb.ver}"/>

                        <!-- unset properties -->
                        <xvar name="csci.orb"     unset="true"/>
                        <xvar name="csci.orb.ver" unset="true"/>
                    </then>
                </if>

                <findfile dir="${p}" file="${rt.test}.jar" recursive="true"
                          property="rt.fqn.test"/>
            </then>
            <else>
                <!-- look into the CSC data directory -->
                <var name="p" value="${rt.csc.test}${FS}"/>
                <var name="p" value="${p}${config.csc.data.dir}"/>

                <findfile dir="${p}" file="${rt.test}" property="rt.fqn.test"/>
            </else>
        </if>

        <fail unless="rt.fqn.test"
              message="cannot find file ${rt.test} in ${p}"/>

        <!-- copy to the runtest dir -->
        <filtercopy file="${rt.fqn.test}" target.dir="${runtest.dir}"/>

        <!-- unset properties -->
        <xvar name="test.basename" unset="true"/>
        <xvar name="test.package"  unset="true"/>
    </target>


    <!-- =======================================================================
        The "-copy-ada-test-executable" target copies the ADA test executable
        into the runtest directory.
    -->
    <target name="-copy-ada-test-executable">
        <!-- TODO -->
    </target>


    <!-- ======================================================================
        The "-create-test-env" target sets the environment for the test.
    -->
    <target name="-create-test-env">
        <!-- copy all the needed files into the runtest directory -->
        <propertycopy property="rt.neededfiles" silent="true"
                      from="rt.csc.${rt.test}.neededfiles"/>

        <if>
            <isset property="rt.neededfiles"/>
            <then>
                <runtarget target="-copy-needed-files"/>

                <!-- unset properties -->
                <xvar name="rt.neededfiles" unset="true"/>
            </then>
        </if>

        <!-- copy all the needed process files -->
        <propertycopy name="rt.neededprocesses" silent="true"
                      from="rt.csc.${rt.test}.neededprocesses"/>

        <if>
            <isset property="rt.neededprocesses"/>
            <then>
                <runtarget target="-create-needed-processes-env"/>

                <!-- unset properties -->
                <xvar name="rt.neededprocesses" unset="true"/>
            </then>
        </if>

        <!-- copy all the needed jar files -->
        <propertycopy name="rt.neededjarfiles" silent="true"
                      from="rt.csc.${rt.test}.neededjarfiles"/>

        <if>
            <isset property="rt.neededjarfiles"/>
            <then>
                <runtarget target="-create-needed-jars-env"/>

                <!-- unset properties -->
                <xvar name="rt.neededjarfiles" unset="true"/>
            </then>
        </if>

        <!--
            set LD_LIBRARY_PATH so that it points to all the CSCI delivery
            lib directories.
        -->
        <for list="${config.sel.min.cscis}" delimiter=" " param="rt.csci">
            <sequential>
                <if>
                    <isset property="config.@{rt.csci}.cpp.compiler"/>
                    <then>
                        <propertycopy property="csci.loc"
                                      from="config.@{rt.csci}.location"/>

                        <var name="p" value="${csci.loc}${FS}"/>
                        <var name="p" value="${p}${config.delivery.dir}${FS}"/>
                        <var name="p"
                             value="${p}${config.delivery.library.dir}${FS}"/>
                        <var name="p" value="${p}${config.site.csn}"/>

                        <propertycopy property="csci.compiler"
                            from="config.@{rt.csci}.cpp.compiler"/>

                        <propertycopy property="csci.compiler.ver"
                            from="config.@{rt.csci}.cpp.compiler.ver"/>

                        <var name="p" value="${p}-${csci.compiler}"/>
                        <var name="p" value="${p}-${csci.compiler.ver}"/>

                        <if>
                            <isset property="config.@{rt.csci}.cpp.orb"/>
                            <then>
                                <propertycopy property="csci.orb"
                                    from="config.@{rt.csci}.cpp.orb"/>

                                <propertycopy property="csci.orb.ver"
                                    from="config.@{rt.csci}.cpp.orb.ver"/>

                                <var name="p" value="${p}-${csci.orb}"/>
                                <var name="p" value="${p}-${csci.orb.ver}"/>
                            </then>
                        </if>

                        <if>
                            <isset property="csci.ld.library.path"/>
                            <then>
                                <var name="csci.ld.library.path"
                                     value="${csci.ld.library.path}${PS}${p}"/>
                            </then>
                            <else>
                                <var name="csci.ld.library.path" value="${p}"/>
                            </else>
                        </if>
                    </then>
                </if>

                <!-- unset properties -->
                <xvar name="csci.loc"          unset="true"/>
                <xvar name="csci.compiler"     unset="true"/>
                <xvar name="csci.compiler.ver" unset="true"/>
                <xvar name="csci.orb"          unset="true"/>
                <xvar name="csci.orb.ver"      unset="true"/>
            </sequential>
        </for>
    </target>


    <!-- =======================================================================
        The "-copy-needed-files" target copies the needed files into the runtest
        directory. Any tokens in the files are replaced on the fly.
    -->
    <target name="-copy-needed-files" if="rt.neededfiles">
        <for list="${rt.neededfiles}" delimiter=" " param="file">
            <sequential>
                <!-- determine the CSCI which "owns" the file -->
                <selecttoken string="@{file}" delimiter="/" tokenNumber="0"
                             property="owner"/>

                <!-- get the parent of the CSCI directory -->
                <propertycopy property="csci.loc"
                              from="config.${owner}.location"/>
                <dirname file="${csci.loc}" property="csci.dirname"/>

                <!-- determine the path to the CSC directory -->
                <dirname file="${csci.dirname}${FS}@{file}"
                         property="csc.path"/>

                <!-- look for "file" in the CSC  directory -->
                <basename file="@{file}" property="file.name"/>

                <if>
                    <available file="${csc.path}" type="dir"/>
                    <then>
                        <findfile dir="${csc.path}" file="${file.name}"
                                  findFirst="true" recursive="true"
                                  property="fqn.filename"/>
                    </then>
                </if>

                <!-- copy -->
                <if>
                    <isset property="fqn.filename"/>
                    <then>
                        <filtercopy file="${fqn.filename}"
                                    target.dir="${runtest.dir}"/>
                    </then>
                </if>

                <!-- unset properties -->
                <xvar name="owner"        unset="true"/>
                <xvar name="csci.loc"     unset="true"/>
                <xvar name="csci.dirname" unset="true"/>
                <xvar name="file.name"    unset="true"/>
                <xvar name="csc.path"     unset="true"/>
                <xvar name="fqn.filename" unset="true"/>
            </sequential>
        </for>
    </target>


    <!-- =======================================================================
        The "-create-needed-processes-env" target constructs the PATH and the
        LD_LIBRARY_PATH so that the needed processes can be run from their
        original locations.
    -->
    <target name="-create-needed-processes-env" if="rt.neededprocesses">
        <var name="procs.path" value=""/>

        <for list="${rt.neededprocesses}" delimiter=" " param="file">
            <sequential>
                <!-- determine the CSCI which "owns" the file -->
                <selecttoken string="@{file}" delimiter="/" tokenNumber="0"
                             property="owner"/>

                <!-- get the parent of the CSCI directory -->
                <propertycopy property="csci.loc"
                              from="config.${owner}.location"/>
                <dirname file="${csci.loc}" property="csci.dirname"/>

                <!-- determine the path to the CSC directory -->
                <dirname file="${csci.dirname}${FS}@{file}"
                         property="csc.path"/>

                <!-- look for "file" in the CSC delivery bin directory -->
                <basename file="@{file}" property="file.name"/>

                <if>
                    <available file="${csc.path}" type="dir"/>
                    <then>
                        <findfile dir="${csc.path}" file="${file.name}"
                                  findFirst="true" recursive="true"
                                  property="fqn.filename"/>
                    </then>
                </if>

                <!-- determine the libraries required by the process -->
                <if>
                    <isset property="fqn.filename"/>
                    <then>
                        <!-- construct the PATH -->
                        <dirname file="${fqn.filename}"
                                 property="fqn.file.dirname"/>

                        <var name="procs.path"
                             value="${procs.path}${PS}${fqn.file.dirname}"/>

                        <!-- load the CSC properties file -->
                        <for list="c++,java,ada" param="l">
                            <sequential>
                                <if>
                                    <contains string="${fqn.filename}"
                                              substring="${FS}@{l}${FS}"/>
                                    <then>
                                        <var name="p"
                                             value="${csc.path}${FS}@{l}"/>
                                    </then>
                                </if>
                            </sequential>
                        </for>
                        <var name="p"
                             value="${p}${FS}${config.csc.data.dir}${FS}"/>
                        <var name="p"
                             value="${p}${config.csc.properties.file}"/>

                        <var name="f" value="${config.Build.location}${FS}configuration${FS}"/>
                        <var name="f" value="${f}${config.csc.data.dir}${FS}DepsInfo.properties"/>
                        <property file="${f}"/>

                        <if>
                            <and>
                                <available file="${dev.tokens.file}" type="file"/>
                            </and>
                            <then>
                                <loadcscproperties file="${p}" prefix="nt">
                                    <filterset>
                                        <filterset refid="my.site.tokens"/>
                                        <filterset refid="my.dev.tokens"/>
                                    </filterset>
                                </loadcscproperties>
                            </then>
                            <else>
                                <loadcscproperties file="${p}" prefix="nt">
                                    <filterset>
                                        <filterset refid="my.site.tokens"/>
                                    </filterset>
                                </loadcscproperties>
                            </else>
                        </if>

                        <propertycopy property="np.reqlibs"
                                      from="nt.csc.${file.name}.requiredlibs"/>

                        <!-- construct the LD_LIBRARY_PATH -->
                        <var name="procs.ld.library.path" value=""/>

                        <for list="${np.reqlibs}" delimiter=" " param="rt.lib">
                        <sequential>
                            <dirname file="@{rt.lib}" property="lib.path"/>

                            <if>
                                <not>
                                    <contains string="${procs.ld.library.path}"
                                              substring="${lib.path}"/>
                                </not>
                                <then>
                                    <var name="p" value="${PS}${lib.path}"/>
                                    <var name="procs.ld.library.path"
                                         value="${procs.ld.library.path}${p}"/>
                                </then>
                            </if>

                            <!-- unset properties -->
                            <xvar name="lib.path" unset="true"/>
                        </sequential>
                        </for>
                    </then>
                    <else>
                        <fail message="could not find ${file.name} in ${p}."/>
                    </else>
                </if>

                <!-- unset properties -->
                <propertyselector property="nt.props"
                                  match="^nt\.(.*)" select="\1"/>

                <for list="${nt.props}" param="p">
                    <sequential>
                        <xvar name="nt.@{p}" unset="true"/>
                    </sequential>
                </for>

                <xvar name="nt.props"         unset="true"/>
                <xvar name="owner"            unset="true"/>
                <xvar name="csci.loc"         unset="true"/>
                <xvar name="csci.dirname"     unset="true"/>
                <xvar name="file.name"        unset="true"/>
                <xvar name="csc.path"         unset="true"/>
                <xvar name="fqn.filename"     unset="true"/>
                <xvar name="np.reqlibs"       unset="true"/>
                <xvar name="fqn.file.dirname" unset="true"/>
            </sequential>
        </for>
    </target>


    <!-- =======================================================================
        The "-create-needed-jars-env" target constructs the CLASSPATH and the
        LD_LIBRARY_PATH so that the needed jars can be located by the JAVA apps.
    -->
    <target name="-create-needed-jars-env">
        <var name="neededjarfiles.classpath" value=""/>

        <for list="${rt.neededjarfiles}" delimiter=" " param="file">
            <sequential>
                <!-- determine the CSCI which "owns" the file -->
                <selecttoken string="@{file}" delimiter="/" tokenNumber="0"
                             property="owner"/>

                <!-- get the parent of the CSCI directory -->
                <propertycopy property="csci.loc"
                              from="config.${owner}.location"/>
                <dirname file="${csci.loc}" property="csci.dirname"/>

                <!-- determine the path to the CSC directory -->
                <dirname file="${csci.dirname}${FS}@{file}"
                         property="csc.path"/>

                <!--
                    look for "file" in the CSC delivery lib directory first
                    because there is more chances that it's a lib than an exe.
                -->

                <!--
                    look for "file" in the CSC delivery bin directory first
                    because there is more chances that it's an exe than a lib.
                -->

                <var name="p" value="${csc.path}${FS}"/>
                <var name="p" value="${p}java${FS}"/>
                <var name="p" value="${p}${config.delivery.dir}${FS}"/>
                <var name="p" value="${p}${config.delivery.executable.dir}"/>

                <propertycopy property="csci.orb" silent="true"
                              from="config.${rt.csc.owner}.java.orb"/>

                <propertycopy property="csci.orb.ver" silent="true"
                              from="config.${rt.csc.owner}.java.orb.ver"/>

                <if>
                    <isset property="csci.orb"/>
                    <then>
                        <var name="p"
                             value="${p}${FS}${csci.orb}-${csci.orb.ver}"/>
                    </then>
                </if>

                <basename file="@{file}" property="file.name"/>

                <if>
                    <available file="${p}" type="dir"/>
                    <then>
                        <findfile dir="${p}" file="${file.name}.jar"
                                  findFirst="true" recursive="true"
                                  property="fqn.filename"/>
                    </then>
                </if>

                <if>
                    <not><isset property="fqn.filename"/></not>
                    <then>
                        <!-- bad luck, let's took into the lib directory -->
                        <var name="p" value="${csc.path}${FS}"/>
                        <var name="p" value="${p}java${FS}"/>
                        <var name="p" value="${p}${config.delivery.dir}${FS}"/>
                        <var name="p"
                             value="${p}${config.delivery.library.dir}"/>

                        <if>
                            <isset property="csci.orb"/>
                            <then>
                                <var name="p" value="${p}${FS}${csci.orb}"/>
                                <var name="p" value="${p}-${csci.orb.ver}"/>

                                <!-- unset properties -->
                                <xvar name="csci.orb"     unset="true"/>
                                <xvar name="csci.orb.ver" unset="true"/>
                            </then>
                        </if>

                        <if>
                            <available file="${p}" type="dir"/>
                            <then>
                                <findfile dir="${p}" file="lib*${file.name}.jar"
                                          findFirst="true" recursive="true"
                                          property="fqn.filename"/>
                            </then>
                        </if>
                    </then>
                </if>

                <if>
                    <isset property="fqn.filename"/>
                    <then>
                        <!-- load the CSC properties file -->
                        <var name="p" value="${csc.path}${FS}java${FS}"/>
                        <var name="p" value="${p}${config.csc.data.dir}${FS}"/>
                        <var name="p"
                             value="${p}${config.csc.properties.file}"/>

                        <var name="f" value="${config.Build.location}${FS}configuration${FS}"/>
                        <var name="f" value="${f}${config.csc.data.dir}${FS}DepsInfo.properties"/>
                        <property file="${f}"/>

                        <if>
                            <available file="${dev.tokens.file}" type="file"/>
                            <then>
                                <loadcscproperties file="${p}" prefix="nt">
                                    <filterset>
                                        <filterset refid="my.site.tokens"/>
                                        <filterset refid="my.dev.tokens"/>
                                    </filterset>
                                </loadcscproperties>
                            </then>
                            <else>
                                <loadcscproperties file="${p}" prefix="nt">
                                    <filterset>
                                        <filterset refid="my.site.tokens"/>
                                    </filterset>
                                </loadcscproperties>
                            </else>
                        </if>

                        <!-- construct the CLASSPATH -->
                        <propertycopy property="nj.reqlibs"
                                      from="nt.csc.${file.name}.requiredlibs"/>

                        <var name="cp" value="${nj.reqlibs}${PS}"/>
                        <var name="cp" value="${cp}${fqn.filename}"/>

                        <if>
                            <equals arg1="${neededjarfiles.classpath}"
                                    arg2="" trim="true"/>

                            <then>
                                <var name="neededjarfiles.classpath"
                                     value="${cp}"/>
                            </then>
                            <else>
                                <var name="neededjarfiles.classpath"
                                value="${neededjarfiles.classpath}${PS}${cp}"/>
                            </else>
                        </if>

                        <!-- construct the LD_LIBRARY_PATH -->
                        <if>
                            <not><isset property="jni.ld.library.path" /></not>
                            <then>
                                <var name="jni.ld.library.path" value=""/>
                            </then>
                        </if>

                        <propertycopy property="nj.reqjnilibs" silent="true"
                            from="nt.csc.${file.name}.requiredjnilibs"/>

                        <if>
                            <not><isset property="nj.reqjnilibs"/></not>
                            <then>
                                <!--
                                <property name="nj.reqjnilibs" value=""/>
                                -->
                                <if>
                                    <contains
                                        string="${neededjarfiles.classpath}"
                                        substring="ossupport"
                                    />
                                    <then>
                                        <constructlibjniossupportpath
                                            property="nj.reqjnilibs"
                                        />
                                    </then>
                                </if>
                            </then>
                        </if>

                        <for list="${nj.reqjnilibs}" delimiter=" "
                             param="rt.lib">
                        <sequential>
                            <dirname file="@{rt.lib}" property="lib.path"/>

                            <if>
                                <not>
                                    <contains string="${jni.ld.library.path}"
                                              substring="${lib.path}"/>
                                </not>
                                <then>
                                    <var name="p" value="${PS}${lib.path}"/>
                                    <var name="jni.ld.library.path"
                                         value="${jni.ld.library.path}${p}"/>
                                </then>
                            </if>

                            <!-- unset properties -->
                            <xvar name="lib.path" unset="true"/>
                        </sequential>
                        </for>
                    </then>
                    <else>
                        <fail message="could not find ${file.name} in ${p}."/>
                    </else>
                </if>

                <!-- unset properties -->
                <propertyselector property="nt.props"
                                  match="^nt\.(.*)" select="\1"/>

                <for list="${nt.props}" param="p">
                    <sequential>
                        <xvar name="nt.@{p}" unset="true"/>
                    </sequential>
                </for>

                <xvar name="nt.props"      unset="true"/>
                <xvar name="owner"         unset="true"/>
                <xvar name="csci.loc"      unset="true"/>
                <xvar name="csci.dirname"  unset="true"/>
                <xvar name="file.name"     unset="true"/>
                <xvar name="csc.path"      unset="true"/>
                <xvar name="fqn.filename"  unset="true"/>
                <xvar name="nj.reqlibs"    unset="true"/>
                <xvar name="nj.reqjnilibs" unset="true"/>
            </sequential>
        </for>
    </target>


    <!-- =======================================================================
        The "-exec-test" target runs the runtest ANT build file.

        It depends on the following targets:
    -->
    <target name="-exec-test">
        <!-- determine the runtest ANT build file to call -->
        <switch value="${rt.csc.lang}">
            <!-- C++ -->
            <case value="c++">
                <property name="runtest.xml" value="RunTestCPP.xml"/>
            </case>

            <!-- JAVA -->
            <case value="java">
                <property name="runtest.xml" value="RunTestJAVA.xml"/>

                <!-- determine the main class -->
                <property name="java.src.dir"
                    location="${rt.csc.test}${FS}${config.csc.java.src.dir}"/>

                <if>
                    <available file="${java.src.dir}" type="dir"/>
                    <then>
                        <findfile dir="${java.src.dir}" file="MainTest.java"
                                  recursive="true" findFirst="true"
                                  property="rt.main.java"/>

                        <xvar name="java.src.dir" unset="true"/>

                        <if>
                            <isset property="rt.main.java"/>
                            <then>
                                <loadfile srcFile="${rt.main.java}"
                                          property="test.package">

                                    <filterchain>
                                        <linecontains>
                                            <contains value="package"/>
                                        </linecontains>
                                    </filterchain>
                                </loadfile>

                                <!-- remove ";" -->
                                <selecttoken
                                    string="${test.package}" delimiter=";"
                                    tokenNumber="0" property="test.package"
                                    override="true"/>

                                <!-- remove the reserved word "package" -->
                                <selecttoken
                                    string="${test.package}"
                                    delimiter="package " tokenNumber="1"
                                    property="test.package" override="true"/>
                            </then>
                        </if>

                        <!-- set the classpath -->
                        <var name="p"
                             value="${runtest.dir}${FS}${rt.test}.jar"/>

                        <if>
                            <available file="${p}" type="file"/>
                            <then>
                                <var name="my.classpath"
                                     value="${my.classpath}${PS}${p}"/>
                            </then>
                        </if>
                    </then>
                </if>

                <if>
                    <equals arg1="${my.classpath}" arg2="" trim="true"/>
                    <then>
                        <var name="my.classpath"
                             value="${neededjarfiles.classpath}"/>
                    </then>
                    <else>
                        <var name="my.classpath"
                        value="${my.classpath}${PS}${neededjarfiles.classpath}"/>
                    </else>
                </if>
            </case>

            <!-- ADA -->
            <case value="ada">
                <property name="runtest.xml" value="RunTestADA.xml"/>
                <!-- TODO -->
            </case>
        </switch>

        <!-- copy the build file into the runtest directory -->
        <copy file="${config.csc.data.dir}${FS}${runtest.xml}"
              todir="${runtest.dir}" verbose="false"/>

        <propertycopy name="rt.testattributes" silent="true"
                      from="rt.csc.${rt.test}.testattributes"/>

        <propertycopy name="rt.nb.testable" silent="true"
                      from="rt.csc.${rt.test}.nbtestable"/>

        <propertycopy property="rt.maxwait"
                      from="rt.csc.${rt.test}.maxwait" />

        <trycatch property="rt.execution.error">
            <try>
                <limit maxwait="${rt.maxwait}">
                    <ant dir="${runtest.dir}" antfile="${runtest.xml}" />
                    <property name="rt.maxwait.unexceeded" value="true" />
                </limit>

                <if>
                    <not><isset property="rt.maxwait.unexceeded" /></not>
                    <then>
                        <var name="s"
                             value="WARNING: The build system has stopped" />
                        <var name="s"
                             value="${s} the execution of the test because" />
                        <var name="s"
                             value="${s} it has exceeded its max running" />
                        <var name="s"
                             value="${s} time (${rt.maxwait} seconds)." />
                        <echo message="${s}" />

                        <!-- try to kill left-over processes -->

                        <!-- static list of processes to kill -->
                        <var name="rt.procs" value="Naming_Service" />
                        <var name="rt.procs"
                             value="${rt.procs} IFR_Service" />

                        <!-- list of processes required by the test -->
                        <propertycopy
                            name="rt.neededprocesses"
                            silent="true"
                            from="rt.csc.${rt.test}.neededprocesses"
                        />

                        <if>
                            <isset property="rt.neededprocesses" />
                            <then>
                                <for list="${rt.neededprocesses}"
                                     param="proc"
                                     delimiter=" ">

                                    <sequential>
                                        <basename
                                            file="@{proc}"
                                            property="proc.name"
                                        />

                                        <var name="rt.procs"
                                             value="${rt.procs} ${proc.name}" />

                                        <xvar name="proc.name" unset="true" />
                                    </sequential>
                                </for>

                                <xvar name="rt.neededprocesses" unset="true" />
                            </then>
                        </if>

                        <!-- id of the current user -->
                        <exec executable="id" outputproperty="user.id">
                            <arg value="-u" />
                        </exec>

                        <for list="${rt.procs}"
                             param="proc"
                             delimiter=" ">

                            <sequential>
                                <!--
                                    select only the processes owned by the user
                                    and kill them.
                                -->
                                <exec executable="pkill"
                                       errorproperty="pkill.errmsg">

                                    <arg value="-9" />
                                    <arg line="-u ${user.id}" />
                                    <arg line="-f @{proc}" />
                                </exec>
                            </sequential>
                        </for>
                    </then>
                </if>

                <!-- unset properties -->
                <xvar name="rt.maxwait.unexceeded" unset="true" />
            </try>
            <catch>
                <echo file="${testlog.check}" append="true">
[TEST] ${rt.csc.test}
+ 
|   ### NO EXECUTABLE FOUND. PLEASE COMPILE THE CSC ###
+--------------------------------------------------------------------+
                </echo>
            </catch>
        </trycatch>

        <if>
            <equals arg1="${rt.csc.lang}" arg2="c++" trim="true"/>
            <then>
                <!-- is there at least one core dump file ? -->
                <findfile dir="${rt.csc.test}" file="core*" recursive="true"
                          property="rt.core.file" findFirst="true"/>

                <if>
                    <isset property="rt.core.file"/>
                    <then>
                        <echo file="${result.test.file}" append="true">
[TEST] ${rt.csc.test}
+ 
|   ### THE CSC HAS PRODUCED CORE DUMP FILE(S) ###
+--------------------------------------------------------------------+
                        </echo>
                    </then>
                </if>
            </then>
        </if>

        <!-- how many tests did succeed ? -->

        <!-- read the test output -->
        <loadfile srcFile="${test.out}" property="rt.test.out.content"/>

        <!-- record it into the report -->
        <echo file="${runtest.log}" append="true"
              message="[CSC] ${rt.csc.test}${LS}"/>
        <echo file="${runtest.log}" append="true"
              message="${rt.test.out.content}"/>

        <!-- count -->
        <stringmanip property="rt.nb.tests.ok" action="occurrences"
                     string="${rt.test.out.content}" substring="TESTABLE_OK"/>

        <!-- print summary -->
        <if>
            <equals arg1="${rt.nb.testable}" arg2="${rt.nb.tests.ok}"
                    trim="true"/>
            <then>
                <echo file="${testlog.check}" append="true">
[TEST] ${rt.csc.test}
+ 
|   TEST OK
+--------------------------------------------------------------------+
                </echo>
            </then>
            <else>
                <echo file="${testlog.check}" append="true">
[TEST] ${rt.csc.test}
+ 
|   ### TEST FAILED ###
|       Testable objects to check            : ${rt.nb.testable}
|       Testable objects sucessfully checked : ${rt.nb.tests.ok}
+--------------------------------------------------------------------+
                </echo>
            </else>
        </if>

        <!-- unset properties -->
        <xvar name="rt.testattributes" unset="true"/>
        <xvar name="rt.nb.testable"    unset="true"/>
        <xvar name="rt.nb.tests.ok"    unset="true"/>
        <xvar name="rt.core.file"      unset="true"/>
    </target>


</project>

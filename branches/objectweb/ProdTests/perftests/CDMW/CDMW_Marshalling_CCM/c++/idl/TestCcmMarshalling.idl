/* ========================================================================== *
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI.
 * 
 * It is derivative work based on PERCO Copyright (C) THALES 2000-2003.
 * All rights reserved.
 *
 * CARDAMOM is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Library General Public License as published by the
 * Free Software Foundation; either version 2 of the License, or (at your
 * option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General
 * Public License along with CARDAMOM; see the file COPYING. If not, write to
 * the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 * ========================================================================= */
 
#ifndef  TESTCCMMARSHALLING_IDL_
#define  TESTCCMMARSHALLING_IDL_
#include <Components.idl>

module Marshalling{

  //type record (8 byte) 
  struct RecordStruct{
    long l;
    float f;
  };
  //definition of sequence
  typedef sequence<long>  LongSeq;
  typedef sequence<float> FloatSeq;
  typedef sequence<RecordStruct> RecordSeq;

  //this class performs invocation tests
  interface TestPing{
    
    //test for syncronous invocation
    void long_ping(in LongSeq l_seq);
    void float_ping(in FloatSeq f_seq);
    void any_ping(in any a);
    void record_ping(in RecordSeq r_seq);
    void invocation_ping();

    //test for asyncronous invocation
    oneway void ow_long_ping(in LongSeq l_seq);
    oneway void ow_float_ping(in FloatSeq f_seq);
    oneway void ow_any_ping(in any a);
    oneway void ow_record_ping(in RecordSeq r_seq);
    oneway void ow_invocation_ping();
  };

  // CCM server definition part
  /**
   **  The Server component type.
   **/
  component Server
  {
    /**
     **  The facet for Clients components.
     **/
    provides Marshalling::TestPing server_facet;
  };

  /**
   **  Simple home for instantiating Server components.
   **/
  home ServerHome manages Server
  {
  };

};

#endif // TESTCCMMARSHALLING_IDL_


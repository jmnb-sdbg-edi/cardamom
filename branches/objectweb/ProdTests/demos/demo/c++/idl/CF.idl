/* =========================================================================== *
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI.
 * 
 * It is derivative work based on PERCO Copyright (C) THALES 2000-2003.
 * All rights reserved.
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Library General Public License as published by the
 * Free Software Foundation; either version 2 of the License, or (at your
 * option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General
 * Public License along with CARDAMOM; see the file COPYING. If not, write to
 * the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 * =========================================================================== */


#ifndef CORE_FRAMEWORK_IDL_
#define CORE_FRAMEWORK_IDL_

#include <CosLifeCycle.idl>

#pragma prefix "thalesgroup.com"

// Example inspired from Software Defined Radio (JTRS)

module CF {

    // This type is a CORBA IDL struct type which can be
    // used to hold any CORBA basic type or static IDL
    // type.
    struct DataType {
        // The id attribute indicates the kind of value (e.g.,
        // frequency, preset, etc.).
        string id;
        // The value attribute can be any static IDL type or
        // CORBA basic type.
        any value;
    };

    // The Properties is a CORBA IDL unbounded sequence of
    // DataType(s), which can be used in defining a
    // sequence of name and value pairs.
    typedef sequence <DataType> Properties;

	// Device == 1; Applicatin == 2
    typedef unsigned short ResourceNumType;
    // This exception indicates the resource number does
    // not exist (in the ResourceFactory...).
    exception InvalidResourceNumber {};

    // This type defines a sequence of strings
    typedef sequence <string> StringSequence;
        
    // This exception indicates an error occurred during
    // component initialization. The messages provides
    // additional information describing the reason why
    // the error occurred.
    exception InvalidProperties {
        StringSequence error_messages;
    };

    //
    exception CreationError {
        StringSequence error_messages;
    };

    
    //**********************************
    //            RESOURCE
    //**********************************
    interface Resource {
        exception StartError {
            string msg;
        };
        exception StopError {
            string msg;
        };

        // The purpose of this operation is to allow an object
        // implementing this interface to transition to steady
        // state operation.
        void start()
            raises( StartError );

        // The purpose of this operation is to allow an object
        // implementing this interface to transition from
        // steady state operation to idle.
        void stop()
            raises( StopError );
    };

    //**********************************
    //            DEVICE
    //**********************************
    interface Device : Resource {

        enum UsageType {
            IDLE,
            ACTIVE,
            BUSY
        };

        readonly attribute UsageType state;
        
        typedef string Location;

        exception InvalidLocation {};
        
        // This attribute attribute is the physical location
        // label for this device.
        readonly attribute Location label;
    };

   
    // The following IDL exception type is raised when the
    // create request is valid but the Application is
    // unsuccessfully instantiated due to internal
    // processing errors.
    exception CreateApplicationError {
        StringSequence error_messages;
    };

    
    //**********************************
    //           APPLICATION
    //**********************************
    interface Application : Resource, CosLifeCycle::LifeCycleObject {
        readonly attribute string name;
    };
    
}; // module CF

#endif // CORE_FRAMEWORK_IDL_



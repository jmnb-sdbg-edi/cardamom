/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES 
 * and SELEX-SI. 
 * 
 * It is derivative work based on PERCO Copyright (C) THALES 2000-2003. 
 * All rights reserved.
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it under 
 * the terms of the GNU Library General Public License as published by the
 * Free Software Foundation; either version 2 of the License, or (at your 
 * option) any later version. 
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public 
 * License for more details. 
 * 
 * You should have received a copy of the GNU Library General 
 * Public License along with CARDAMOM; see the file COPYING. If not, write to 
 * the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */


//File automatically generated by smc compiler on Tue Nov 14 16:19:12 2000
//DO NOT EDIT!
#include "naminginterface/Cdmw_NamingInterface_NameParserFSM.hpp"

static char _versID[] = "Version Cdmw_NamingInterface_NameParserFSM.cpp,v 1.8.2.1 2004/09/01";
Cdmw_NamingInterface_NameParserFSMEscExtensionState Cdmw_NamingInterface_NameParserFSM::EscExtensionState;
Cdmw_NamingInterface_NameParserFSMEscBasenameState Cdmw_NamingInterface_NameParserFSM::EscBasenameState;
Cdmw_NamingInterface_NameParserFSMExtensionState Cdmw_NamingInterface_NameParserFSM::ExtensionState;
Cdmw_NamingInterface_NameParserFSMBasenameState Cdmw_NamingInterface_NameParserFSM::BasenameState;
void Cdmw_NamingInterface_NameParserFSMState::other(Cdmw_NamingInterface_NameParserFSM& s)
{
    s.FSMError("other", s.GetState().StateName());
}

void Cdmw_NamingInterface_NameParserFSMState::eos(Cdmw_NamingInterface_NameParserFSM& s)
{
    s.FSMError("eos", s.GetState().StateName());
}

void Cdmw_NamingInterface_NameParserFSMState::back_slash(Cdmw_NamingInterface_NameParserFSM& s)
{
    s.FSMError("back_slash", s.GetState().StateName());
}

void Cdmw_NamingInterface_NameParserFSMState::slash(Cdmw_NamingInterface_NameParserFSM& s)
{
    s.FSMError("slash", s.GetState().StateName());
}

void Cdmw_NamingInterface_NameParserFSMState::dot(Cdmw_NamingInterface_NameParserFSM& s)
{
    s.FSMError("dot", s.GetState().StateName());
}

void Cdmw_NamingInterface_NameParserFSMEscExtensionState::eos(Cdmw_NamingInterface_NameParserFSM& s)
{
    s.SetState(Cdmw_NamingInterface_NameParserFSM::EscExtensionState);
    s.unexpected_eos();
}

void Cdmw_NamingInterface_NameParserFSMEscExtensionState::back_slash(Cdmw_NamingInterface_NameParserFSM& s)
{
    s.SetState(Cdmw_NamingInterface_NameParserFSM::ExtensionState);
    s.put_char_in_kind();
}

void Cdmw_NamingInterface_NameParserFSMEscExtensionState::slash(Cdmw_NamingInterface_NameParserFSM& s)
{
    s.SetState(Cdmw_NamingInterface_NameParserFSM::ExtensionState);
    s.put_char_in_kind();
}

void Cdmw_NamingInterface_NameParserFSMEscExtensionState::dot(Cdmw_NamingInterface_NameParserFSM& s)
{
    s.SetState(Cdmw_NamingInterface_NameParserFSM::ExtensionState);
    s.put_char_in_kind();
}

void Cdmw_NamingInterface_NameParserFSMEscBasenameState::eos(Cdmw_NamingInterface_NameParserFSM& s)
{
    s.SetState(Cdmw_NamingInterface_NameParserFSM::EscBasenameState);
    s.unexpected_eos();
}

void Cdmw_NamingInterface_NameParserFSMEscBasenameState::back_slash(Cdmw_NamingInterface_NameParserFSM& s)
{
    s.SetState(Cdmw_NamingInterface_NameParserFSM::BasenameState);
    s.put_char_in_id();
}

void Cdmw_NamingInterface_NameParserFSMEscBasenameState::slash(Cdmw_NamingInterface_NameParserFSM& s)
{
    s.SetState(Cdmw_NamingInterface_NameParserFSM::BasenameState);
    s.put_char_in_id();
}

void Cdmw_NamingInterface_NameParserFSMEscBasenameState::dot(Cdmw_NamingInterface_NameParserFSM& s)
{
    s.SetState(Cdmw_NamingInterface_NameParserFSM::BasenameState);
    s.put_char_in_id();
}

void Cdmw_NamingInterface_NameParserFSMExtensionState::other(Cdmw_NamingInterface_NameParserFSM& s)
{
    s.SetState(Cdmw_NamingInterface_NameParserFSM::ExtensionState);
    s.put_char_in_kind();
}

void Cdmw_NamingInterface_NameParserFSMExtensionState::eos(Cdmw_NamingInterface_NameParserFSM& s)
{
    s.SetState(Cdmw_NamingInterface_NameParserFSM::ExtensionState);
    s.add_last_kind();
}

void Cdmw_NamingInterface_NameParserFSMExtensionState::back_slash(Cdmw_NamingInterface_NameParserFSM& s)
{
    s.SetState(Cdmw_NamingInterface_NameParserFSM::EscExtensionState);
}

void Cdmw_NamingInterface_NameParserFSMExtensionState::slash(Cdmw_NamingInterface_NameParserFSM& s)
{
    s.SetState(Cdmw_NamingInterface_NameParserFSM::BasenameState);
    s.add_name_component();
}

void Cdmw_NamingInterface_NameParserFSMBasenameState::other(Cdmw_NamingInterface_NameParserFSM& s)
{
    s.SetState(Cdmw_NamingInterface_NameParserFSM::BasenameState);
    s.put_char_in_id();
}

void Cdmw_NamingInterface_NameParserFSMBasenameState::eos(Cdmw_NamingInterface_NameParserFSM& s)
{
    s.SetState(Cdmw_NamingInterface_NameParserFSM::BasenameState);
    s.check_id_not_empty();
    s.add_last_id();
}

void Cdmw_NamingInterface_NameParserFSMBasenameState::back_slash(Cdmw_NamingInterface_NameParserFSM& s)
{
    s.SetState(Cdmw_NamingInterface_NameParserFSM::EscBasenameState);
}

void Cdmw_NamingInterface_NameParserFSMBasenameState::slash(Cdmw_NamingInterface_NameParserFSM& s)
{
    s.SetState(Cdmw_NamingInterface_NameParserFSM::BasenameState);
    s.check_id_not_empty();
    s.add_name_component();
}

void Cdmw_NamingInterface_NameParserFSMBasenameState::dot(Cdmw_NamingInterface_NameParserFSM& s)
{
    s.SetState(Cdmw_NamingInterface_NameParserFSM::ExtensionState);
}

Cdmw_NamingInterface_NameParserFSM::Cdmw_NamingInterface_NameParserFSM() : itsState(&BasenameState)
{}

/*keep gcc silent for not using  _versID[]*/

namespace
{
    void toto()
    {
        if (_versID)

            ;
    }
}


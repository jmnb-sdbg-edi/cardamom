/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES 
 * and SELEX-SI. 
 * 
 * It is derivative work based on PERCO Copyright (C) THALES 2000-2003. 
 * All rights reserved.
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it under 
 * the terms of the GNU Library General Public License as published by the
 * Free Software Foundation; either version 2 of the License, or (at your 
 * option) any later version. 
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public 
 * License for more details. 
 * 
 * You should have received a copy of the GNU Library General 
 * Public License along with CARDAMOM; see the file COPYING. If not, write to 
 * the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */


package cdmw.resources.test;

import cdmw.common.Assert;
import cdmw.common.BadOrderException;
import cdmw.common.BadParameterException;
import cdmw.common.InternalErrorException;

import cdmw.orbsupport.ExceptionMinorCodes;
import cdmw.orbsupport.CORBASystemExceptionWrapper;

import cdmw.namingandrepository.NamingInterface;
import cdmw.namingandrepository.RepositoryInterface;
import com.thalesgroup.CdmwNamingAndRepository.DEFAULT_ROOT_CONTEXT;
import com.thalesgroup.CdmwNamingAndRepository.RepositoryPackage.NoRootContext;

import cdmw.trace.FlushAreaMngr;
import cdmw.trace.TraceDomains;
import cdmw.trace.TraceLevels;
import cdmw.trace.Stream;

import cdmw.performance.PerformanceMngr;

import cdmw.cdmwinit.InitUtils;
import cdmw.cdmwinit.ProcessControl;
import cdmw.cdmwinit.CdmwProcessImpl;
import cdmw.cdmwinit.XMLErrorException;
import cdmw.cdmwinit.CdmwInitConfiguration;
import cdmw.cdmwinit.ConfigurationException;

import cdmw.lifecycle.POAThreadingPolicy;
import cdmw.lifecycle.ThreadPoolPolicy;
import cdmw.lifecycle.ThreadPerRequestPolicy;
import cdmw.lifecycle.SingleThreadPolicy;
import cdmw.lifecycle.AnonymousObjectsFactoryInitUtil;
import cdmw.lifecycle.NamedObjectsFactoryInitUtil;


/**
 * This class provides two main functions to initialize CDMW runtime
 * and services and to cleanup objects and data
 *
 */
public class CdmwInterface {

    /**
     * Initialise the CDMW runtime and services within the current process.
     * Implementation is generated by CDMW code generation tools according
     * to user provided description.
     *
     * @param orb  A reference to the ORB pseudo-object
     * @param args The arguments passed to the program
     *
     * @exception new BAD_PARAM Invalid parameter. The following CDMW minor
     * codes detail the reason:
     * <DL>
     * <DT><STRONG>BAD_PARAMApplicationAgentReferenceMissing</STRONG>
     * <DD>The Application Agent's reference is missing
     * from the command line arguments.
     * <DT><STRONG>BAD_PARAMInvalidApplicationAgentReference</STRONG>
     * <DD>The input IOR is nil or does not denote an Application Agent.
     * <DT><STRONG>BAD_PARAMProcessXMLFileNameMissing</STRONG>
     * <DD>The CDMW Process XML initialisation file name is missing
     * from the command line arguments.
     * <DT><STRONG>BAD_PARAMInvalidXMLInitData</STRONG>
     * <DD>Inivalid XML initialisation data.
     * <DT><STRONG>BAD_PARAMApplicationAgentReferenceMissing</STRONG>
     * <DD>The Application Agent's reference is missing from the command
     * line arguments.
     * <DT><STRONG>BAD_PARAMRepositoryNotFound</STRONG>
     * <DD>There is no CDMW Naming and Repository registered for
     * the current process within the Application Agent.
     * <DT><STRONG>BAD_PARAMUnknownProcessName</STRONG>
     * <DD>The process nameis not known by the Application Agent.
     * <DT><STRONG>BAD_PARAMCannotGetRepositoryReference</STRONG>
     * <DD>An error occurred during retrieval of the object reference
     * from the Application Agent.
     * <DT><STRONG>BAD_PARAMInvalidRepositoryReference</STRONG>
     * <DD>The object reference received from the Application Agent is
     * either nil or does not denote an CDMW Naming and Repository service.
     * <DT><STRONG>BAD_PARAMNameDomainNotFound</STRONG>
     * <DD>Default NameDomain is not a NameDomain.
     * <DT><STRONG>BAD_PARAMInvalidDefaultDomainName</STRONG>
     * <DD>Default NameDomain name is ill-formed.
     * <DT><STRONG>BAD_PARAMInvalidTraceAdminLocation</STRONG>
     * <DD>The location of the TraceAdmin object is not valid.
     * <DT><STRONG>BAD_PARAMLifeCycleFrameworkPOAExists</STRONG>
     * <DD>A POA with the same name as the LifeCycle POA already exists.
     * <DT><STRONG>BAD_PARAMLifeCycleFrameworkInit</STRONG>
     * <DD>Bad parameter for init of the LifeCycle framework
     * (Threading policy may not be valid)
     * </DL>
     * @exception INTERNAL Internal failure.The following CDMW minor codes
     * detail the reason:
     * <DL>
     * <DT><STRONG>INTERNALXMLLibraryError</STRONG>
     * <DD>Failure in XML library.
     * <DT><STRONG>INTERNAL</STRONG>
     * <DD>Internal CDMW runtime failure.
     * <DT><STRONG>INTERNALORBAdapterInactive</STRONG>
     * <DD>The POA Manager is in the <I>inactive</I> state.
     * <DT><STRONG>INTERNALCdmwRepositoryError</STRONG>
     * <DD>Failure within the CDMW Repository Error.
     * This may happen if the Trace collectors name domain is not present
     * in the Repository, or if the ADMIN_ROOT_CONTEXT_ID is not set.
     * <DT><STRONG>INTERNALInvalidTraceCollectorsLocation</STRONG>
     * <DD>The location of TraceCollectors is not valid.
     * <DT><STRONG>INTERNALCdmwRepositoryNotExists</STRONG>
     * <DD>The CDMW Repository object does not exist (has been deleted!)
     * <DT><STRONG>INTERNALLifeCycleFrameworkError</STRONG>
     * <DD>The LifeCycle framework has choosen a wrong policy for its POA.
     * </DL>
     * @exception TRANSIENT
     * The <STRONG>TRANSIENTCannotReachApplicationAgent</STRONG>
     * minor code indicates that it cannot reach the CDMW ApplicationAgent now.
     * @exception SystemException Any CORBA system exception that can be
     * raised by the undelying ORB.
     */
    public static void cdmwInit(
        org.omg.CORBA.ORB orb,
        String[] args,
        ProcessControl ctrl)
        throws org.omg.CORBA.SystemException {

        Assert.check(orb != null);
        boolean traceEnabled = false;

        try {

            // Get the XML init filename. This may raise BAD_PARAM or INTERNAL
            String xmlFile = InitUtils.getXmlInitialisationFile(args);
            System.out.println("XML file: " + xmlFile);

            // Get the XML documents validation option. This may raise INTERNAL
            boolean validateXml = InitUtils.getXmlValidationOption(args);

            // Parsing XML
            CdmwInitConfiguration xmlData = null;
            try {
                CdmwInitConfiguration init =
                    CdmwInitConfiguration.readConfiguration(
                        xmlFile,
                        validateXml);
                xmlData = init;
                System.out.println(
                    "Reading configuration..................ok.");
            } catch (InternalErrorException iee) {
                throw new org.omg.CORBA.BAD_PARAM(
                    ExceptionMinorCodes.BAD_PARAMInvalidXMLInitData,
                    org.omg.CORBA.CompletionStatus.COMPLETED_NO);
            } catch (ConfigurationException ce) {
                throw new org.omg.CORBA.BAD_PARAM(
                    ExceptionMinorCodes.BAD_PARAMInvalidXMLInitData,
                    org.omg.CORBA.CompletionStatus.COMPLETED_NO);
            }

            // *****************************************************************
            // *****************  CDMW root POA and servant manager ***********
            // *****************************************************************

            // Create the CDMW root POA. It has its own POA Manager
            // May raise a org.omg.CORBA.SystemException.
            org.omg.PortableServer.POA cdmwRootPOA =
                InitUtils.createCdmwRootPOA(orb);

            org.omg.PortableServer.POAManager poaManager =
                cdmwRootPOA.the_POAManager();

            // Initialize the server so that incoming requests are
            // handled from this point on
            // May raise org.omg.PortableServer.POAManager.AdapterInactive
            // or org.omg.CORBA.SystemException
            try {
                poaManager.activate(); // TODO: maybe move it ?
            } catch (
                org.omg.PortableServer.POAManagerPackage.AdapterInactive ai) {
                // TODO: Add trace logs here
                throw new org.omg.CORBA.INTERNAL(
                    ExceptionMinorCodes.INTERNALORBAdapterInactive,
                    org.omg.CORBA.CompletionStatus.COMPLETED_NO);
            }

            // *****************************************************************
            // *****************  INIT platforminterface object  **************
            // *****************************************************************

            CdmwProcessImpl processImpl =
                new CdmwProcessImpl(
                    orb,
                    InitUtils.getRootPOA(orb),
                    cdmwRootPOA,
                    ctrl);
            com.thalesgroup.CdmwPlatformMngt.Process initProcess =
                processImpl._this(orb);
            InitUtils.initPlatformInterface(orb, args, initProcess);
            // TODO: (NOTA)
            //  From now on, a platform supervisor may initiate a call to
            //  process.init() method.
            //  - Shall we disable this until init of CDMW Services has completed?
            //    We need acknowledge creation to get the process name...etc.
            //  - Shall we complete init of CDMW services in process.init()?
            //  - Shall we just block process->init() call until CDMW init has
            //    completed?
            //  - Shall we pospone activation of the POA manager until CDMW init has
            //    completed?

            // Get the process name.
            // This may raise org.omg.CORBA.BAD_INV_ORDER
            String processName = InitUtils.getCdmwProcessName();

            // Get the process name.
            // This may raise org.omg.CORBA.BAD_INV_ORDER
            String applicationName = InitUtils.getCdmwApplicationName();

            // Retrieve Repository object reference.
            // This may raise org.omg.CORBA.BAD_PARAM
            com.thalesgroup.CdmwNamingAndRepository.Repository repository =
                InitUtils.getCdmwRepository();
            System.out.println("Repository object reference............ok.");

            // *****************************************************************
            // *****************  INIT of RepositoryInterface ******************
            // *****************************************************************
            String defaultDomaineName = "";

            try {
                defaultDomaineName =
                    xmlData.getServiceAttributeValue(
                        "repository-interface",
                        "default-domain-name");
                System.out.println(
                    "Getting default domain name............ok.");
            } catch (BadParameterException bpe) {
                processImpl.setCdmwInitExceptionRaised();
                throw new org.omg.CORBA.BAD_PARAM(
                    ExceptionMinorCodes.BAD_PARAMInvalidXMLInitData,
                    org.omg.CORBA.CompletionStatus.COMPLETED_NO);
            } catch (XMLErrorException xmle) {
                processImpl.setCdmwInitExceptionRaised();
                throw new org.omg.CORBA.BAD_PARAM(
                    ExceptionMinorCodes.BAD_PARAMInvalidXMLInitData,
                    org.omg.CORBA.CompletionStatus.COMPLETED_NO);
            }

            try {
                RepositoryInterface.init(defaultDomaineName, repository);
                System.out.println(
                    "Initializing repository interface......ok.");
            } catch (
                com.thalesgroup.CdmwNamingAndRepository.NoNameDomain nnd) {
                processImpl.setCdmwInitExceptionRaised();
                // Default NameDomain is not a NameDomain!
                throw new org.omg.CORBA.BAD_PARAM(
                    ExceptionMinorCodes.BAD_PARAMNameDomainNotFound,
                    org.omg.CORBA.CompletionStatus.COMPLETED_NO);
            } catch (com.thalesgroup.CdmwNamingAndRepository.InvalidName in) {
                processImpl.setCdmwInitExceptionRaised();
                // Default NameDomain name is ill-formed!
                throw new org.omg.CORBA.BAD_PARAM(
                    ExceptionMinorCodes.BAD_PARAMInvalidDefaultDomainName,
                    org.omg.CORBA.CompletionStatus.COMPLETED_NO);
            }

            // *****************************************************************
            // *********         Init The CDMW Trace Library          *********
            // *****************************************************************

            String res;
            int flushingTime = 0;
            int nbFlushArea = 0;
            int sizeFlushArea = 0;
            String collectorName;
            java.util.Vector collectorNameList = new java.util.Vector();

            try {
                try {
                    flushingTime = Integer.parseInt(
                        xmlData.getServiceAttributeValue(
                            "trace",
                            "flushing-time"));
                    nbFlushArea = Integer.parseInt(
                        xmlData.getServiceAttributeValue(
                            "trace",
                            "flush-area-nb"));
                    sizeFlushArea = Integer.parseInt(
                        xmlData.getServiceAttributeValue(
                            "trace",
                            "flush-area-sz"));
                    System.out.println(
                        "Getting trace lib parameters...........ok.");
                    traceEnabled = true;
                } catch (BadParameterException bpe) {
                    // do not throw an exception : this service is optional
                    // we should do :
                    //processImpl.setCdmwInitExceptionRaised();
                    //throw new org.omg.CORBA.BAD_PARAM(
                    //    ExceptionMinorCodes.BAD_PARAMInvalidXMLInitData,
                    //    org.omg.CORBA.CompletionStatus.COMPLETED_NO);
                }

                try {
                    collectorName =
                        xmlData.getServiceAttributeValue(
                            "trace",
                            "collector-name");
                    collectorNameList.add(collectorName);
                } catch (BadParameterException bpe) {
                    // do nothing : parameter is optional
                }

            } catch (XMLErrorException xee) {
                processImpl.setCdmwInitExceptionRaised();
                throw new org.omg.CORBA.BAD_PARAM(
                    ExceptionMinorCodes.BAD_PARAMInvalidXMLInitData,
                    org.omg.CORBA.CompletionStatus.COMPLETED_NO);
            } catch (NumberFormatException nfe) {
                processImpl.setCdmwInitExceptionRaised();
                throw new org.omg.CORBA.BAD_PARAM(
                    ExceptionMinorCodes.BAD_PARAMInvalidXMLInitData,
                    org.omg.CORBA.CompletionStatus.COMPLETED_NO);
            }

            if (traceEnabled) {
                // May raise org.omg.CORBA.SystemException
                cdmw.trace.InitUtils.initTraceLibrary(
                    cdmwRootPOA,
                    applicationName,
                    processName,
                    flushingTime,
                    nbFlushArea,
                    sizeFlushArea,
                    collectorNameList);

                // active the trace flushing to trace collector
                FlushAreaMngr.getInstance().activateFlushing();

                System.out.println(
                    "Initializing trace lib.................ok.");
            }

            // *****************************************************************
            // *********         Init The CDMW Performance Library    *********
            // *****************************************************************

            String performanceFileName = null;
            try {
                performanceFileName =
                    xmlData.getServiceAttributeValue(
                        "performance",
                        "result-file-name");
            } catch (BadParameterException bpe) {
                // do not throw an exception : this service is optional
                // we should do:
                //processImpl.setCdmwInitExceptionRaised();
                //throw new org.omg.CORBA.BAD_PARAM(
                //    ExceptionMinorCodes.BAD_PARAMInvalidXMLInitData,
                //    org.omg.CORBA.CompletionStatus.COMPLETED_NO);
            } catch (XMLErrorException xee) {
                processImpl.setCdmwInitExceptionRaised();
                throw new org.omg.CORBA.BAD_PARAM(
                    ExceptionMinorCodes.BAD_PARAMInvalidXMLInitData,
                    org.omg.CORBA.CompletionStatus.COMPLETED_NO);
            }

            // May raise org.omg.CORBA.SystemException
            if (performanceFileName != null) {
                cdmw.performance.InitUtils.initPerformanceLibrary(
                    cdmwRootPOA,
                    performanceFileName);
                System.out.println(
                    "Initializing performance lib...........ok.");
            }

            // *****************************************************************
            // *********  Create CDMW Factories POA (persistent POA)  *********
            // *****************************************************************
            // Raises org.omg.CORBA.SystemException
            org.omg.PortableServer.POA factoriesPOA =
                InitUtils.createCdmwLifeCyclePOA(cdmwRootPOA);
            System.out.println("Creation of the CDMW factories POA....ok.");

            // Create CDMW factories

            org.omg.CosNaming.NamingContext ncRootContext = null;
            try {
                ncRootContext = 
                    repository.resolve_root_context(DEFAULT_ROOT_CONTEXT.value);
                System.out.println(
                    "Resolving root context.................ok.");
            } catch (NoRootContext nrc) {
                processImpl.setCdmwInitExceptionRaised();
                throw new org.omg.CORBA.INTERNAL(
                    ExceptionMinorCodes.INTERNALCdmwRepositoryError,
                    org.omg.CORBA.CompletionStatus.COMPLETED_NO);
            } catch (org.omg.CORBA.SystemException se) {
                processImpl.setCdmwInitExceptionRaised();
                throw se; // TODO: Add trace logs here
            }

            // May raise a org.omg.CORBA.SystemException
            NamingInterface rootContext = new NamingInterface(ncRootContext);

            // *****************************************************************
            // *********  cdmw.resources.EntityResourceFactoryImpl ************
            // *****************************************************************
            String fullNameDomainName = "";
            String fullFactoryName = "";
            POAThreadingPolicy threadingPolicy = null;

            try {
                fullNameDomainName =
                    xmlData.getFrameworkAttributeValue(
                        "first.framework",
                        0,
                        "domain-name");
                fullFactoryName =
                    xmlData.getFrameworkAttributeValue(
                        "first.framework",
                        0,
                        "full-factory-name");
                // TODO: If fullNameDomainName and fullFactoryName are empty
                // use default name domain

                String[] values =
                    xmlData.getFrameworkMultithreadAttribute(
                        "first.framework",
                        0);
                String xmlThreadingPolicy = values[0];
                String xmlThreadingAttribute = values[1];
                String xmlThreadingAttributeValue = values[2];

                if (!xmlThreadingPolicy.equals("serialize")) {
                    threadingPolicy = new SingleThreadPolicy();
                } else if (!xmlThreadingPolicy.equals("thread-per-request")) {
                    threadingPolicy = new ThreadPerRequestPolicy();
                } else if (!xmlThreadingPolicy.equals("thread-pool")) {
                    int threadPoolSize =
                        Integer.valueOf(xmlThreadingAttributeValue).intValue();
                    threadingPolicy = new ThreadPoolPolicy(threadPoolSize);
                }
            } catch (NumberFormatException nfe) {
                processImpl.setCdmwInitExceptionRaised();
                throw new org.omg.CORBA.BAD_PARAM(
                    ExceptionMinorCodes.BAD_PARAMInvalidXMLInitData,
                    org.omg.CORBA.CompletionStatus.COMPLETED_NO);
            } catch (BadParameterException bpe) {
                processImpl.setCdmwInitExceptionRaised();
                throw new org.omg.CORBA.BAD_PARAM(
                    ExceptionMinorCodes.BAD_PARAMInvalidXMLInitData,
                    org.omg.CORBA.CompletionStatus.COMPLETED_NO);
            } catch (XMLErrorException xee) {
                processImpl.setCdmwInitExceptionRaised();
                throw new org.omg.CORBA.BAD_PARAM(
                    ExceptionMinorCodes.BAD_PARAMInvalidXMLInitData,
                    org.omg.CORBA.CompletionStatus.COMPLETED_NO);
            }

            try {
                // Get the factory Allocator
                cdmw.resources.EntityResourceFactoryImplAllocator allocator = 
                    cdmw.resources.EntityResourceFactoryImplAllocator.theAllocator;
                
                NamedObjectsFactoryInitUtil
                    .setupNamedObjectFactory(
                        allocator,
                        orb,
                        factoriesPOA,
                        repository,
                        rootContext,
                        fullNameDomainName,
                        fullFactoryName,
                        "",
                // TODO:
                threadingPolicy, args);

                // TODO
                System.out.println(
                    "Set up of the factory <"
                        + "cdmw.resources.EntityResourceFactoryImpl"
                        + "> done.");

            } catch (BadParameterException bpe) {
                processImpl.setCdmwInitExceptionRaised();
                // TODO: Add trace logs here
                throw new org.omg.CORBA.BAD_PARAM(
                    ExceptionMinorCodes.BAD_PARAMLifeCycleFrameworkInit,
                    org.omg.CORBA.CompletionStatus.COMPLETED_NO);
            } catch (InternalErrorException iie) {
                processImpl.setCdmwInitExceptionRaised();
                // TODO: Add trace logs here
                throw new org.omg.CORBA.INTERNAL(
                    ExceptionMinorCodes.INTERNALLifeCycleFrameworkError,
                    org.omg.CORBA.CompletionStatus.COMPLETED_NO);
            }

            // *****************************************************************
            // *********  cdmw.resources.UnMngEntityResourceFactoryImpl *******
            // *****************************************************************

            fullNameDomainName = "";
            fullFactoryName = "";
            threadingPolicy = null;

            try {
                fullNameDomainName =
                    xmlData.getFrameworkAttributeValue(
                        "fourth.framework",
                        0,
                        "domain-name");
                fullFactoryName =
                    xmlData.getFrameworkAttributeValue(
                        "fourth.framework",
                        0,
                        "full-factory-name");
                // TODO: If fullNameDomainName and fullFactoryName are empty
                // use default name domain

                String[] values =
                    xmlData.getFrameworkMultithreadAttribute(
                        "fourth.framework",
                        0);
                String xmlThreadingPolicy = values[0];
                String xmlThreadingAttribute = values[1];
                String xmlThreadingAttributeValue = values[2];

                if (!xmlThreadingPolicy.equals("serialize")) {
                    threadingPolicy = new SingleThreadPolicy();
                } else if (!xmlThreadingPolicy.equals("thread-per-request")) {
                    threadingPolicy = new ThreadPerRequestPolicy();
                } else if (!xmlThreadingPolicy.equals("thread-pool")) {
                    int threadPoolSize =
                        Integer.valueOf(xmlThreadingAttributeValue).intValue();
                    threadingPolicy = new ThreadPoolPolicy(threadPoolSize);
                }

            } catch (NumberFormatException nfe) {
                processImpl.setCdmwInitExceptionRaised();
                throw new org.omg.CORBA.BAD_PARAM(
                    ExceptionMinorCodes.BAD_PARAMInvalidXMLInitData,
                    org.omg.CORBA.CompletionStatus.COMPLETED_NO);
            } catch (XMLErrorException xee) {
                processImpl.setCdmwInitExceptionRaised();
                // TODO: Add trace logs here
                throw new org.omg.CORBA.BAD_PARAM(
                    ExceptionMinorCodes.BAD_PARAMInvalidXMLInitData,
                    org.omg.CORBA.CompletionStatus.COMPLETED_NO);
            } catch (BadParameterException bpe) {
                processImpl.setCdmwInitExceptionRaised();
                // TODO: Add trace logs here
                throw new org.omg.CORBA.BAD_PARAM(
                    ExceptionMinorCodes.BAD_PARAMInvalidXMLInitData,
                    org.omg.CORBA.CompletionStatus.COMPLETED_NO);
            }

            try {
                // Get the factory Allocator
                cdmw.resources.UnMngEntityResourceFactoryImplAllocator allocator = 
                    cdmw.resources.UnMngEntityResourceFactoryImplAllocator.theAllocator;
                
                NamedObjectsFactoryInitUtil
                    .setupNamedObjectFactory(
                        allocator,
                        orb,
                        factoriesPOA,
                        repository,
                        rootContext,
                        fullNameDomainName,
                        fullFactoryName,
                        "",
                // TODO:
                threadingPolicy, args);

                // TODO
                System.out.println(
                    "Set up of the factory <"
                        + "cdmw.resources.UnMngEntityResourceFactoryImpl"
                        + "> done.");

            } catch (BadParameterException bpe) {
                processImpl.setCdmwInitExceptionRaised();
                // TODO: Add trace logs here
                throw new org.omg.CORBA.BAD_PARAM(
                    ExceptionMinorCodes.BAD_PARAMLifeCycleFrameworkInit,
                    org.omg.CORBA.CompletionStatus.COMPLETED_NO);
            } catch (InternalErrorException iie) {
                processImpl.setCdmwInitExceptionRaised();
                // TODO: Add trace logs here
                throw new org.omg.CORBA.INTERNAL(
                    ExceptionMinorCodes.INTERNALLifeCycleFrameworkError,
                    org.omg.CORBA.CompletionStatus.COMPLETED_NO);
            }

            // *****************************************************************
            // *********  cdmw.resources.SessionResourceFactoryImpl ***********
            // *****************************************************************
            fullFactoryName = "";
            threadingPolicy = null;

            try {
                fullFactoryName =
                    xmlData.getFrameworkAttributeValue(
                        "second.framework",
                        0,
                        "full-factory-name");

                String[] values =
                    xmlData.getFrameworkMultithreadAttribute(
                        "second.framework",
                        0);
                String xmlThreadingPolicy = values[0];
                String xmlThreadingAttribute = values[1];
                String xmlThreadingAttributeValue = values[2];

                if (!xmlThreadingPolicy.equals("serialize")) {
                    threadingPolicy = new SingleThreadPolicy();
                } else if (!xmlThreadingPolicy.equals("thread-per-request")) {
                    threadingPolicy = new ThreadPerRequestPolicy();
                } else if (!xmlThreadingPolicy.equals("thread-pool")) {
                    int threadPoolSize =
                        Integer.valueOf(xmlThreadingAttributeValue).intValue();
                    threadingPolicy = new ThreadPoolPolicy(threadPoolSize);
                }

            } catch (NumberFormatException nfe) {
                processImpl.setCdmwInitExceptionRaised();
                throw new org.omg.CORBA.BAD_PARAM(
                    ExceptionMinorCodes.BAD_PARAMInvalidXMLInitData,
                    org.omg.CORBA.CompletionStatus.COMPLETED_NO);
            } catch (XMLErrorException xee) {
                processImpl.setCdmwInitExceptionRaised();
                // TODO: Add trace logs here
                throw new org.omg.CORBA.BAD_PARAM(
                    ExceptionMinorCodes.BAD_PARAMInvalidXMLInitData,
                    org.omg.CORBA.CompletionStatus.COMPLETED_NO);
            } catch (BadParameterException bpe) {
                processImpl.setCdmwInitExceptionRaised();
                // TODO: Add trace logs here
                throw new org.omg.CORBA.BAD_PARAM(
                    ExceptionMinorCodes.BAD_PARAMInvalidXMLInitData,
                    org.omg.CORBA.CompletionStatus.COMPLETED_NO);
            }

            try {
                // Get the factory Allocator
                cdmw.resources.SessionResourceFactoryImplAllocator allocator = 
                    cdmw.resources.SessionResourceFactoryImplAllocator.theAllocator;
                
                AnonymousObjectsFactoryInitUtil
                    .setupAnonymousObjectFactory(
                        allocator,
                        orb,
                        factoriesPOA,
                        repository,
                        rootContext,
                        fullFactoryName,
                        "",
                // TODO:
                threadingPolicy, args);

                // TODO
                System.out.println(
                    "Set up of the factory <"
                        + "cdmw.resources.SessionResourceFactoryImpl"
                        + "> done.");

            } catch (BadParameterException bpe) {
                processImpl.setCdmwInitExceptionRaised();
                // TODO: Add trace logs here
                throw new org.omg.CORBA.BAD_PARAM(
                    ExceptionMinorCodes.BAD_PARAMLifeCycleFrameworkInit,
                    org.omg.CORBA.CompletionStatus.COMPLETED_NO);
            } catch (InternalErrorException iie) {
                processImpl.setCdmwInitExceptionRaised();
                // TODO: Add trace logs here
                throw new org.omg.CORBA.INTERNAL(
                    ExceptionMinorCodes.INTERNALLifeCycleFrameworkError,
                    org.omg.CORBA.CompletionStatus.COMPLETED_NO);
            }

            // *****************************************************************
            // *********  cdmw.resources.ServiceResourceFactoryImpl ***********
            // *****************************************************************
            fullFactoryName = "";
            threadingPolicy = null;

            try {
                fullFactoryName =
                    xmlData.getFrameworkAttributeValue(
                        "third.framework",
                        0,
                        "full-factory-name");

                String[] values =
                    xmlData.getFrameworkMultithreadAttribute(
                        "third.framework",
                        0);
                String xmlThreadingPolicy = values[0];
                String xmlThreadingAttribute = values[1];
                String xmlThreadingAttributeValue = values[2];

                if (!xmlThreadingPolicy.equals("serialize")) {
                    threadingPolicy = new SingleThreadPolicy();
                } else if (!xmlThreadingPolicy.equals("thread-per-request")) {
                    threadingPolicy = new ThreadPerRequestPolicy();
                } else if (!xmlThreadingPolicy.equals("thread-pool")) {
                    int threadPoolSize =
                        Integer.valueOf(xmlThreadingAttributeValue).intValue();
                    threadingPolicy = new ThreadPoolPolicy(threadPoolSize);
                }

            } catch (NumberFormatException nfe) {
                processImpl.setCdmwInitExceptionRaised();
                throw new org.omg.CORBA.BAD_PARAM(
                    ExceptionMinorCodes.BAD_PARAMInvalidXMLInitData,
                    org.omg.CORBA.CompletionStatus.COMPLETED_NO);
            } catch (XMLErrorException xee) {
                processImpl.setCdmwInitExceptionRaised();
                // TODO: Add trace logs here
                throw new org.omg.CORBA.BAD_PARAM(
                    ExceptionMinorCodes.BAD_PARAMInvalidXMLInitData,
                    org.omg.CORBA.CompletionStatus.COMPLETED_NO);
            } catch (BadParameterException bpe) {
                processImpl.setCdmwInitExceptionRaised();
                // TODO: Add trace logs here
                throw new org.omg.CORBA.BAD_PARAM(
                    ExceptionMinorCodes.BAD_PARAMInvalidXMLInitData,
                    org.omg.CORBA.CompletionStatus.COMPLETED_NO);
            }

            try {
                // Get the factory Allocator
                cdmw.resources.ServiceResourceFactoryImplAllocator allocator = 
                    cdmw.resources.ServiceResourceFactoryImplAllocator.theAllocator;
                
                AnonymousObjectsFactoryInitUtil
                    .setupAnonymousObjectFactory(
                        allocator,
                        orb,
                        factoriesPOA,
                        repository,
                        rootContext,
                        fullFactoryName,
                        "",
                // TODO:
                threadingPolicy, args);

                // TODO
                System.out.println(
                    "Set up of the factory <"
                        + "cdmw.resources.ServiceResourceFactoryImpl"
                        + "> done.");

            } catch (BadParameterException bpe) {
                processImpl.setCdmwInitExceptionRaised();
                // TODO: Add trace logs here
                throw new org.omg.CORBA.BAD_PARAM(
                    ExceptionMinorCodes.BAD_PARAMLifeCycleFrameworkInit,
                    org.omg.CORBA.CompletionStatus.COMPLETED_NO);
            } catch (InternalErrorException iie) {
                processImpl.setCdmwInitExceptionRaised();
                // TODO: Add trace logs here
                throw new org.omg.CORBA.INTERNAL(
                    ExceptionMinorCodes.INTERNALLifeCycleFrameworkError,
                    org.omg.CORBA.CompletionStatus.COMPLETED_NO);
            }

            // Discard requests until run order comes from the platform management
            try {
                poaManager.discard_requests(false);
            } catch (
                org.omg.PortableServer.POAManagerPackage.AdapterInactive ai) {
                // TODO: Add trace logs here
                throw new org.omg.CORBA.INTERNAL(
                    ExceptionMinorCodes.INTERNALORBAdapterInactive,
                    org.omg.CORBA.CompletionStatus.COMPLETED_NO);
            }

            // advise processImpl that cdmwInit is done
            processImpl.setCdmwInitDone();

        } catch (CORBASystemExceptionWrapper csew) {

            if (traceEnabled) {

                String domain = TraceDomains.CDMW_INIT;
                short level = TraceLevels.FTL;

                if (FlushAreaMngr.isToBeTraced(domain, level)) {
                    Stream stream = Stream.getInstance();
                    // filename and line number are avalaible in J2SDK 1.4
                    stream.setLine((short) 0);
                    stream.setFile("unknown");
                    stream.setUserDomain(domain);
                    stream.setUserLevel(level);
                    stream.doFlush();
                } else { // In case there is a problem in the trace library itself!
                    System.out.println(
                        domain + " : Fatal Error : " + csew.toString());
                }

            } else {
                System.out.println(
                    "cdmwInit: Fatal Error: " + csew.toString());
            }
            csew.raiseSystemException();

        }

    }

    /**
     * Clean any static data allocated/initialised by cdmwInit.
     * Implementation is generated by CDMW code generation tools according
     * to user provided description.
     * <STRONG>NOTA</STRONG> CDMW Factory objects are deactivated
     * at ORB shutdown.
     *
     * @param orb A reference to the ORB pseudo-object
     */
    public static void cdmwCleanup(org.omg.CORBA.ORB orb) {

        Assert.check(orb != null);

        // Release all static object references held by RepositoryInterface
        RepositoryInterface.finish();

        // Free all allocated memory and stop the trace service
        FlushAreaMngr.cleanup();

        // Free all allocated memory and stop the performance service
        try {
            PerformanceMngr.cleanup();
        } catch (BadParameterException bpe) {
            // Do nothing (ignore)
            // TODO: Add trace logs here
        }

    }

}


/* =========================================================================== *
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI.
 * 
 * It is derivative work based on PERCO Copyright (C) THALES 2000-2003.
 * All rights reserved.
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Library General Public License as published by the
 * Free Software Foundation; either version 2 of the License, or (at your
 * option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General
 * Public License along with CARDAMOM; see the file COPYING. If not, write to
 * the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 * =========================================================================== */

#ifndef DATA_IDL
#define DATA_IDL

/**
 * Enum defining 2 types of data.
 */
enum DataType
{
    TYPE_A,
    TYPE_B
};

/**
 * BaseData
 *
 * Example of basic data to be provided in a user event.
 * Valuetype is convenient for defining concrete data.
 */
valuetype BaseData
{
    /**
     * Indicates the type of the data. It is usefull for downcasting
     * the data into the concrete data.
     */
    public DataType data_type;
};

/**
 * DataA
 *
 * Example of concrete user data.
 * It inherits from BaseData.
 */
valuetype DataA : BaseData
{
    /**
     * A field message.
     */
    public string message;

    /**
     * Create a DataA instance.
     * Its field data_type will contain TYPE_A.
     *
     *@param message the message to be placed in the message field.
     */
    factory create( in string message );
};

/**
 * DataB
 *
 * Another example of concrete user data.
 * It inherits from DataA.
 */
valuetype DataB : DataA
{
    /**
     * Same as DataA data + a field number.
     */
    public unsigned long number;

    /**
     * Create a DataB instance.
     * Its field data_type will contain TYPE_B.
     *
     *@param message the message to be placed in the message field.
     *@param number the number to be placed in the number field.
     */
    factory create( in string message, in unsigned long number );
};

#endif //DATA_IDL

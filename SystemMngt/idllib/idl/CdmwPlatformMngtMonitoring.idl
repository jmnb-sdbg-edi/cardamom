/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI. It is derivative work based on PERCO Copyright (C) THALES
 * 2000-2003. All rights reserved.
 * 
 * Copyright (C) THALES 2004-2005. All rights reserved
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Library General Public License as published
 * by the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General Public
 * License along with CARDAMOM; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */


#ifndef CDMW_PLATFORM_MNGT_MONITORING_IDL_
#define CDMW_PLATFORM_MNGT_MONITORING_IDL_


#pragma prefix "thalesgroup.com"

module CdmwPlatformMngt
{

    /**
    * The base interface for monitorable object
    */
    interface Monitorable { };


    /**
    * A PullMonitorable object must reply its liveliness upon request.
    */
    interface PullMonitorable : Monitorable 
    {

        /**
        * Checks the liveliness of the monitorable object.
        *
        * The monitorable object is expected to check its state
        * and to reply as soon as possible.
        */
        void is_alive();

    };


    /**
    * The interface used by a PushMonitorable to signal its liveliness.
    */
    interface Monitor
    {

        /**
        * Signals the monitor.
        */
        void set_ready();

    };


    /**
    * A PushMonitorable object must signal regularly its liveliness
    * to its registered monitor.
    */
    interface PushMonitorable : Monitorable
    {

        /**
        * Registers the monitor.
        *
        * @param the_monitor the monitor of this monitorable object.
        * @param interval the interval in ms between each signal to the monitor.
        */
        void register_monitor(in Monitor the_monitor, in unsigned long interval);

    };


}; // End Module CdmwPlatformMngt

#endif // CDMW_PLATFORM_MNGT_MONITORING_IDL_


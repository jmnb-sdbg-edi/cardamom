/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI. It is derivative work based on PERCO Copyright (C) THALES
 * 2000-2003. All rights reserved.
 * 
 * Copyright (C) THALES 2004-2005. All rights reserved
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Library General Public License as published
 * by the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General Public
 * License along with CARDAMOM; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */


#ifndef CDMW_PLATFORM_MNGT_COMMANDED_ELEMENT_IDL_
#define CDMW_PLATFORM_MNGT_COMMANDED_ELEMENT_IDL_



#include <CdmwPlatformMngtCommon.idl>
#include <CdmwPlatformMngtCommandBase.idl>

#pragma prefix "thalesgroup.com"

module CdmwPlatformMngt
{
    interface CommandResponseCallback;
    
    /**
    * The specified command already exists.
    */
    exception CommandAlreadyExists {};
    
    /**
    * The command argument already exists.
    */
    exception CommandArgumentAlreadyExists
    {
        string parameter_name;
    };
        
    
    
    /**
     * The different status of a command.
     */
    enum CommandStatus
    {
        /**
        * The command is initial state
        */
        COMMAND_INITIAL,
        
        /**
        * The command is created
        */
        COMMAND_CREATED,

        /**
        * The command is in progress
        */
        COMMAND_IN_PROGRESS,
        
        /**
        * The command is rejected
        */
        COMMAND_REJECTED,
        
        /**
        * The command is timeout
        */
        COMMAND_TIMEOUT,
        
        /**
        * The command is failed
        */
        COMMAND_FAILED,
        
        /**
        * The command is ok
        */
        COMMAND_OK
    };
    

    /**
    * The CommandedElement
    */
    interface CommandedElement
    {
        /**
        * Returns the status of the command with its additional information.
        */
        CommandStatus get_command_status(out string status_info);
        
        /**
        * Call the command selected by its name and associated to the element.
        *
        * @param command_name the name of the command
        * @param command_args the arguments of the command
        * @param response_callback the callback called after command processing
        *
        * @exception CommandNotFound if command name has not been registered
        * @exception CommandArgumentInvalid if the argument value is invalid
        * @exception CommandRejected if the command is rejected
        */
        void call_command (
            in string command_name,
            in CmdParameterValues command_args,
            in CommandResponseCallback response_callback)
            raises(CommandNotFound,
                   CommandArgumentInvalid,
                   CommandRejected);
                   

    }; // End interface CommandedElement



    /**
    * The CommandContainer
    */
    interface CommandContainer : CommandedElement
    {
        /**
        * Add the new command.
        *
        * @param command_name the name of the command to create
        * @param time_out time out to execute the command
        * @param command_args the definition of the command arguments
        *
        * @exception CommandAlreadyExists if command name has been already registered
        * @exception CommandArgumentAlreadyExists if the argument is already defined
        */
        void add_command (
            in string command_name,
            in Timeout time_out,
            in CmdParameterDescriptors command_args)
            raises(CommandAlreadyExists,
                   CommandArgumentAlreadyExists);
                   
                   
        /**
        * Remove the command.
        *
        * @param command_name the name of the command to remove
        *
        * @exception CommandNotFound if command name has not been registered
        */
        void remove_command (
            in string command_name)
            raises(CommandNotFound);


    }; // End interface CommandContainer


}; // End Module CdmwPlatformMngt

#endif //CDMW_PLATFORM_MNGT_COMMANDED_ELEMENT_IDL_


/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI. It is derivative work based on PERCO Copyright (C) THALES
 * 2000-2003. All rights reserved.
 * 
 * Copyright (C) THALES 2004-2005. All rights reserved
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Library General Public License as published
 * by the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General Public
 * License along with CARDAMOM; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */


#ifndef CDMW_FTSYST_MNGT_SYSTEM_IDL_
#define CDMW_FTSYST_MNGT_SYSTEM_IDL_




#include <CdmwPlatformMngtCommon.idl>
#include <CdmwPlatformMngtCommonBase.idl>
#include <CdmwPlatformMngtElementBase.idl>


#include <CdmwPlatformMngtObservable.idl>

#include <CdmwFTSystMngtManagedElement.idl>
#include <CdmwFTSystMngtHost.idl>
#include <CdmwFTSystMngtEntityContainer.idl>
#include <CdmwFTSystMngtServiceContainer.idl>


#pragma prefix "thalesgroup.com"

module CdmwFTSystMngt
{
    interface ApplicationAccessor;
    interface ProcessAccessor;
    interface HostAccessor;
    interface EntityAccessor;
    
    /**
     * The system accessor.
     */
    interface SystemAccessor : ManagedElementAccessor,
        CdmwPlatformMngt::Observable, 
        HostContainerAccessor,
        RWEntityContainerAccessor,
        RWServiceDefContainerAccessor       
    {
        /**
	* 14-7-2005 new signature added 
        */
        string get_system_mission() ;

        /**
        * new added on 14-7-2005 
        * to set the system_mission attribute
        **/
        void set_system_mission(in string system_mission);

        /**
        * new added on 22-7-2005 
        * for getting system_name attribute
        * rem.: ElementName is a typdef of a string
        **/
        string get_system_name();

        /**
        * new added on 22-7-2005 
        * to set system_name attribute
        * rem.: ElementName is a typdef of a tring
        **/
        void set_system_name(in string system_name);

        /**
        * to get the master_host attribute
        * new added on 22-7-2005 
        * 
        **/
        string get_master_host();

        /**
        * Get the application accessor.
        *
        * @return the application accessor
        */
        ApplicationAccessor get_application_accessor();
        
        /**
        * Get the process accessor.
        *
        * @return the process accessor
        */
        ProcessAccessor get_process_accessor();
        
        /**
        * Get the host accessor.
        *
        * @return the host accessor
        */
        HostAccessor get_host_accessor();
        
        /**
        * Get the entity accessor.
        *
        * @return the entity accessor
        */
        EntityAccessor get_entity_accessor();   
        
        /**
        * Get the system element path.
        *
        * @return the system element path (null path if not yet defined)
        */
        CdmwPlatformMngt::ElementPath get_system_element_path(); 

        /**
        * Returns the status of the system with its additional information.
        */
        CdmwPlatformMngt::SystemStatus get_status(out string status_info);

        /**
        * Returns the mode of the system with its additional information.
        */
        CdmwPlatformMngt::FunctioningMode get_mode(out string mode_info);

        /**
        * Returns a snapshot of the whole application.
        */
        CdmwPlatformMngt::SystemSnapshot get_snapshot();
        
        
        /**
        * Returns the application paths of the system.
        * The first how_many application paths will be returned at most and the
        * rest of the application paths may be retrieved thanks to the iterator.
        *
        * @param how_many the number of application paths to return
        * @param applications_iterator the iterator to the rest of application paths.
        * @return At most the number of application paths requested
        */
        CdmwPlatformMngt::ElementPaths get_applications(
            in unsigned long how_many,
            out CdmwPlatformMngt::ElementPathsIterator applications_iterator);

       /**
	* Added on 2-11-2005
        * It returns the number of applications
        *
        * @return the number of applications
        * 
        */
        unsigned long get_number_of_applications(); 

        /**
        * Check the specified application exist.
        *
        * @param application_name the name identifying the application.
        * @return the element path of the application
        *
        * @exception ApplicationNotFound if application_name doesn't denote
        * an existing application.
        */
        CdmwPlatformMngt::ElementPath get_application(in CdmwPlatformMngt::ElementName application_name)
            raises(CdmwPlatformMngt::ApplicationNotFound);
            
        
        /**
        * Defines the initial configuration of the system.
        *
        * @param system_def the definition of the system.
        *
        * @exception DuplicateEntity if there is a duplicate entity name among
        * the system's entities
        * @exception CosPropertyService::MultipleExceptions if there is a bad property
        * @exception DuplicateService if there is a duplicate service name among
        * the system's service definitions
        * @exception DuplicateHost if there is a duplicate host name among
        * the system's host definitions
        * @exception DuplicateHostEntity if there is a duplicate entity name
        * among the entities of one of the hosts
        * @exception HostPropertyExceptions if there is a bad host property
        * @exception AlreadyDone if the initial configuration has already been
        * defined.
        * @exception IncompatibleStatus if the system is not in the INITIAL
        * status.
        */
        void define(in CdmwPlatformMngt::SystemDef system_def)
            raises(CdmwPlatformMngt::DuplicateEntity, 
                   CosPropertyService::MultipleExceptions,
                   CdmwPlatformMngt::DuplicateService, 
                   CdmwPlatformMngt::DuplicateHost,
                   CdmwPlatformMngt::DuplicateHostEntity,
                   CdmwPlatformMngt::HostPropertyExceptions,
                   CdmwPlatformMngt::AlreadyDone, 
                   CdmwPlatformMngt::IncompatibleStatus);

        /**
        * Sets the graph of application initialisation.
        *
        * @param application_graph the application graph.
        *
        * @exception ReferenceNotFound if an element of the graph refers to an
        * unknown application.
        * @exception CircularReference if a circular reference has been detected
        * in the graph.
        * @exception IncompatibleStatus if the startup of the system is in
        * progress.
        */
        void set_init_graph(in CdmwPlatformMngt::GraphElements application_graph)
            raises(CdmwPlatformMngt::ReferenceNotFound, 
                   CdmwPlatformMngt::CircularReference, 
                   CdmwPlatformMngt::IncompatibleStatus);

        /**
        * Sets the graph of application stop.
        *
        * @param application_graph the application graph.
        *
        * @exception ReferenceNotFound if an element of the graph refers to an
        * unknown application
        * @exception CircularReference if a circular reference has been detected
        * in the graph
        * @exception IncompatibleStatus if the stop of the system is in
        * progress.
        */
        void set_stop_graph(in CdmwPlatformMngt::GraphElements application_graph)
            raises(CdmwPlatformMngt::ReferenceNotFound, 
                   CdmwPlatformMngt::CircularReference, 
                   CdmwPlatformMngt::IncompatibleStatus);

        /**
        * Adds a new runset or modify an existing runset.
        *
        * @param run_set_def the definition of the runset.
        *
        * @exception DuplicateRunSetElement if an element already exists in the
        * runset or among existing runsets.
        * @exception IncompatibleStatus if the status of the system doesn't
        * allow the operation.
        */
        void set_run_set(in CdmwPlatformMngt::RunSetDef run_set_def)
            raises(CdmwPlatformMngt::DuplicateRunSetElement, 
                   CdmwPlatformMngt::IncompatibleStatus);

        /**
        * Removes the specified runset.
        *
        * @param run_set_name the name identifying the runset to remove.
        *
        * @exception RunSetNotFound if run_set_name doesn't denote
        * an existing runset.
        * @exception IncompatibleStatus if the status of the system doesn't
        * allow the operation.
        */
        void remove_run_set(in CdmwPlatformMngt::RunSetName run_set_name)
            raises(CdmwPlatformMngt::RunSetNotFound, 
                   CdmwPlatformMngt::IncompatibleStatus);

        /**
        * Removes all runsets.
        *
        * @exception IncompatibleStatus if the status of the system doesn't
        * allow the operation.
        */
        void remove_all_run_sets() raises(CdmwPlatformMngt::IncompatibleStatus);

        /**
        * Adds a host to the system.
        *
        * @param host_def the definition of the host to add.
        * @return the added host element path
        *
        * @exception HostAlreadyExists if the host name is already used
        * within the system.
        * @exception DuplicateEntity if there is a duplicate entity name among
        * the host's entities
        * @exception CosPropertyService::MultipleExceptions if there is a bad property
        * @exception IncompatibleStatus if the status of the system doesn't
        * allow the operation.
        */
        CdmwPlatformMngt::ElementPath add_host(in CdmwPlatformMngt::HostDef host_def)
            raises(CdmwPlatformMngt::HostAlreadyExists, 
                   CdmwPlatformMngt::DuplicateEntity, 
                   CosPropertyService::MultipleExceptions, 
                   CdmwPlatformMngt::IncompatibleStatus);

        /**
        * Removes a host from the system.
        *
        * @param host_name the name identifying the host to remove.
        *
        * @exception HostNotFound if host_name doesn't denote
        * an existing host.
        * @exception IncompatibleStatus if the status of the system doesn't
        * allow the operation.
        */
        void remove_host(in CdmwPlatformMngt::ElementName host_name)
            raises(CdmwPlatformMngt::HostNotFound, 
                   CdmwPlatformMngt::IncompatibleStatus);

        /**
        * Adds an application to the system.
        *
        * @param platform_application_def the definition of the platform application
        * embedding the application.
        * @param application_def the definition of the application to add.
        *
        * @return the added application element path
        *
        * @exception ApplicationAlreadyExists if the application name is already
        * used within the system.
        * @exception HostNotFound if the host where the application should run
        * is unknown.
        * @exception DuplicateEntity if there is a duplicate entity name among
        * the application's entities
        * @exception CosPropertyService::MultipleExceptions if there is a bad property among
        * the application's properties
        * @exception DuplicateService if there is a duplicate service name among
        * the application's service definitions
        * @exception DuplicateProcess if there is a duplicate process name among
        * the application's processes
        * @exception ProcessHostNotFound if an unknown host is used by one of
        * the application's processes
        * @exception DuplicateProcessEntity if there is a duplicate entity name
        * among the entities of one of the application processes
        * @exception ProcessPropertyExceptions if there is a bad property among
        * the properties of one of the application processes
        * @exception DuplicateProcessService if there is a duplicate service
        * name among the services of one of the application processes
        * @exception DuplicateProcessStep if there is a duplicate step label
        * among the steps of one of the application processes
        * @exception DuplicateProcessCommand if there is a duplicate command name
        * among the commands of one of the application processes        
        * @exception DuplicateProcessCommandArg if there is a duplicate command arg name
        * among the commands of one of the application processes
        * @exception DuplicateEntityCommand if there is a duplicate command name
        * among the commands of one of the entities of the application processes
        * @exception DuplicateEntityCommandArg if there is a duplicate command arg name
        * among the commands of one of the entities of the application processes
        * @exception IncompatibleStatus if the status of the system doesn't
        * allow the operation.
        */
        CdmwPlatformMngt::ElementPath add_application(
                in CdmwPlatformMngt::PlatformApplicationDef platform_application_def,
                in CdmwPlatformMngt::ApplicationDef application_def)
            raises(CdmwPlatformMngt::ApplicationAlreadyExists, 
                   CdmwPlatformMngt::HostNotFound,
                   CdmwPlatformMngt::DuplicateEntity, 
                   CosPropertyService::MultipleExceptions, 
                   CdmwPlatformMngt::DuplicateService, 
                   CdmwPlatformMngt::DuplicateProcess, 
                   CdmwPlatformMngt::ProcessHostNotFound,
                   CdmwPlatformMngt::DuplicateProcessEntity, 
                   CdmwPlatformMngt::ProcessPropertyExceptions,
                   CdmwPlatformMngt::DuplicateProcessService, 
                   CdmwPlatformMngt::DuplicateProcessStep,
                   CdmwPlatformMngt::DuplicateProcessCommand, 
                   CdmwPlatformMngt::DuplicateProcessCommandArg,
                   CdmwPlatformMngt::DuplicateEntityCommand, 
                   CdmwPlatformMngt::DuplicateEntityCommandArg,
                   CdmwPlatformMngt::IncompatibleStatus);

        /**
        * Removes an application from the system.
        * The application must be inactive.
        *
        * @param application_name the name identifying the application to remove.
        *
        * @exception ApplicationNotFound if application_name doesn't denote
        * an existing application.
        * @exception ApplicationStillActive if the application is still active
        * @exception IncompatibleStatus if the status of the system doesn't
        * allow the operation.
        */
        void remove_application(in CdmwPlatformMngt::ElementName application_name)
            raises(CdmwPlatformMngt::ApplicationNotFound, 
                   CdmwPlatformMngt::ApplicationStillActive, 
                   CdmwPlatformMngt::IncompatibleStatus);

        /**
        * Starts the system.
        * The initialisation order of the applications will follow the graph
        * of application initialisation. The automatic startup of applications
        * are defined by the runsets.
        *
        * @param startup_kind the startup kind of the whole system.
        *
        * @exception IncompatibleStatus if the status of the system doesn't
        * allow the operation.
        */
        void start(in CdmwPlatformMngtBase::StartupKind startup_kind)
            raises(CdmwPlatformMngt::IncompatibleStatus);

        /**
        * Resumes the startup of the system.
        *
        * @exception IncompatibleStatus if the status of the system doesn't
        * allow the operation.
        */
        void resume()
            raises(CdmwPlatformMngt::IncompatibleStatus);

        /**
        * Acknowledges the DEGRADED_MODE of the system.
        * The mode of the system is reset to NORMAL_MODE.
        *
        * @exception IncompatibleStatus if the status of the system doesn't
        * allow the operation.
        */
        void acknowledge()
            raises(CdmwPlatformMngt::IncompatibleStatus);

        /**
        * Requests the system to stop.
        * The stop order of the applications will follow the graph of
        * application stop. Active applications that do not belong to this graph
        * will be stopped concurrently.
        *
        * @param emergency if true, the graph is not used and all the
        * applications will be requested to stop concurrently. This flag
        * is also transmitted to these applications.
        */
        void stop(in boolean emergency);
        
        
        /**
        * Stop and make a Cold Start of the system.
        * The initialisation order of the applications will follow the graph
        * of application initialisation. The automatic startup of applications
        * are defined by the runsets.
        * All user properties of element retrieve their initial values
        *
        * @param startup_kind the startup kind of the whole system.
        *
        * @exception IncompatibleStatus if the status of the system doesn't
        * allow the operation.
        */
        void cold_restart(in CdmwPlatformMngtBase::StartupKind startup_kind)
            raises(CdmwPlatformMngt::IncompatibleStatus);
            
        
        /**
        * Stop and make a Hot Start of the system.
        * The initialisation order of the applications will follow the graph
        * of application initialisation. The automatic startup of applications
        * are defined by the runsets.
        * All user properties of element keep their current values
        *
        * @param startup_kind the startup kind of the whole system.
        *
        * @exception IncompatibleStatus if the status of the system doesn't
        * allow the operation.
        */
        void hot_restart(in CdmwPlatformMngtBase::StartupKind startup_kind)
            raises(CdmwPlatformMngt::IncompatibleStatus);

    };
    
}; // End Module CdmwFTSystMngt

#endif // CDMW_FTSYST_MNGT_SYSTEM_IDL_


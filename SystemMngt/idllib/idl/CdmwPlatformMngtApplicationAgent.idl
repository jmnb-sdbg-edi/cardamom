/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI. It is derivative work based on PERCO Copyright (C) THALES
 * 2000-2003. All rights reserved.
 * 
 * Copyright (C) THALES 2004-2005. All rights reserved
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Library General Public License as published
 * by the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General Public
 * License along with CARDAMOM; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */


#ifndef CDMW_PLATFORM_MNGT_APPLICATION_AGENT_IDL_
#define CDMW_PLATFORM_MNGT_APPLICATION_AGENT_IDL_


#include <CdmwPlatformMngtCommonBase.idl>
#include <CdmwPlatformMngtCommon.idl>
#include <CdmwPlatformMngtMonitoring.idl>
#include <CdmwPlatformMngtServiceBroker.idl>

#pragma prefix "thalesgroup.com"


module CdmwPlatformMngt
{

    interface ProcessDelegateWrapper;


    /**
    * The agent of an application.
    */
    interface ApplicationAgent
    {

        /**
        * Creates an unmanaged process.
        *
        * @param process_name the name of the process.
        * @param process_info the information needed for creating the process.
        * @param return the error info about the command result
        *
        * @return the result of command
        *
        */
        ProcessCommandResult create_process (in ElementName process_name,
                                             in ProcessInfo process_info,
                                             out string error_info);


        /**
        * Creates a managed process.
        *
        * @param process_name the name of the process.
        * @param process_info the information needed for creating the process.
        * @param creation_timeout the timeout allowed for the creation.
        * @param return the reference to the wrapper of delegate managed process
        * @param return the error info about the command result
        * @param return the error issuer about the command result
        *
        * @return the result of command
        */
        ProcessCommandResult create_managed_process (
            in ElementName process_name,
            in ProcessInfo process_info, in Timeout creation_timeout,
            out ProcessDelegateWrapper process_wrapper,
            out string error_info, out string error_issuer);



        /**
        * Returns the process delegate wrapper of the specified process if any.
        *
        * @param process_name the name of the process.
        * @return the process delegate wrapper or a NIL reference 
        */
       ProcessDelegateWrapper  search_process_delegate_wrapper(in ElementName process_name);

        /**
        * Kills a process created by the agent.
        *
        * @param process_name the name of the process.
        *
        * @exception ProcessNotFound if process_name doesn't denote an
        * existing process.
        */
        void kill_process (in ElementName process_name) 
                raises (ProcessNotFound);

        /**
        * Get the process Id of the process.
        *
        * @param process_name the name of the process.
        *
        * @exception ProcessNotFound if process_name doesn't denote an
        * existing process.
        */
        ProcessPID get_pid (in ElementName process_name) 
                raises (ProcessNotFound);


        /**
        * Starts the monitoring of a managed process.
        *
        * @param process_name the name of the process.
        * @param process_monitoring_info the information for monitoring
        * the process.
        *
        * @exception ProcessNotFound if process_name doesn't denote an
        * existing process.
        * @exception UnsupportedMonitoringModel if the monitoring model is
        * not actually supported by the managed process.
        * @exception IncompatibleType if process_name doesn't denote a
        * managed process.
        * @exception IncompatibleMonitoringCommand if the managed process is already
        * monitored.
        * @exception IncompatibleMonitoringValue if the monitoring parameters (interval
        * and timeout) are incompatible.
        */
        void start_process_monitoring (in ElementName process_name,
            in CompleteMonitoringInfo process_monitoring_info) 
                raises (ProcessNotFound, UnsupportedMonitoringModel,
                        IncompatibleType, IncompatibleMonitoringCommand,
                        IncompatibleMonitoringValue);

        /**
        * Stops the monitoring of a managed process.
        *
        * @param process_name the name of the process.
        *
        * @exception ProcessNotFound if process_name doesn't denote an
        * existing process.
        * @exception IncompatibleType if process_name doesn't denote a
        * managed process.
        * @exception IncompatibleMonitoringCommand if the managed process is not
        * already monitored.
        */
        void stop_process_monitoring (in ElementName process_name)
                raises (ProcessNotFound, IncompatibleType, IncompatibleMonitoringCommand);


        /**
        * Requests the application agent to terminate.
        * This will result in the kill of processes created by the application
        * agent.
        */
        void destroy ();


    }; // End interface ApplicationAgent

    
}; // End Module CdmwPlatformMngt

#endif // CDMW_PLATFORM_MNGT_APPLICATION_AGENT_IDL


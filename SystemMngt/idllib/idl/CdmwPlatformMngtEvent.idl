/* ===================================================================== */
/*
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI. It is derivative work based on PERCO Copyright (C) THALES
 * 2000-2003. All rights reserved.
 * 
 * Copyright (C) THALES 2004-2005. All rights reserved
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Library General Public License as published
 * by the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General Public
 * License along with CARDAMOM; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
/* ===================================================================== */


#ifndef CDMW_PLATFORM_MNGT_EVENT_IDL_
#define CDMW_PLATFORM_MNGT_EVENT_IDL_


#include <CdmwPlatformMngtCommon.idl>

#pragma prefix "thalesgroup.com"

module CdmwPlatformMngt
{


    /**
     * The base value type of all events
     */
    valuetype Event
    {
        /**
         * The header of the event.
         */
        public CdmwPlatformMngtBase::EventHeader header;

        /**
         * The system that produced the event.
         * Useful for a supervision observer that is
         * registered with multiple systems.
         */
        public ElementName system_name;

        /**
         * Indicates the kind of the event.
         * Useful for downcasting to the correct concrete event.
         */
        public EventKind event_kind;

        /**
         * Returns the issuer of the event (generally PFMMNG unless an issuer
         * attribute is defined for a concrete event).
         */
        string get_issuer();

        /**
         * Returns the full description string of the event.
         */
        string to_string();
    };

    /**
     * The mode change for the system. 
     */
    valuetype SystemModeChange : Event
    {
        /**
         * The mode of the system.
         */
        public FunctioningMode system_mode;

        /**
         * The additional information about the mode change.
         */
        public string mode_info;

        /**
         * The factory method.
         */
        factory create(in CdmwPlatformMngtBase::EventHeader header,
            in ElementName system_name,
            in FunctioningMode system_mode, in string mode_info);
    };

    /**
     * The status change for the system. 
     */
    valuetype SystemStatusChange : Event
    {
        /**
         * The status of the system.
         */
        public SystemStatus system_status;

        /**
         * The additional information about the status change.
         */
        public string status_info;

        /**
         * The factory method.
         */
        factory create(in CdmwPlatformMngtBase::EventHeader header,
            in ElementName system_name,
            in SystemStatus system_status, in string status_info);
    };

    /**
     * The status change for a host. 
     */
    valuetype HostStatusChange : Event
    {
        /**
         * The name of the host whose status has changed.
         */
        public ElementName host_name;

        /**
         * The new status of the host.
         */
        public HostStatus host_status;

        /**
         * The factory method.
         */
        factory create(in CdmwPlatformMngtBase::EventHeader header,
            in ElementName system_name,
            in ElementName host_name, in HostStatus host_status);
    };

    /**
     * The application agent has crashed on a host. 
     */
    valuetype ApplicationAgentDeath : Event
    {
        /**
         * The name of the host whose status has changed.
         */
        public ElementName host_name;

        /**
         * The name of the application whose mode changed.
         */
        public ElementName application_name;

       /**
         * The factory method.
         */
        factory create(in CdmwPlatformMngtBase::EventHeader header,
            in ElementName system_name,
            in ElementName host_name,
            in ElementName application_name);
    };

    /**
     * The mode change for an application. 
     */
    valuetype ApplicationModeChange : Event
    {
        /**
         * The name of the application whose mode changed.
         */
        public ElementName application_name;

        /**
         * The mode of the application.
         */
        public FunctioningMode application_mode;

        /**
         * The additional information about the mode change.
         */
        public string mode_info;

        /**
         * The factory method.
         */
        factory create(in CdmwPlatformMngtBase::EventHeader header,
            in ElementName system_name,
            in ElementName application_name,
            in FunctioningMode application_mode, in string mode_info);
    };
    
    /**
     * The status change for an application. 
     */
    valuetype ApplicationStatusChange : Event
    {
        /**
         * The name of the application whose status changed.
         */
        public ElementName application_name;

        /**
         * The status of the application.
         */
        public ApplicationStatus application_status;

        /**
         * The additional information about the status change.
         */
        public string status_info;

        /**
         * The factory method.
         */
        factory create(in CdmwPlatformMngtBase::EventHeader header,
            in ElementName system_name,
            in ElementName application_name,
            in ApplicationStatus application_status, in string status_info);
    };

    /**
     * The message from a process. 
     */
    valuetype ProcessMessage : Event
    {
        /**
         * The process id.
         */
        public ProcessID process_id;

        /**
         * The issuer of the event.
         */
        public CdmwPlatformMngtBase::EventIssuer issuer;

        /**
         * The message information.
         */
        public string info;

        /**
         * The factory method.
         */
        factory create(in CdmwPlatformMngtBase::EventHeader header,
            in ElementName system_name,
            in ProcessID process_id,
            in CdmwPlatformMngtBase::EventIssuer issuer,
            in string info);
    };

    /**
     * The status change for a process. 
     */
    valuetype ProcessStatusChange : ProcessMessage
    {
        /**
         * The status of the process.
         */
        public ProcessStatus process_status;

        /**
         * The step within the status.
         * Relevant only if process_status is
         * PROCESS_INITIALISING and PROCESS_STEP_PERFORMED
         */
        public short step_number;

        /**
         * The step label.
         * Relevant only if process_status is
         * PROCESS_INITIALISING and PROCESS_STEP_PERFORMED
         */
        public string step_label;

        /**
         * The factory method.
         */
        factory create(in CdmwPlatformMngtBase::EventHeader header,
            in ElementName system_name,
            in ProcessID process_id,
            in CdmwPlatformMngtBase::EventIssuer issuer,
            in ProcessStatus process_status,
            in short step_number, in string step_label,
            in string info);
    };


    /**
     * The status change for a system entity. 
     */
    valuetype SystemEntityStatusChange : Event
    {
        /**
         * The name of the system owning the entity.
         */
        //public ElementName system_name;
        
        /**
         * The name of the entity whose status changed.
         */
        public ElementName entity_name;

        /**
         * The new status of the entity.
         */
        public EntityStatus entity_status;

        /**
         * The additional information about the status change.
         */
        public string info;

        /**
         * The factory method.
         */
        factory create(in CdmwPlatformMngtBase::EventHeader header,
            in ElementName system_name,
            in ElementName entity_name,
            in EntityStatus entity_status,
            in string info);

    };

    /**
     * The status change for an application entity. 
     */
    valuetype HostEntityStatusChange : SystemEntityStatusChange
    {
        /**
         * The name of the host owning the entity.
         */
        public ElementName host_name;

        /**
         * The factory method for an host entity.
         */
        factory create(in CdmwPlatformMngtBase::EventHeader header,
            in ElementName system_name,
            in ElementName host_name,
            in ElementName entity_name,
            in EntityStatus entity_status,
            in string info);

    };


    /**
     * The status change for an application entity. 
     */
    valuetype ApplicationEntityStatusChange : SystemEntityStatusChange
    {
        /**
         * The name of the application owning the entity.
         */
        public ElementName application_name;

        /**
         * The factory method for an application entity.
         */
        factory create(in CdmwPlatformMngtBase::EventHeader header,
            in ElementName system_name,
            in ElementName application_name,
            in ElementName entity_name,
            in EntityStatus entity_status,
            in string info);

    };

    /**
     * The status change for a process entity. 
     */
    valuetype ProcessEntityStatusChange : ApplicationEntityStatusChange
    {
        /**
         * The name of the process owning the entity.
         */
        public ElementName process_name;

        /**
         * The name of the process host.
         */
        public ElementName host_name;

        /**
         * The factory method.
         */
        factory create(in CdmwPlatformMngtBase::EventHeader header,
            in ElementName system_name,
            in ElementName application_name, 
            in ElementName process_name,
            in ElementName host_name,
            in ElementName entity_name,
            in EntityStatus entity_status,
            in string info);
    };
    
    
    /**
    * The Property Info.
    */
    struct PropertyInfo
    {
        /**
         * The name of the property whose value changed.
         */
        CosPropertyService::PropertyName property_name;

        /**
         * The new value of the property.
         */
        any property_new_value;
        
        /**
         * The old value of the property.
         */
        any property_old_value;
    };

    typedef sequence<PropertyInfo> PropertyInfos;
    
    /**
     * The value change for a set of properties. 
     */
     
    valuetype PropertyChange : Event
    {
        /**
         * The path of element which properties have changed
         */
        public ElementPath element_path;

        /**
         * The infos about the changed properties.
         */
        public PropertyInfos property_infos;
        
        /**
         * The additional information about values change.
         */
        public string info;

        /**
         * The factory method.
         */
        factory create(in CdmwPlatformMngtBase::EventHeader header,
            in ElementPath element_path,
            in PropertyInfos property_infos,
            in string info);

    };

    /**
     * The user event for a process.
     */
    valuetype UserEvent : Event
    {
        /**
         * The name of the application.
         */
        public ElementName application_name;

        /**
         * The name of the process.
         */
        public ElementName process_name;
        
        /**
         * The name of the host.
         */
        public ElementName host_name;

        /**
         * The issuer of the event.
         */
        public CdmwPlatformMngtBase::EventIssuer issuer;

        /**
         * The data of the event.
         */
        public any data;

        /**
         * The factory method.
         */
        factory create(in CdmwPlatformMngtBase::EventHeader header,
            in ElementName system_name,
            in ElementName application_name,
            in ElementName process_name,
            in ElementName host_name,
            in CdmwPlatformMngtBase::EventIssuer issuer,
            in any data);
    };

}; // End Module CdmwPlatformMngt

#endif // CDMW_PLATFORM_MNGT_EVENT_IDL_


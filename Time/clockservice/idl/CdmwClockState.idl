/* ========================================================================== *
 * This file is part of CARDAMOM (R) which is jointly developed by THALES
 * and SELEX-SI. All rights reserved.
 * 
 * CARDAMOM is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Library General Public License as published by the
 * Free Software Foundation; either version 2 of the License, or (at your
 * option) any later version.
 * 
 * CARDAMOM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Library General
 * Public License along with CARDAMOM; see the file COPYING. If not, write to
 * the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 * ========================================================================= */

#ifndef _CDMW_TIME_CLOCK_STATE_IDL_
#define _CDMW_TIME_CLOCK_STATE_IDL_

#include <CosClockService.idl>

module Cdmw { module clock {

    typedef long  Ident;
    typedef octet CommandCode;

    enum TimerStatus
        {
            CREATED,
            RUNNING,
            PAUSED,
            TERMINATED
        };
        
    struct TimerInfo
    {
        TimeBase::TimeT  period;
        TimeBase::TimeT  interval;
        TimeBase::TimeT  nextExpirationTime;
        long             executionLimit;
        any              data;
        TimerStatus      status; 
    };
    
    struct ControllerData
    {
        Ident                                         id;
        TimerInfo                                     timer_info; 
        CosClockService::PeriodicExecution::Periodic  target; 
    };


    enum UpdateCommand
        {
            SET_TIME,
            SET_RATE,
            PAUSE,
            RESUME,
            TERMINATE
        };
            

    // Angelo 3 feb 2005> This could be changed from a struct to an
    // union so that we always send the minimum amount of data needed
    // on the wire.
    struct ControlledClockData
    {
        Ident            id;
        CommandCode      cmd;
        TimeBase::TimeT  X0;
        TimeBase::TimeT  Y0;
        float            rate;
        TimeBase::TimeT  frozen_time;
    };    

}; /* Cdmw */ }; /* clock */


#endif /* _CDMW_TIME_CLOCK_STATE_IDL_ */
